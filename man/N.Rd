% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/N.R
\encoding{UTF-8}
\name{N}
\alias{N}
\alias{n_check}
\alias{n0}
\alias{n1}
\alias{n2}
\alias{n3}
\alias{n1p}
\alias{n2p}
\alias{n3p}
\alias{nd}
\alias{ndots}
\alias{nd0}
\alias{nd1}
\alias{nd2}
\alias{nd3}
\alias{nd1p}
\alias{nd2p}
\alias{nd3p}
\alias{not_nd0}
\alias{not_nd1}
\alias{not_nd2}
\alias{not_nd3}
\alias{not_nd1p}
\alias{not_nd2p}
\alias{not_nd3p}
\alias{nu}
\alias{nunq}
\alias{nu0}
\alias{nu1}
\alias{nu2}
\alias{nu3}
\alias{nu1p}
\alias{nu2p}
\alias{nu3p}
\alias{not_nu0}
\alias{not_nu1}
\alias{not_nu2}
\alias{not_nu3}
\alias{not_nu1p}
\alias{not_nu2p}
\alias{not_nu3p}
\alias{nv}
\alias{nval}
\alias{nv0}
\alias{nv1}
\alias{nv2}
\alias{nv3}
\alias{nv1p}
\alias{nv2p}
\alias{nv3p}
\alias{not_nv0}
\alias{not_nv1}
\alias{not_nv2}
\alias{not_nv3}
\alias{not_nv1p}
\alias{not_nv2p}
\alias{not_nv3p}
\alias{nw}
\alias{nw0}
\alias{nw1}
\alias{nw2}
\alias{nw3}
\alias{nw1p}
\alias{nw2p}
\alias{nw3p}
\alias{not_nw0}
\alias{not_nw1}
\alias{not_nw2}
\alias{not_nw3}
\alias{not_nw1p}
\alias{not_nw2p}
\alias{not_nw3p}
\alias{neq}
\alias{ndif}
\alias{nr}
\alias{nr0}
\alias{nr1}
\alias{nr2}
\alias{nr3}
\alias{nr1p}
\alias{nr2p}
\alias{nr3p}
\alias{not_nr0}
\alias{not_nr1}
\alias{not_nr2}
\alias{not_nr3}
\alias{not_nr1p}
\alias{not_nr2p}
\alias{not_nr3p}
\alias{nc}
\alias{nc0}
\alias{nc1}
\alias{nc2}
\alias{nc3}
\alias{nc1p}
\alias{nc2p}
\alias{nc3p}
\alias{not_nc0}
\alias{not_nc1}
\alias{not_nc2}
\alias{not_nc3}
\alias{not_nc1p}
\alias{not_nc2p}
\alias{not_nc3p}
\alias{nrc}
\alias{nrc0}
\alias{nrc1}
\alias{nrc2p}
\alias{not_nrc0}
\alias{not_nrc1}
\alias{not_nrc2p}
\alias{nr0_nc0}
\alias{nr0_nc1}
\alias{nr0_nc2}
\alias{nr0_nc1p}
\alias{nr0_nc2p}
\alias{nr0_nc3p}
\alias{nr1_nc0}
\alias{nr1_nc1}
\alias{nr1_nc2}
\alias{nr1_nc1p}
\alias{nr1_nc2p}
\alias{nr1_nc3p}
\alias{nr2_nc0}
\alias{nr2_nc1}
\alias{nr2_nc2}
\alias{nr2_nc1p}
\alias{nr2_nc2p}
\alias{nr2_nc3p}
\alias{nr1p_nc0}
\alias{nr1p_nc1}
\alias{nr1p_nc2}
\alias{nr1p_nc1p}
\alias{nr1p_nc2p}
\alias{nr1p_nc3p}
\alias{nr2p_nc0}
\alias{nr2p_nc1}
\alias{nr2p_nc2}
\alias{nr2p_nc1p}
\alias{nr2p_nc2p}
\alias{nr2p_nc3p}
\alias{nr3p_nc0}
\alias{nr3p_nc1}
\alias{nr3p_nc2}
\alias{nr3p_nc1p}
\alias{nr3p_nc2p}
\alias{nr3p_nc3p}
\alias{not_nr0_nc0}
\alias{not_nr0_nc1}
\alias{not_nr0_nc2}
\alias{not_nr0_nc1p}
\alias{not_nr0_nc2p}
\alias{not_nr0_nc3p}
\alias{not_nr1_nc0}
\alias{not_nr1_nc1}
\alias{not_nr1_nc2}
\alias{not_nr1_nc1p}
\alias{not_nr1_nc2p}
\alias{not_nr1_nc3p}
\alias{not_nr2_nc0}
\alias{not_nr2_nc1}
\alias{not_nr2_nc2}
\alias{not_nr2_nc1p}
\alias{not_nr2_nc2p}
\alias{not_nr2_nc3p}
\alias{not_nr1p_nc0}
\alias{not_nr1p_nc1}
\alias{not_nr1p_nc2}
\alias{not_nr1p_nc1p}
\alias{not_nr1p_nc2p}
\alias{not_nr1p_nc3p}
\alias{not_nr2p_nc0}
\alias{not_nr2p_nc1}
\alias{not_nr2p_nc2}
\alias{not_nr2p_nc1p}
\alias{not_nr2p_nc2p}
\alias{not_nr2p_nc3p}
\alias{not_nr3p_nc0}
\alias{not_nr3p_nc1}
\alias{not_nr3p_nc2}
\alias{not_nr3p_nc1p}
\alias{not_nr3p_nc2p}
\alias{not_nr3p_nc3p}
\alias{ndim}
\alias{ndim0}
\alias{ndim1}
\alias{ndim2}
\alias{ndim3}
\alias{ndim1p}
\alias{ndim2p}
\alias{ndim3p}
\alias{not_ndim0}
\alias{not_ndim1}
\alias{not_ndim2}
\alias{not_ndim3}
\alias{not_ndim1p}
\alias{not_ndim2p}
\alias{not_ndim3p}
\alias{nnav}
\alias{nnav0}
\alias{nnav1}
\alias{nnav2}
\alias{nnav3}
\alias{nnav1p}
\alias{nnav2p}
\alias{nnav3p}
\alias{not_nnav0}
\alias{not_nnav1}
\alias{not_nnav2}
\alias{not_nnav3}
\alias{not_nnav1p}
\alias{not_nnav2p}
\alias{not_nnav3p}
\alias{nokv}
\alias{nokv0}
\alias{nokv1}
\alias{nokv2}
\alias{nokv3}
\alias{nokv1p}
\alias{nokv2p}
\alias{nokv3p}
\alias{not_nokv0}
\alias{not_nokv1}
\alias{not_nokv2}
\alias{not_nokv3}
\alias{not_nokv1p}
\alias{not_nokv2p}
\alias{not_nokv3p}
\alias{ns}
\alias{ns0}
\alias{ns1}
\alias{ns2}
\alias{ns3}
\alias{ns1p}
\alias{ns2p}
\alias{ns3p}
\alias{not_ns0}
\alias{not_ns1}
\alias{not_ns2}
\alias{not_ns3}
\alias{not_ns1p}
\alias{not_ns2p}
\alias{not_ns3p}
\alias{...n}
\alias{...ns}
\alias{...minn}
\alias{...maxn}
\alias{...neq}
\alias{...nw}
\alias{...nt}
\alias{...nf}
\alias{...nu}
\alias{...nr}
\alias{...nc}
\alias{...n_ch}
\alias{...n_nav}
\alias{...n_okv}
\alias{...nv}
\title{Dedicated counting functions}
\usage{
N(x)

n_check(x, n = NULL, min = NULL, max = NULL, eq = FALSE)

n0(x)

n1(x)

n2(x)

n3(x)

n1p(x)

n2p(x)

n3p(x)

nd()

ndots()

nd0()

nd1()

nd2()

nd3()

nd1p()

nd2p()

nd3p()

not_nd0()

not_nd1()

not_nd2()

not_nd3()

not_nd1p()

not_nd2p()

not_nd3p()

nu(x)

nunq(x)

nu0(x)

nu1(x)

nu2(x)

nu3(x)

nu1p(x)

nu2p(x)

nu3p(x)

not_nu0(x)

not_nu1(x)

not_nu2(x)

not_nu3(x)

not_nu1p(x)

not_nu2p(x)

not_nu3p(x)

nv(...)

nval(...)

nv0(...)

nv1(...)

nv2(...)

nv3(...)

nv1p(...)

nv2p(...)

nv3p(...)

not_nv0(...)

not_nv1(...)

not_nv2(...)

not_nv3(...)

not_nv1p(...)

not_nv2p(...)

not_nv3p(...)

nw(x)

nw0(x)

nw1(x)

nw2(x)

nw3(x)

nw1p(x)

nw2p(x)

nw3p(x)

not_nw0(x)

not_nw1(x)

not_nw2(x)

not_nw3(x)

not_nw1p(x)

not_nw2p(x)

not_nw3p(x)

neq(x, y)

ndif(x, y)

nr(x)

nr0(x)

nr1(x)

nr2(x)

nr3(x)

nr1p(x)

nr2p(x)

nr3p(x)

not_nr0(x)

not_nr1(x)

not_nr2(x)

not_nr3(x)

not_nr1p(x)

not_nr2p(x)

not_nr3p(x)

nc(x)

nc0(x)

nc1(x)

nc2(x)

nc3(x)

nc1p(x)

nc2p(x)

nc3p(x)

not_nc0(x)

not_nc1(x)

not_nc2(x)

not_nc3(x)

not_nc1p(x)

not_nc2p(x)

not_nc3p(x)

nrc(x)

nrc0(x)

nrc1(x)

nrc2p(x)

not_nrc0(x)

not_nrc1(x)

not_nrc2p(x)

nr0_nc0(x)

nr0_nc1(x)

nr0_nc2(x)

nr0_nc1p(x)

nr0_nc2p(x)

nr0_nc3p(x)

nr1_nc0(x)

nr1_nc1(x)

nr1_nc2(x)

nr1_nc1p(x)

nr1_nc2p(x)

nr1_nc3p(x)

nr2_nc0(x)

nr2_nc1(x)

nr2_nc2(x)

nr2_nc1p(x)

nr2_nc2p(x)

nr2_nc3p(x)

nr1p_nc0(x)

nr1p_nc1(x)

nr1p_nc2(x)

nr1p_nc1p(x)

nr1p_nc2p(x)

nr1p_nc3p(x)

nr2p_nc0(x)

nr2p_nc1(x)

nr2p_nc2(x)

nr2p_nc1p(x)

nr2p_nc2p(x)

nr2p_nc3p(x)

nr3p_nc0(x)

nr3p_nc1(x)

nr3p_nc2(x)

nr3p_nc1p(x)

nr3p_nc2p(x)

nr3p_nc3p(x)

not_nr0_nc0(x)

not_nr0_nc1(x)

not_nr0_nc2(x)

not_nr0_nc1p(x)

not_nr0_nc2p(x)

not_nr0_nc3p(x)

not_nr1_nc0(x)

not_nr1_nc1(x)

not_nr1_nc2(x)

not_nr1_nc1p(x)

not_nr1_nc2p(x)

not_nr1_nc3p(x)

not_nr2_nc0(x)

not_nr2_nc1(x)

not_nr2_nc2(x)

not_nr2_nc1p(x)

not_nr2_nc2p(x)

not_nr2_nc3p(x)

not_nr1p_nc0(x)

not_nr1p_nc1(x)

not_nr1p_nc2(x)

not_nr1p_nc1p(x)

not_nr1p_nc2p(x)

not_nr1p_nc3p(x)

not_nr2p_nc0(x)

not_nr2p_nc1(x)

not_nr2p_nc2(x)

not_nr2p_nc1p(x)

not_nr2p_nc2p(x)

not_nr2p_nc3p(x)

not_nr3p_nc0(x)

not_nr3p_nc1(x)

not_nr3p_nc2(x)

not_nr3p_nc1p(x)

not_nr3p_nc2p(x)

not_nr3p_nc3p(x)

ndim(x)

ndim0(x)

ndim1(x)

ndim2(x)

ndim3(x)

ndim1p(x)

ndim2p(x)

ndim3p(x)

not_ndim0(x)

not_ndim1(x)

not_ndim2(x)

not_ndim3(x)

not_ndim1p(x)

not_ndim2p(x)

not_ndim3p(x)

nnav(x)

nnav0(x)

nnav1(x)

nnav2(x)

nnav3(x)

nnav1p(x)

nnav2p(x)

nnav3p(x)

not_nnav0(x)

not_nnav1(x)

not_nnav2(x)

not_nnav3(x)

not_nnav1p(x)

not_nnav2p(x)

not_nnav3p(x)

nokv(x)

nokv0(x)

nokv1(x)

nokv2(x)

nokv3(x)

nokv1p(x)

nokv2p(x)

nokv3p(x)

not_nokv0(x)

not_nokv1(x)

not_nokv2(x)

not_nokv3(x)

not_nokv1p(x)

not_nokv2p(x)

not_nokv3p(x)

ns(x)

ns0(x)

ns1(x)

ns2(x)

ns3(x)

ns1p(x)

ns2p(x)

ns3p(x)

not_ns0(x)

not_ns1(x)

not_ns2(x)

not_ns3(x)

not_ns1p(x)

not_ns2p(x)

not_ns3p(x)

...n(
  ...,
  n = NULL,
  min = NULL,
  max = NULL,
  eq = FALSE,
  a = FALSE,
  na = TRUE,
  vals = NULL,
  lt = NULL,
  le = NULL,
  ge = NULL,
  gt = NULL
)

...ns(
  ...,
  n = NULL,
  min = NULL,
  max = NULL,
  na = TRUE,
  vals = NULL,
  lt = NULL,
  le = NULL,
  ge = NULL,
  gt = NULL
)

...minn(
  ...,
  na = TRUE,
  vals = NULL,
  lt = NULL,
  le = NULL,
  ge = NULL,
  gt = NULL
)

...maxn(
  ...,
  na = TRUE,
  vals = NULL,
  lt = NULL,
  le = NULL,
  ge = NULL,
  gt = NULL
)

...neq(
  ...,
  min = NULL,
  max = NULL,
  na = TRUE,
  vals = NULL,
  lt = NULL,
  le = NULL,
  ge = NULL,
  gt = NULL
)

...nw(..., n = NULL, min = NULL, max = NULL, eq = FALSE, na = FALSE, a = TRUE)

...nt(..., n = NULL, min = NULL, max = NULL, eq = FALSE, na = FALSE, a = TRUE)

...nf(..., n = NULL, min = NULL, max = NULL, eq = FALSE, na = FALSE, a = TRUE)

...nu(..., n = NULL, min = NULL, max = NULL, eq = FALSE, na = TRUE, a = TRUE)

...nr(..., n = NULL, min = NULL, max = NULL, eq = FALSE)

...nc(..., n = NULL, min = NULL, max = NULL, eq = FALSE)

...n_ch(
  ...,
  n = NULL,
  min = NULL,
  max = NULL,
  eq = FALSE,
  na = FALSE,
  a = TRUE
)

...n_nav(..., n = NULL, min = NULL, max = NULL, eq = FALSE, a = TRUE)

...n_okv(..., n = NULL, min = NULL, max = NULL, eq = FALSE, a = TRUE)

...nv(..., n = NULL, min = NULL, max = NULL, eq = FALSE, a = TRUE)
}
\arguments{
\item{x}{\link[=Nnw]{non-negative whole-number} object.}

\item{n}{Optional \link[=cmp_nnw_vec]{complete non-negative whole-number vec} of valid element, row, or column counts.}

\item{min}{Optional complete non-negative whole-number scalar giving minimum valid element, row, or column counts.}

\item{max}{Optional complete non-negative whole-number scalar giving maximum valid element, row, or column counts.}

\item{eq}{Non-\code{NA} scalar indicating whether all counts must be equal.}

\item{...}{One or more arguments to be examined for counts.}

\item{a}{Non-\code{NA} scalar indicating whether to \link[=av]{atomize} \code{...} to create a single atomic vector before processing. If \code{a = FALSE}, each argument in \code{...} is processed separately.}

\item{na}{Non-\code{NA} scalar whether \code{NA} values are allowed.}

\item{vals}{Optional \link[=atm_vec]{atomic vec} indicating specific values to be counted.}

\item{lt}{Optional \link[=cmp_srt_scl]{complete sortable scalar} indicating specific values elements of \code{...} arguments must be less than in order to be counted.}

\item{le}{Optional complete sortable scalar indicating specific values elements of \code{...} arguments must be less than or equal to in order to be counted}

\item{ge}{Optional complete sortable scalar indicating specific values elements of \code{...} arguments must be greater than or equal to in order to be counted.}

\item{gt}{Optional complete sortable scalar indicating specific values elements of \code{...} arguments must be greater than in order to be counted.}
}
\value{
May be non-negative integer or a logical scalar or vector, depending the properties of primary argument(s) (i.e., \code{x} and \code{...}) and optional arguments (i.e., all others).
}
\description{
Dedicated counting functions
}
\details{
The following functions are flexible, fully error-checked counting functions with optional count functionality driven by arguments:
\tabular{ll}{  \code{n_check}   \tab Do counts given in \code{x} meet criteria in \code{c(n, min, max, eq)}, if any? If none, returns \code{x}. \cr   \tab   \cr
  \code{...n}      \tab Length(s) of \code{...} args with optional length validations.                                   \cr   \tab   \cr
  \code{...ns}     \tab Lengths of \code{...} args                                                                       \cr
  \code{...nv}     \tab Length after \link[=av]{atomizing}.                                                         \cr
  \code{...nch}    \tab Number of characters in each element.                                                       \cr
  \code{...nrc}    \tab \code{NROW(x) * NCOL(x)}                                                                         \cr
  \code{...nnav}   \tab Number of atomic \code{NA} values.                                                               \cr
  \code{...nokv}   \tab Number of atomic non-\code{NA} values.                                                           \cr
  \code{...neq}    \tab Are \code{...} arg lengths all the same?                                                         \cr
  \code{...ndif}   \tab Are \code{...} arg lengths \emph{not} all the same?                                                   \cr
  \code{...minn}   \tab Min \code{...} arg length.                                                                       \cr
  \code{...maxn}   \tab Max \code{...} arg length.                                                                         }
\strong{Functions evaluating length/count (in)equality}
\tabular{ll}{  \code{ndif}   \tab Lengths of \code{x} and \code{y} are equal.   \cr
  \code{neq}    \tab Lengths of \code{x} and \code{y} are different. }
\strong{Functions getting counts/lengths}
\tabular{ll}{  \code{N}             \tab \code{length(x)}                    \cr   \tab   \cr
  \verb{nd, ndots}     \tab \code{...length()}                               \cr
  \code{nc}            \tab \code{NCOL(x)}                                   \cr
  \code{nr}            \tab \code{NROW(x)}                                   \cr
  \code{ns}            \tab \code{lengths(x)}                                \cr
  \verb{nu, nunq}      \tab \code{length(unique(atoms(...)))}                \cr
  \verb{nv, nval}      \tab \code{length(atoms(...))}                        \cr
  \code{nw}            \tab \code{length(which(x))}             \cr   \tab   \cr
  \code{nrc}           \tab \code{NROW(x) * NCOL(x)}            \cr   \tab   \cr
  \code{nnav}          \tab \code{length(which(is.na(atoms(x))))}            \cr
  \code{nokv}          \tab \code{length(which(!is.na(atoms(x))))}           \cr
  \code{ndim}          \tab \code{f0(null(x), 0, f0(is_vec(x), 1, N(dim(x))))} }
\strong{Functions checking for specific counts/lengths}
\cr\cr The functions described in the previous table also have convenience functions for checking for specific counts/lengths and for negation. Those convenience functions are formed by appending the following to function names:
\tabular{ll}{  \code{'0'}    \tab \code{N = 0}  \cr
  \code{'1'}    \tab \code{N = 1}  \cr
  \code{'2'}    \tab \code{N = 2}  \cr
  \code{'1P'}   \tab \verb{N = 1+} \cr
  \code{'2P'}   \tab \verb{N = 2+} \cr
  \code{'3P'}   \tab \verb{N = 3+}   }
The negation functions are formed by prepending \code{not_}. All convenience functions are given in the following table:
\tabular{lllllll}{
  \strong{Base}     \tab \strong{\code{N = 0}}  \tab \strong{\code{N = 1}}  \tab \strong{\code{N = 2}}  \tab \strong{\verb{N ≥ 1}}   \tab \strong{\verb{N ≥ 2}}   \tab \strong{\verb{N ≥ 3}} \cr
  \code{n}          \tab \code{n0}         \tab \code{n1}         \tab \code{n2}         \tab \code{n1p}         \tab \code{n2p}         \tab \code{n3p}       \cr
  \code{nd}         \tab \code{nd0}        \tab \code{nd1}        \tab \code{nd2}        \tab \code{nd1p}        \tab \code{nd2p}        \tab \code{nd3p}      \cr
  \code{nc}         \tab \code{nc0}        \tab \code{nc1}        \tab \code{nc2}        \tab \code{nc1p}        \tab \code{nc2p}        \tab \code{nc3p}      \cr
  \code{nr}         \tab \code{nr0}        \tab \code{nr1}        \tab \code{nr2}        \tab \code{nr1p}        \tab \code{nr2p}        \tab \code{nr3p}      \cr
  \code{ns}         \tab \code{ns0}        \tab \code{ns1}        \tab \code{ns2}        \tab \code{ns1p}        \tab \code{ns2p}        \tab \code{ns3p}      \cr
  \code{nu}         \tab \code{nu0}        \tab \code{nu1}        \tab \code{nu2}        \tab \code{nu1p}        \tab \code{nu2p}        \tab \code{nu3p}      \cr
  \code{nv}         \tab \code{nv0}        \tab \code{nv1}        \tab \code{nv2}        \tab \code{nv1p}        \tab \code{nv2p}        \tab \code{nv3p}      \cr
  \code{nw}         \tab \code{nw0}        \tab \code{nw1}        \tab \code{nw2}        \tab \code{nw1p}        \tab \code{nw2p}        \tab \code{nw3p}      \cr
  \code{nrc}        \tab \code{nrc0}       \tab \code{nrc1}       \tab  —           \tab  —            \tab \code{nrc2p}       \tab  —          \cr
  \code{ndim}       \tab \code{ndim0}      \tab \code{ndim1}      \tab \code{ndim2}      \tab \code{ndim1p}      \tab \code{ndim2p}      \tab \code{ndim3p}    \cr
               \tab              \tab              \tab              \tab               \tab               \tab             \cr
  \strong{Base}     \tab \strong{\verb{N ≠ 0}}  \tab \strong{\verb{N ≠ 1}}  \tab \strong{\verb{N ≠ 2}}  \tab \strong{\code{N < 1}}   \tab \strong{\code{N < 2}}   \tab \strong{\code{N < 3}} \cr
  \code{not_n}      \tab \code{not_n0}     \tab \code{not_n1}     \tab \code{not_n2}     \tab \code{not_n1p}     \tab \code{not_n2p}     \tab \code{not_n3p}   \cr
  \code{not_nd}     \tab \code{not_nd0}    \tab \code{not_nd1}    \tab \code{not_nd2}    \tab \code{not_nd1p}    \tab \code{not_nd2p}    \tab \code{not_nd3p}  \cr
  \code{not_nc}     \tab \code{not_nc0}    \tab \code{not_nc1}    \tab \code{not_nc2}    \tab \code{not_nc1p}    \tab \code{not_nc2p}    \tab \code{not_nc3p}  \cr
  \code{not_nr}     \tab \code{not_nr0}    \tab \code{not_nr1}    \tab \code{not_nr2}    \tab \code{not_nr1p}    \tab \code{not_nr2p}    \tab \code{not_nr3p}  \cr
  \code{not_ns}     \tab \code{not_ns0}    \tab \code{not_ns1}    \tab \code{not_ns2}    \tab \code{not_ns1p}    \tab \code{not_ns2p}    \tab \code{not_ns3p}  \cr
  \code{not_nu}     \tab \code{not_nu0}    \tab \code{not_nu1}    \tab \code{not_nu2}    \tab \code{not_nu1p}    \tab \code{not_nu2p}    \tab \code{not_nu3p}  \cr
  \code{not_nv}     \tab \code{not_nv0}    \tab \code{not_nv1}    \tab \code{not_nv2}    \tab \code{not_nv1p}    \tab \code{not_nv2p}    \tab \code{not_nv3p}  \cr
  \code{not_nw}     \tab \code{not_nw0}    \tab \code{not_nw1}    \tab \code{not_nw2}    \tab \code{not_nw1p}    \tab \code{not_nw2p}    \tab \code{not_nw3p}  \cr
  \code{not_nrc}    \tab \code{not_nrc0}   \tab \code{not_nrc1}   \tab  —           \tab  —            \tab \code{not_nrc2p}   \tab  —          \cr
  \code{not_ndim}   \tab \code{not_ndim0}  \tab \code{not_ndim1}  \tab \code{not_ndim2}  \tab \code{not_ndim1p}  \tab \code{not_ndim2p}  \tab \code{not_ndim3p}  }
\tabular{lllllll}{
                 \tab \strong{\code{nc = 0}}    \tab \strong{\code{nc = 1}}    \tab \strong{\code{nc = 2}}    \tab \strong{\verb{nc ≥ 1}}     \tab \strong{\verb{nc ≥ 2}}     \tab \strong{\verb{nc ≥ 3}}    \cr
  \strong{\code{nr = 0}}   \tab \code{nr0_nc0}       \tab \code{nr0_nc1}       \tab \code{nr0_nc2}       \tab \code{nr0_nc1p}       \tab \code{nr0_nc2p}       \tab \code{nr0_nc3p}      \cr
  \strong{\code{nr = 1}}   \tab \code{nr1_nc0}       \tab \code{nr1_nc1}       \tab \code{nr1_nc2}       \tab \code{nr1_nc1p}       \tab \code{nr1_nc2p}       \tab \code{nr1_nc3p}      \cr
  \strong{\code{nr = 2}}   \tab \code{nr2_nc0}       \tab \code{nr2_nc1}       \tab \code{nr2_nc2}       \tab \code{nr2_nc1p}       \tab \code{nr2_nc2p}       \tab \code{nr2_nc3p}      \cr
  \strong{\verb{nr ≥ 1}}   \tab \code{nr1_pnc0}      \tab \code{nr1p_nc1}      \tab \code{nr1p_nc2}      \tab \code{nr1p_nc1p}      \tab \code{nr1p_nc2p}      \tab \code{nr1p_nc3p}     \cr
  \strong{\verb{nr ≥ 2}}   \tab \code{nr2p_nc0}      \tab \code{nr2p_nc1}      \tab \code{nr2p_nc2}      \tab \code{nr2p_nc1p}      \tab \code{nr2p_nc2p}      \tab \code{nr2p_nc3p}     \cr
  \strong{\verb{nr ≥ 3}}   \tab \code{nr3p_nc0}      \tab \code{nr3p_nc1}      \tab \code{nr3p_nc2}      \tab \code{nr3p_nc1p}      \tab \code{nr3p_nc2p}      \tab \code{nr3p_nc3p}     \cr
                 \tab                 \tab                 \tab                 \tab                  \tab                  \tab                 \cr
                 \tab \strong{\verb{nc ≠ 0}}    \tab \strong{\verb{nc ≠ 1}}    \tab \strong{\verb{nc ≠ 2}}    \tab \strong{\code{nc < 1}}     \tab \strong{\code{nc < 2}}     \tab \strong{\code{nc < 3}}    \cr
  \strong{\verb{nr ≠ 0}}   \tab \code{not_nr0_nc0}   \tab \code{not_nr0_nc1}   \tab \code{not_nr0_nc2}   \tab \code{not_nr0_nc1p}   \tab \code{not_nr0_nc2p}   \tab \code{not_nr0_nc3p}  \cr
  \strong{\verb{nr ≠ 1}}   \tab \code{not_nr1_nc0}   \tab \code{not_nr1_nc1}   \tab \code{not_nr1_nc2}   \tab \code{not_nr1_nc1p}   \tab \code{not_nr1_nc2p}   \tab \code{not_nr1_nc3p}  \cr
  \strong{\verb{nr ≠ 2}}   \tab \code{not_nr2_nc0}   \tab \code{not_nr2_nc1}   \tab \code{not_nr2_nc2}   \tab \code{not_nr2_nc1p}   \tab \code{not_nr2_nc2p}   \tab \code{not_nr2_nc3p}  \cr
  \strong{\code{nr < 1}}   \tab \code{not_nr1p_nc0}  \tab \code{not_nr1p_nc1}  \tab \code{not_nr1p_nc2}  \tab \code{not_nr1p_nc1p}  \tab \code{not_nr1p_nc2p}  \tab \code{not_nr1p_nc3p} \cr
  \strong{\code{nr < 2}}   \tab \code{not_nr2p_nc0}  \tab \code{not_nr2p_nc1}  \tab \code{not_nr2p_nc2}  \tab \code{not_nr2p_nc1p}  \tab \code{not_nr2p_nc2p}  \tab \code{not_nr2p_nc3p} \cr
  \strong{\code{nr < 3}}   \tab \code{not_nr3p_nc0}  \tab \code{not_nr3p_nc1}  \tab \code{not_nr3p_nc2}  \tab \code{not_nr3p_nc1p}  \tab \code{not_nr3p_nc2p}  \tab \code{not_nr3p_nc3p}   }
}
\examples{
N <- 0:15
nis(N, n = 0:5)
nis(N, min = 3, max = 12)
nis(N, eq = T)
nis(rep(0, 3), eq = T)
nx(letters, LETTERS, 0:9, NULL)
nx(letters, LETTERS, vals = letters)
nx(letters, LETTERS, le = "M", ge = "m")
nx(letters, LETTERS, lt = "M", gt = "m")
n0(letters, LETTERS, TRUE, 0:1, 0:2, 0:9)
n1(letters, LETTERS, TRUE, 0:1, 0:2, 0:9)
n1p(letters, LETTERS, TRUE, 0:1, 0:2, 0:9)
n2p(letters, LETTERS, TRUE, 0:1, 0:2, 0:9)
nmin(letters, LETTERS, 0:9)
nmax(letters, LETTERS, 0:9)
nsame(letters, LETTERS, 0:9)
nsame(letters, LETTERS)
nsame(letters, LETTERS, lt = "M", gt = "m")
nmin(letters, LETTERS, 0:9, min = 11)
nmax(letters, LETTERS, 0:9, max = 11)
nsame(letters, LETTERS, 0:9, min = 11, max = 25)
nw(0:99 \%in\% 50:59, 0:99 \%in\% 41:49)
nt(0:99 \%in\% 50:59, 0:99 \%in\% 41:49)
nw(0:99 \%in\% 50:59, 0:99 \%in\% 41:49, n = 0:9)
nw(0:99 \%in\% 50:59, 0:99 \%in\% 41:49, min = 9, max = 19, eq = T)
nf(0:99 \%in\% 50:59, 0:99 \%in\% 41:49)
nf(0:99 \%in\% 50:59, 0:99 \%in\% 41:49, n = 0:9)
nf(0:99 \%in\% 50:59, 0:99 \%in\% 41:49, min = 9, max = 19)
nf(0:99 \%in\% 50:59, 0:99 \%in\% 41:49, min = 9, max = 19, eq = T)
nr(tibble(letters, LETTERS), matrix(c(letters, LETTERS), nrow = 2))
nc(tibble(letters, LETTERS), matrix(c(letters, LETTERS), nrow = 2))
nch(letters, eq = T)
nch(letters, "a string")
nch(letters, "a string", a = T)
}
\seealso{
Other extensions: 
\code{\link{atomize}()},
\code{\link{case}()},
\code{\link{cb}()},
\code{\link{comparable}()},
\code{\link{compatible}()},
\code{\link{declare}},
\code{\link{dups}()},
\code{\link{failsafe}()},
\code{\link{fork}()},
\code{\link{is_unique}()},
\code{\link{naming}},
\code{\link{na}()},
\code{\link{paths}},
\code{\link{purge}()},
\code{\link{rd}()},
\code{\link{r}()},
\code{\link{sets}()},
\code{\link{sum0}()},
\code{\link{swap}()},
\code{\link{value_exists}()}

Other counts: 
\code{\link{maxnch}()},
\code{\link{meets}()}
}
\concept{counts}
\concept{dots}
\concept{extensions}
