% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mmm_ccc.R
\encoding{UTF-8}
\name{mmm_ccc_PROPS}
\alias{mmm_ccc_PROPS}
\alias{mmm_ccc}
\alias{mmm_ccc_funs}
\alias{ch1_arr}
\alias{ch1_dtf}
\alias{ch1_gen}
\alias{ch1_mat}
\alias{ch1_mvc}
\alias{ch1_scl}
\alias{ch1_vec}
\alias{ch1_vls}
\alias{ch3_arr}
\alias{ch3_dtf}
\alias{ch3_gen}
\alias{ch3_mat}
\alias{ch3_mvc}
\alias{ch3_scl}
\alias{ch3_vec}
\alias{ch3_vls}
\alias{chr_arr}
\alias{chr_dtf}
\alias{chr_gen}
\alias{chr_mat}
\alias{chr_mvc}
\alias{chr_scl}
\alias{chr_vec}
\alias{chr_vls}
\alias{clr_arr}
\alias{clr_dtf}
\alias{clr_gen}
\alias{clr_mat}
\alias{clr_mvc}
\alias{clr_scl}
\alias{clr_vec}
\alias{clr_vls}
\alias{evn_arr}
\alias{evn_dtf}
\alias{evn_gen}
\alias{evn_mat}
\alias{evn_mvc}
\alias{evn_scl}
\alias{evn_vec}
\alias{evn_vls}
\alias{fac_arr}
\alias{fac_dtf}
\alias{fac_gen}
\alias{fac_mat}
\alias{fac_mvc}
\alias{fac_scl}
\alias{fac_vec}
\alias{fac_vls}
\alias{frc_arr}
\alias{frc_dtf}
\alias{frc_gen}
\alias{frc_mat}
\alias{frc_mvc}
\alias{frc_scl}
\alias{frc_vec}
\alias{frc_vls}
\alias{ind_arr}
\alias{ind_dtf}
\alias{ind_gen}
\alias{ind_mat}
\alias{ind_mvc}
\alias{ind_scl}
\alias{ind_vec}
\alias{ind_vls}
\alias{lgl_arr}
\alias{lgl_dtf}
\alias{lgl_gen}
\alias{lgl_mat}
\alias{lgl_mvc}
\alias{lgl_scl}
\alias{lgl_vec}
\alias{lgl_vls}
\alias{neg_arr}
\alias{neg_dtf}
\alias{neg_gen}
\alias{neg_mat}
\alias{neg_mvc}
\alias{neg_scl}
\alias{neg_vec}
\alias{neg_vls}
\alias{ngw_arr}
\alias{ngw_dtf}
\alias{ngw_gen}
\alias{ngw_mat}
\alias{ngw_mvc}
\alias{ngw_scl}
\alias{ngw_vec}
\alias{ngw_vls}
\alias{nng_arr}
\alias{nng_dtf}
\alias{nng_gen}
\alias{nng_mat}
\alias{nng_mvc}
\alias{nng_scl}
\alias{nng_vec}
\alias{nng_vls}
\alias{nnw_arr}
\alias{nnw_dtf}
\alias{nnw_gen}
\alias{nnw_mat}
\alias{nnw_mvc}
\alias{nnw_scl}
\alias{nnw_vec}
\alias{nnw_vls}
\alias{nps_arr}
\alias{nps_dtf}
\alias{nps_gen}
\alias{nps_mat}
\alias{nps_mvc}
\alias{nps_scl}
\alias{nps_vec}
\alias{nps_vls}
\alias{npw_arr}
\alias{npw_dtf}
\alias{npw_gen}
\alias{npw_mat}
\alias{npw_mvc}
\alias{npw_scl}
\alias{npw_vec}
\alias{npw_vls}
\alias{nst_arr}
\alias{nst_dtf}
\alias{nst_gen}
\alias{nst_mat}
\alias{nst_mvc}
\alias{nst_scl}
\alias{nst_vec}
\alias{nst_vls}
\alias{num_arr}
\alias{num_dtf}
\alias{num_gen}
\alias{num_mat}
\alias{num_mvc}
\alias{num_scl}
\alias{num_vec}
\alias{num_vls}
\alias{odd_arr}
\alias{odd_dtf}
\alias{odd_gen}
\alias{odd_mat}
\alias{odd_mvc}
\alias{odd_scl}
\alias{odd_vec}
\alias{odd_vls}
\alias{ord_arr}
\alias{ord_dtf}
\alias{ord_gen}
\alias{ord_mat}
\alias{ord_mvc}
\alias{ord_scl}
\alias{ord_vec}
\alias{ord_vls}
\alias{pct_arr}
\alias{pct_dtf}
\alias{pct_gen}
\alias{pct_mat}
\alias{pct_mvc}
\alias{pct_scl}
\alias{pct_vec}
\alias{pct_vls}
\alias{pos_arr}
\alias{pos_dtf}
\alias{pos_gen}
\alias{pos_mat}
\alias{pos_mvc}
\alias{pos_scl}
\alias{pos_vec}
\alias{pos_vls}
\alias{ppn_arr}
\alias{ppn_dtf}
\alias{ppn_gen}
\alias{ppn_mat}
\alias{ppn_mvc}
\alias{ppn_scl}
\alias{ppn_vec}
\alias{ppn_vls}
\alias{psw_arr}
\alias{psw_dtf}
\alias{psw_gen}
\alias{psw_mat}
\alias{psw_mvc}
\alias{psw_scl}
\alias{psw_vec}
\alias{psw_vls}
\alias{srt_arr}
\alias{srt_dtf}
\alias{srt_gen}
\alias{srt_mat}
\alias{srt_mvc}
\alias{srt_scl}
\alias{srt_vec}
\alias{srt_vls}
\alias{str_arr}
\alias{str_dtf}
\alias{str_gen}
\alias{str_mat}
\alias{str_mvc}
\alias{str_scl}
\alias{str_vec}
\alias{str_vls}
\alias{uno_arr}
\alias{uno_dtf}
\alias{uno_gen}
\alias{uno_mat}
\alias{uno_mvc}
\alias{uno_scl}
\alias{uno_vec}
\alias{uno_vls}
\alias{whl_arr}
\alias{whl_dtf}
\alias{whl_gen}
\alias{whl_mat}
\alias{whl_mvc}
\alias{whl_scl}
\alias{whl_vec}
\alias{whl_vls}
\title{Combo Extended Mode Plus Extended Class Combination Properties}
\usage{
mmm_ccc_PROPS()

mmm_ccc(x, mmm, ccc, ...)

mmm_ccc_funs()

ch1_arr(x, ...)

ch1_dtf(x, ...)

ch1_gen(x, ...)

ch1_mat(x, ...)

ch1_mvc(x, ...)

ch1_scl(x, ...)

ch1_vec(x, ...)

ch1_vls(x, ...)

ch3_arr(x, ...)

ch3_dtf(x, ...)

ch3_gen(x, ...)

ch3_mat(x, ...)

ch3_mvc(x, ...)

ch3_scl(x, ...)

ch3_vec(x, ...)

ch3_vls(x, ...)

chr_arr(x, ...)

chr_dtf(x, ...)

chr_gen(x, ...)

chr_mat(x, ...)

chr_mvc(x, ...)

chr_scl(x, ...)

chr_vec(x, ...)

chr_vls(x, ...)

clr_arr(x, ...)

clr_dtf(x, ...)

clr_gen(x, ...)

clr_mat(x, ...)

clr_mvc(x, ...)

clr_scl(x, ...)

clr_vec(x, ...)

clr_vls(x, ...)

evn_arr(x, ...)

evn_dtf(x, ...)

evn_gen(x, ...)

evn_mat(x, ...)

evn_mvc(x, ...)

evn_scl(x, ...)

evn_vec(x, ...)

evn_vls(x, ...)

fac_arr(x, ...)

fac_dtf(x, ...)

fac_gen(x, ...)

fac_mat(x, ...)

fac_mvc(x, ...)

fac_scl(x, ...)

fac_vec(x, ...)

fac_vls(x, ...)

frc_arr(x, ...)

frc_dtf(x, ...)

frc_gen(x, ...)

frc_mat(x, ...)

frc_mvc(x, ...)

frc_scl(x, ...)

frc_vec(x, ...)

frc_vls(x, ...)

ind_arr(x, ...)

ind_dtf(x, ...)

ind_gen(x, ...)

ind_mat(x, ...)

ind_mvc(x, ...)

ind_scl(x, ...)

ind_vec(x, ...)

ind_vls(x, ...)

lgl_arr(x, ...)

lgl_dtf(x, ...)

lgl_gen(x, ...)

lgl_mat(x, ...)

lgl_mvc(x, ...)

lgl_scl(x, ...)

lgl_vec(x, ...)

lgl_vls(x, ...)

neg_arr(x, ...)

neg_dtf(x, ...)

neg_gen(x, ...)

neg_mat(x, ...)

neg_mvc(x, ...)

neg_scl(x, ...)

neg_vec(x, ...)

neg_vls(x, ...)

ngw_arr(x, ...)

ngw_dtf(x, ...)

ngw_gen(x, ...)

ngw_mat(x, ...)

ngw_mvc(x, ...)

ngw_scl(x, ...)

ngw_vec(x, ...)

ngw_vls(x, ...)

nng_arr(x, ...)

nng_dtf(x, ...)

nng_gen(x, ...)

nng_mat(x, ...)

nng_mvc(x, ...)

nng_scl(x, ...)

nng_vec(x, ...)

nng_vls(x, ...)

nnw_arr(x, ...)

nnw_dtf(x, ...)

nnw_gen(x, ...)

nnw_mat(x, ...)

nnw_mvc(x, ...)

nnw_scl(x, ...)

nnw_vec(x, ...)

nnw_vls(x, ...)

nps_arr(x, ...)

nps_dtf(x, ...)

nps_gen(x, ...)

nps_mat(x, ...)

nps_mvc(x, ...)

nps_scl(x, ...)

nps_vec(x, ...)

nps_vls(x, ...)

npw_arr(x, ...)

npw_dtf(x, ...)

npw_gen(x, ...)

npw_mat(x, ...)

npw_mvc(x, ...)

npw_scl(x, ...)

npw_vec(x, ...)

npw_vls(x, ...)

nst_arr(x, ...)

nst_dtf(x, ...)

nst_gen(x, ...)

nst_mat(x, ...)

nst_mvc(x, ...)

nst_scl(x, ...)

nst_vec(x, ...)

nst_vls(x, ...)

num_arr(x, ...)

num_dtf(x, ...)

num_gen(x, ...)

num_mat(x, ...)

num_mvc(x, ...)

num_scl(x, ...)

num_vec(x, ...)

num_vls(x, ...)

odd_arr(x, ...)

odd_dtf(x, ...)

odd_gen(x, ...)

odd_mat(x, ...)

odd_mvc(x, ...)

odd_scl(x, ...)

odd_vec(x, ...)

odd_vls(x, ...)

ord_arr(x, ...)

ord_dtf(x, ...)

ord_gen(x, ...)

ord_mat(x, ...)

ord_mvc(x, ...)

ord_scl(x, ...)

ord_vec(x, ...)

ord_vls(x, ...)

pct_arr(x, ...)

pct_dtf(x, ...)

pct_gen(x, ...)

pct_mat(x, ...)

pct_mvc(x, ...)

pct_scl(x, ...)

pct_vec(x, ...)

pct_vls(x, ...)

pos_arr(x, ...)

pos_dtf(x, ...)

pos_gen(x, ...)

pos_mat(x, ...)

pos_mvc(x, ...)

pos_scl(x, ...)

pos_vec(x, ...)

pos_vls(x, ...)

ppn_arr(x, ...)

ppn_dtf(x, ...)

ppn_gen(x, ...)

ppn_mat(x, ...)

ppn_mvc(x, ...)

ppn_scl(x, ...)

ppn_vec(x, ...)

ppn_vls(x, ...)

psw_arr(x, ...)

psw_dtf(x, ...)

psw_gen(x, ...)

psw_mat(x, ...)

psw_mvc(x, ...)

psw_scl(x, ...)

psw_vec(x, ...)

psw_vls(x, ...)

srt_arr(x, ...)

srt_dtf(x, ...)

srt_gen(x, ...)

srt_mat(x, ...)

srt_mvc(x, ...)

srt_scl(x, ...)

srt_vec(x, ...)

srt_vls(x, ...)

str_arr(x, ...)

str_dtf(x, ...)

str_gen(x, ...)

str_mat(x, ...)

str_mvc(x, ...)

str_scl(x, ...)

str_vec(x, ...)

str_vls(x, ...)

uno_arr(x, ...)

uno_dtf(x, ...)

uno_gen(x, ...)

uno_mat(x, ...)

uno_mvc(x, ...)

uno_scl(x, ...)

uno_vec(x, ...)

uno_vls(x, ...)

whl_arr(x, ...)

whl_dtf(x, ...)

whl_gen(x, ...)

whl_mat(x, ...)

whl_mvc(x, ...)

whl_scl(x, ...)

whl_vec(x, ...)

whl_vls(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{mmm}{A character scalar single extended mode property from \code{\link{mmm_props}()}.}

\item{ccc}{A character scalar single extended class property from \code{\link{ccc_props}()}.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\description{
Combo extended mode plus extended class combination properties are the combination of a single \link[=mmm]{extended mode} property, and a single \link[=ccc]{extended class} property.
}
\section{Functions}{
\itemize{
\item \code{mmm_ccc()}: Checks \code{x} for extended mode \code{mmm} and for extended class \code{ccc} subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{mmm_ccc_funs()}: Lists all combo extended mode plus extended class property checking functions. Returns a character vector.

\item \code{ch1_arr()}: Checks \code{x} for onechar-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch1_dtf()}: Checks \code{x} for onechar-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch1_gen()}: Checks \code{x} for onechar-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch1_mat()}: Checks \code{x} for onechar-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch1_mvc()}: Checks \code{x} for onechar-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch1_scl()}: Checks \code{x} for onechar-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch1_vec()}: Checks \code{x} for onechar-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch1_vls()}: Checks \code{x} for onechar-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch3_arr()}: Checks \code{x} for threechar-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch3_dtf()}: Checks \code{x} for threechar-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch3_gen()}: Checks \code{x} for threechar-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch3_mat()}: Checks \code{x} for threechar-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch3_mvc()}: Checks \code{x} for threechar-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch3_scl()}: Checks \code{x} for threechar-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch3_vec()}: Checks \code{x} for threechar-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ch3_vls()}: Checks \code{x} for threechar-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{chr_arr()}: Checks \code{x} for character-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{chr_dtf()}: Checks \code{x} for character-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{chr_gen()}: Checks \code{x} for character-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{chr_mat()}: Checks \code{x} for character-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{chr_mvc()}: Checks \code{x} for character-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{chr_scl()}: Checks \code{x} for character-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{chr_vec()}: Checks \code{x} for character-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{chr_vls()}: Checks \code{x} for character-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{clr_arr()}: Checks \code{x} for color-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{clr_dtf()}: Checks \code{x} for color-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{clr_gen()}: Checks \code{x} for color-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{clr_mat()}: Checks \code{x} for color-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{clr_mvc()}: Checks \code{x} for color-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{clr_scl()}: Checks \code{x} for color-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{clr_vec()}: Checks \code{x} for color-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{clr_vls()}: Checks \code{x} for color-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{evn_arr()}: Checks \code{x} for even-whole-number-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{evn_dtf()}: Checks \code{x} for even-whole-number-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{evn_gen()}: Checks \code{x} for even-whole-number-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{evn_mat()}: Checks \code{x} for even-whole-number-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{evn_mvc()}: Checks \code{x} for even-whole-number-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{evn_scl()}: Checks \code{x} for even-whole-number-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{evn_vec()}: Checks \code{x} for even-whole-number-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{evn_vls()}: Checks \code{x} for even-whole-number-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{fac_arr()}: Checks \code{x} for factor-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{fac_dtf()}: Checks \code{x} for factor-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{fac_gen()}: Checks \code{x} for factor-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{fac_mat()}: Checks \code{x} for factor-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{fac_mvc()}: Checks \code{x} for factor-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{fac_scl()}: Checks \code{x} for factor-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{fac_vec()}: Checks \code{x} for factor-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{fac_vls()}: Checks \code{x} for factor-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{frc_arr()}: Checks \code{x} for fractional-numeric-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{frc_dtf()}: Checks \code{x} for fractional-numeric-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{frc_gen()}: Checks \code{x} for fractional-numeric-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{frc_mat()}: Checks \code{x} for fractional-numeric-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{frc_mvc()}: Checks \code{x} for fractional-numeric-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{frc_scl()}: Checks \code{x} for fractional-numeric-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{frc_vec()}: Checks \code{x} for fractional-numeric-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{frc_vls()}: Checks \code{x} for fractional-numeric-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ind_arr()}: Checks \code{x} for indexer-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ind_dtf()}: Checks \code{x} for indexer-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ind_gen()}: Checks \code{x} for indexer-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ind_mat()}: Checks \code{x} for indexer-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ind_mvc()}: Checks \code{x} for indexer-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ind_scl()}: Checks \code{x} for indexer-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ind_vec()}: Checks \code{x} for indexer-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ind_vls()}: Checks \code{x} for indexer-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{lgl_arr()}: Checks \code{x} for logical-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{lgl_dtf()}: Checks \code{x} for -logicalness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{lgl_gen()}: Checks \code{x} for logical-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{lgl_mat()}: Checks \code{x} for logical-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{lgl_mvc()}: Checks \code{x} for logical-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{lgl_scl()}: Checks \code{x} for logical-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{lgl_vec()}: Checks \code{x} for logical-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{lgl_vls()}: Checks \code{x} for logical-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{neg_arr()}: Checks \code{x} for negative-numeric-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{neg_dtf()}: Checks \code{x} for negative-numeric-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{neg_gen()}: Checks \code{x} for negative-numeric-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{neg_mat()}: Checks \code{x} for negative-numeric-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{neg_mvc()}: Checks \code{x} for negative-numeric-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{neg_scl()}: Checks \code{x} for negative-numeric-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{neg_vec()}: Checks \code{x} for negative-numeric-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{neg_vls()}: Checks \code{x} for negative-numeric-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ngw_arr()}: Checks \code{x} for negative-whole-number-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ngw_dtf()}: Checks \code{x} for negative-whole-number-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ngw_gen()}: Checks \code{x} for negative-whole-number-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ngw_mat()}: Checks \code{x} for negative-whole-number-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ngw_mvc()}: Checks \code{x} for negative-whole-number-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ngw_scl()}: Checks \code{x} for negative-whole-number-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ngw_vec()}: Checks \code{x} for negative-whole-number-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ngw_vls()}: Checks \code{x} for negative-whole-number-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nng_arr()}: Checks \code{x} for non-negative-numeric-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nng_dtf()}: Checks \code{x} for non-negative-numeric-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nng_gen()}: Checks \code{x} for non-negative-numeric-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nng_mat()}: Checks \code{x} for non-negative-numeric-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nng_mvc()}: Checks \code{x} for non-negative-numeric-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nng_scl()}: Checks \code{x} for non-negative-numeric-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nng_vec()}: Checks \code{x} for non-negative-numeric-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nng_vls()}: Checks \code{x} for non-negative-numeric-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nnw_arr()}: Checks \code{x} for non-negative-whole-number-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nnw_dtf()}: Checks \code{x} for non-negative-whole-number-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nnw_gen()}: Checks \code{x} for non-negative-whole-number-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nnw_mat()}: Checks \code{x} for non-negative-whole-number-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nnw_mvc()}: Checks \code{x} for non-negative-whole-number-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nnw_scl()}: Checks \code{x} for non-negative-whole-number-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nnw_vec()}: Checks \code{x} for non-negative-whole-number-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nnw_vls()}: Checks \code{x} for non-negative-whole-number-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nps_arr()}: Checks \code{x} for non-positive-numeric-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nps_dtf()}: Checks \code{x} for non-positive-numeric-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nps_gen()}: Checks \code{x} for non-positive-numeric-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nps_mat()}: Checks \code{x} for non-positive-numeric-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nps_mvc()}: Checks \code{x} for non-positive-numeric-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nps_scl()}: Checks \code{x} for non-positive-numeric-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nps_vec()}: Checks \code{x} for non-positive-numeric-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nps_vls()}: Checks \code{x} for non-positive-numeric-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{npw_arr()}: Checks \code{x} for non-positive-whole-number-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{npw_dtf()}: Checks \code{x} for non-positive-whole-number-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{npw_gen()}: Checks \code{x} for non-positive-whole-number-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{npw_mat()}: Checks \code{x} for non-positive-whole-number-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{npw_mvc()}: Checks \code{x} for non-positive-whole-number-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{npw_scl()}: Checks \code{x} for non-positive-whole-number-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{npw_vec()}: Checks \code{x} for non-positive-whole-number-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{npw_vls()}: Checks \code{x} for non-positive-whole-number-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nst_arr()}: Checks \code{x} for nonsortable-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nst_dtf()}: Checks \code{x} for nonsortable-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nst_gen()}: Checks \code{x} for nonsortable-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nst_mat()}: Checks \code{x} for nonsortable-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nst_mvc()}: Checks \code{x} for nonsortable-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nst_scl()}: Checks \code{x} for nonsortable-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nst_vec()}: Checks \code{x} for nonsortable-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{nst_vls()}: Checks \code{x} for nonsortable-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{num_arr()}: Checks \code{x} for numeric-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{num_dtf()}: Checks \code{x} for numeric-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{num_gen()}: Checks \code{x} for numeric-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{num_mat()}: Checks \code{x} for numeric-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{num_mvc()}: Checks \code{x} for numeric-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{num_scl()}: Checks \code{x} for numeric-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{num_vec()}: Checks \code{x} for numeric-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{num_vls()}: Checks \code{x} for numeric-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{odd_arr()}: Checks \code{x} for odd-whole-number-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{odd_dtf()}: Checks \code{x} for odd-whole-number-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{odd_gen()}: Checks \code{x} for odd-whole-number-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{odd_mat()}: Checks \code{x} for odd-whole-number-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{odd_mvc()}: Checks \code{x} for odd-whole-number-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{odd_scl()}: Checks \code{x} for odd-whole-number-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{odd_vec()}: Checks \code{x} for odd-whole-number-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{odd_vls()}: Checks \code{x} for odd-whole-number-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ord_arr()}: Checks \code{x} for ordered-factor-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ord_dtf()}: Checks \code{x} for ordered-factor-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ord_gen()}: Checks \code{x} for ordered-factor-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ord_mat()}: Checks \code{x} for ordered-factor-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ord_mvc()}: Checks \code{x} for ordered-factor-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ord_scl()}: Checks \code{x} for ordered-factor-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ord_vec()}: Checks \code{x} for -ordered-factorness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ord_vls()}: Checks \code{x} for ordered-factor-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pct_arr()}: Checks \code{x} for percent-valued-numeric-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pct_dtf()}: Checks \code{x} for percent-valued-numeric-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pct_gen()}: Checks \code{x} for percent-valued-numeric-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pct_mat()}: Checks \code{x} for percent-valued-numeric-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pct_mvc()}: Checks \code{x} for percent-valued-numeric-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pct_scl()}: Checks \code{x} for percent-valued-numeric-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pct_vec()}: Checks \code{x} for percent-valued-numeric-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pct_vls()}: Checks \code{x} for percent-valued-numeric-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pos_arr()}: Checks \code{x} for positive-numeric-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pos_dtf()}: Checks \code{x} for positive-numeric-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pos_gen()}: Checks \code{x} for positive-numeric-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pos_mat()}: Checks \code{x} for positive-numeric-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pos_mvc()}: Checks \code{x} for positive-numeric-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pos_scl()}: Checks \code{x} for positive-numeric-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pos_vec()}: Checks \code{x} for positive-numeric-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{pos_vls()}: Checks \code{x} for positive-numeric-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ppn_arr()}: Checks \code{x} for proportion-valued-numeric-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ppn_dtf()}: Checks \code{x} for proportion-valued-numeric-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ppn_gen()}: Checks \code{x} for proportion-valued-numeric-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ppn_mat()}: Checks \code{x} for proportion-valued-numeric-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ppn_mvc()}: Checks \code{x} for proportion-valued-numeric-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ppn_scl()}: Checks \code{x} for proportion-valued-numeric-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ppn_vec()}: Checks \code{x} for proportion-valued-numeric-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{ppn_vls()}: Checks \code{x} for proportion-valued-numeric-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{psw_arr()}: Checks \code{x} for positive-whole-number-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{psw_dtf()}: Checks \code{x} for positive-whole-number-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{psw_gen()}: Checks \code{x} for positive-whole-number-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{psw_mat()}: Checks \code{x} for positive-whole-number-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{psw_mvc()}: Checks \code{x} for positive-whole-number-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{psw_scl()}: Checks \code{x} for positive-whole-number-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{psw_vec()}: Checks \code{x} for positive-whole-number-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{psw_vls()}: Checks \code{x} for positive-whole-number-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{srt_arr()}: Checks \code{x} for sortable-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{srt_dtf()}: Checks \code{x} for sortable-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{srt_gen()}: Checks \code{x} for sortable-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{srt_mat()}: Checks \code{x} for sortable-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{srt_mvc()}: Checks \code{x} for sortable-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{srt_scl()}: Checks \code{x} for sortable-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{srt_vec()}: Checks \code{x} for sortable-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{srt_vls()}: Checks \code{x} for sortable-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{str_arr()}: Checks \code{x} for string-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{str_dtf()}: Checks \code{x} for string-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{str_gen()}: Checks \code{x} for string-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{str_mat()}: Checks \code{x} for string-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{str_mvc()}: Checks \code{x} for string-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{str_scl()}: Checks \code{x} for string-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{str_vec()}: Checks \code{x} for string-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{str_vls()}: Checks \code{x} for string-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{uno_arr()}: Checks \code{x} for unordered-factor-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{uno_dtf()}: Checks \code{x} for unordered-factor-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{uno_gen()}: Checks \code{x} for unordered-factor-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{uno_mat()}: Checks \code{x} for unordered-factor-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{uno_mvc()}: Checks \code{x} for unordered-factor-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{uno_scl()}: Checks \code{x} for unordered-factor-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{uno_vec()}: Checks \code{x} for unordered-factor-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{uno_vls()}: Checks \code{x} for unordered-factor-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{whl_arr()}: Checks \code{x} for whole-number-ness and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{whl_dtf()}: Checks \code{x} for whole-number-ness and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{whl_gen()}: Checks \code{x} for whole-number-ness and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{whl_mat()}: Checks \code{x} for whole-number-ness and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{whl_mvc()}: Checks \code{x} for whole-number-ness and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{whl_scl()}: Checks \code{x} for whole-number-ness and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{whl_vec()}: Checks \code{x} for whole-number-ness and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{whl_vls()}: Checks \code{x} for whole-number-ness and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

}}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{ll}{  \verb{.max, .maxr, .maxc}   \tab Scalar maximum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.min, .minr, .minc}   \tab Scalar minimum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.lt, .le, .ge, .gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively. \cr   \tab   \cr
  \verb{.n, .nr, .nc}         \tab A vector of valid numbers of elements, rows, and columns, respectively.                                                                    \cr   \tab   \cr
  \code{.vals}                \tab A vector of valid values.                                                                                                                                 }
}

\examples{
mmm_ccc_funs()
mmm_ccc(letters, "ch1", "vec")
mmm_ccc(letters, "str", "scl")
ch1_vec(letters)
str_scl("a")
}
\seealso{
Other props: 
\code{\link{cmp_mmm_ccc_PROPS}()},
\code{\link{sss_ccc_PROPS}()},
\code{\link{unq_mmm_ccc_PROPS}()}
}
\concept{props}
