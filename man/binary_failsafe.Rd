% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/binary_failsafe.R
\name{binary_failsafe}
\alias{binary_failsafe}
\alias{\%IS\%}
\alias{\%ISNT\%}
\alias{\%EQ\%}
\alias{\%NEQ\%}
\alias{\%AND\%}
\alias{\%OR\%}
\alias{\%NOT\%}
\alias{\%ONE\%}
\alias{\%IN\%}
\alias{\%OUT\%}
\alias{\%HAS\%}
\alias{\%LACKS\%}
\title{Failsafe binary logical functions}
\usage{
x \%IS\% y

x \%ISNT\% y

x \%EQ\% y

x \%NEQ\% y

x \%AND\% y

x \%OR\% y

x \%NOT\% y

x \%ONE\% y

x \%IN\% y

x \%OUT\% y

x \%HAS\% y

x \%LACKS\% y
}
\arguments{
\item{x, y}{Any R objects.}
}
\value{
A logical scalar.
}
\description{
Binary functions that always produce either \code{TRUE} or \code{FALSE} unless calling \code{identity(x)} or \code{identity(y)} produces an error.
\itemize{
\item \strong{\verb{\%IS\%}}: evaluates whether \code{x} and \code{y} are \code{\link[base]{identical}}.
\item \strong{\verb{\%ISNT\%}}: evaluates whether \code{x} and \code{y} are NOT identical.
\item \strong{\verb{\%EQ\%}}: evaluates whether \code{x} and \code{y} are \code{\link[base]{setequal}}.\eqn{^1}
\item \strong{\verb{\%NEQ\%}}: evaluates whether \code{x} and \code{y} are NOT setequal.\eqn{^1}
\item \strong{\verb{\%IN\%}}: evaluates whether atomic scalar \code{x} is contained in atomic object \code{y}.\eqn{^2}
\item \strong{\verb{\%OUT\%}}: evaluates whether atomic scalar \code{x} is NOT contained in atomic object \code{y}.\eqn{^2}
\item \strong{\verb{\%OR\%}}: evaluates whether \code{x} and \code{y} is scalar \code{TRUE} or both.
\item \strong{\verb{\%AND\%}}: evaluates whether \code{x} and \code{y} are both scalar \code{TRUE}.
\item \strong{\verb{\%NOR\%}}: evaluates whether \code{x} and \code{y} are both scalar \code{FALSE}.
\item \strong{\verb{\%ONE\%}}: evaluates whether either \code{x} or \code{y} is scalar \code{TRUE}, but not both.
\item \strong{\verb{\%HAS\%}}: evaluates whether atomic object \code{x} contains atomic scalar \code{y}.\eqn{^3}
\item \strong{\verb{\%LACKS\%}}: evaluates whether atomic object \code{x} lacks (does not contain) atomic scalar \code{y}.\eqn{^3}
}
\eqn{^1}. If \code{x} and \code{y} are not \code{\link{compatible}}, \verb{\%EQ\%} and \verb{\%NEQ\%} return \code{FALSE} and \code{TRUE}, respectively.
\cr\cr
\eqn{^2}. If \code{x} is not atomic, \code{y} is not atomic scalar, or \code{x} and \code{y} are not compatible, \verb{\%IN\%} and \verb{\%OUT\%} return \code{FALSE} and \code{TRUE}, respectively.
\cr\cr
\eqn{^3}. If \code{x} is not atomic scalar, \code{y} is not atomic, or \code{x} and \code{y} are not compatible, \verb{\%HAS\%} and \verb{\%LACKS\%} return \code{FALSE} and \code{TRUE}, respectively.
}
\seealso{
Other extensions: 
\code{\link{atomize}},
\code{\link{callers}()},
\code{\link{case}()},
\code{\link{dots_uj}},
\code{\link{envir_vals}},
\code{\link{ex}()},
\code{\link{failsafe}()},
\code{\link{fork}()},
\code{\link{fsub}()},
\code{\link{is_failsafe}},
\code{\link{is_unq}()},
\code{\link{make_uj}},
\code{\link{n_is}()},
\code{\link{n_th}()},
\code{\link{naming}},
\code{\link{na}()},
\code{\link{os}()},
\code{\link{paths}},
\code{\link{pause}()},
\code{\link{ply}()},
\code{\link{put}()},
\code{\link{reclass}()},
\code{\link{recycling}},
\code{\link{removal}},
\code{\link{run}()},
\code{\link{r}()},
\code{\link{stats0}},
\code{\link{swap}()},
\code{\link{uj_logicals}},
\code{\link{xb}()}

Other logicals: 
\code{\link{is_failsafe}},
\code{\link{uj_logicals}}

Other failsafe: 
\code{\link{failsafe}()},
\code{\link{is_failsafe}}
}
\concept{extensions}
\concept{failsafe}
\concept{logicals}
