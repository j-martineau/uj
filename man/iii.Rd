% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iii.R
\name{iii}
\alias{iii}
\alias{iii_props}
\alias{is_iii_spec}
\alias{iiii}
\alias{icmp}
\alias{imss}
\alias{inas}
\alias{ioks}
\alias{iprt}
\title{Integrity (completeness) properties}
\usage{
iii(x)

iii_props()

is_iii_spec(spec)

iiii(x, spec, ...)

icmp(x, ...)

imss(x, ...)

inas(x, ...)

ioks(x, ...)

iprt(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{spec}{\code{NULL} or a \link[=cmp_chr_scl]{complete character vec} containing one or more integrity properties (i.e., from \code{iii_props()}). Integrity properties may be pipe-delimited. If there are multiple properties in \code{spec}, \code{x} is inspected for a match to any of the specified properties.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\value{
\itemize{
\item \strong{\code{iii}}: a character scalar/vector.
\item \strong{\code{iii_vals}}: a character vector.
\item \strong{\verb{iiii, ixxx, is_iii_spec}}: a logical scalar.
}
}
\description{
Integrity properties are defined for \link[=ipop]{populated} \link[=atm_dtf]{atomic data.frame}, populated \link[=atm_vls]{atomic vlists}, populated atomic vectors, and populated atomic arrays. For all others, all integrity properties are considered \code{FALSE}. The following table summarizes valid integrity properties.
\itemize{
\item \strong{\code{'cmp'}} (complete): populated and atomic vectors, arrays, \link[=atm_dtf]{data.frames}, and \link[=atm_vls]{vlists} containing \strong{no} \code{NA} values.
\item \strong{\code{'mss'}} (missing): populated and atomic vectors, arrays, \link[=atm_dtf]{data.frames}, and \link[=atm_vls]{vlists} containing \strong{only} \code{NA} values.
\item \strong{\code{'prt'}} (partial): populated and atomic vectors, arrays, \link[=atm_dtf]{data.frames}, and \link[=atm_vls]{vlists} containing \strong{both} \code{NA} and non-\code{NA} values.
\item \strong{\code{'nas'}} (\code{NA} scalar): atomic scalar \code{NA}.
\item \strong{\code{'oks'}} (OK scalar): non-\code{NA} atomic scalar.
}
\strong{Functions}
\itemize{
\item \strong{\code{iii}}: gets a character vector containing all integrity properties possessed by \code{x}.
\item \strong{\code{ixxx}}: evaluates whether \code{x} possesses the integrity property \code{xxx} (a placeholder for any given integrity property value) subject to any restrictions in \code{...}.
\item \strong{\code{iiii}}: evaluates whether \code{x} possesses one or more (possibly pipe-delimited) integrity properties in \code{spec} subject to any restrictions in \code{...}.
\item \strong{\code{iii_props}}: gets a character vector of all possible integrity property values.
\item \strong{\code{is_iii_spec}}: evaluates whether \code{spec} is a valid integrity property specification.
}
}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\itemize{
\item \strong{\code{n}}: a vector of valid lengths/numbers of elements.
\item \strong{\code{nr}}: a vector of valid numbers of rows.
\item \strong{\code{nc}}: a vector of valid numbers of columns.
\item \strong{\code{min}}: a scalar minimum valid length/number of element.
\item \strong{\code{minr}}: a scalar minimum valid number of rows.
\item \strong{\code{minc}}: a scalar minimum valid number of columns.
\item \strong{\code{max}}: a scalar maximum valid length/number of element.
\item \strong{\code{maxr}}: a scalar maximum valid number of rows.
\item \strong{\code{maxc}}: a scalar maximum valid number of columns.
\item \strong{\code{vals}}: a vector of valid values.
\item \strong{\code{lt}}: a scalar less-than (exclusive upper) bound.
\item \strong{\code{le}}: a scalar less-than-or-equal (inclusive upper) bound
\item \strong{\code{ge}}: a scalar greater-than-or-equal (inclusive lower) bound.
\item \strong{\code{gt}}: a scalar greater-than bound (exclusive lower) bound.
}
}

\seealso{
Other props: 
\code{\link{as_mmm}},
\code{\link{bbb_ccc}()},
\code{\link{bbb_mmm}()},
\code{\link{bbb}()},
\code{\link{ccc}()},
\code{\link{cmp_ccc}()},
\code{\link{cmp_mmm_ccc}()},
\code{\link{cmp_mmm}()},
\code{\link{comparable}()},
\code{\link{compatible}()},
\code{\link{ddd}()},
\code{\link{eee}()},
\code{\link{meets}()},
\code{\link{mmm_ccc}()},
\code{\link{mmm}()},
\code{\link{ppp}()},
\code{\link{sss}()}
}
\concept{props}
