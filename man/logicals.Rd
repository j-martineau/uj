% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/logicals.R
\docType{data}
\name{logicals}
\alias{logicals}
\alias{not}
\alias{and}
\alias{or}
\alias{one}
\alias{TEST}
\alias{ANY}
\alias{ALL}
\alias{NOR}
\alias{ONE}
\alias{TWO}
\alias{tests}
\alias{w}
\alias{nors}
\alias{anys}
\alias{alls}
\alias{ones}
\alias{twos}
\alias{is_in}
\alias{not_in}
\alias{has}
\alias{lacks}
\title{Extended Logical Functions}
\format{
An object of class \code{NULL} of length 0.
}
\usage{
logicals

not(x, na. = "err")

and(x, y, na. = "err")

or(x, y, na. = "err")

one(x, y, na. = "err")

TEST(x, na. = FALSE, err. = NA)

ANY(..., err. = NA)

ALL(..., err. = NA)

NOR(..., err. = NA)

ONE(..., err. = NA)

TWO(..., err. = NA)

tests(..., na. = F, a. = F, not. = F, across. = NA, within. = NA)

w(..., not. = F, na. = F, a. = F)

nors(..., na. = F, a. = F, across. = T, within. = F)

anys(..., na. = F, a. = F, across. = T, within. = F)

alls(..., na. = F, a. = F, across. = T, within. = F)

ones(..., na. = F, a. = F, across. = T, within. = F)

twos(..., na. = F, a. = F, across. = T, within. = F)

is_in(x, y, not. = F, na. = F, agg. = NA)

not_in(x, y, na. = F, agg. = NA)

has(x, y, na. = T, agg. = NA)

lacks(x, y, na. = T, agg. = NA)
}
\arguments{
\item{x}{A logical object for all functions other than \code{is_in},
\code{not_in}, \code{has}, and \code{lacks}. Otherwise, an atomic object.}

\item{na.}{\code{TRUE} or \code{FALSE} indicating what value should
replace \code{NA} values.}

\item{y}{A logical object for all functions other than \code{is_in},
\code{not_in}, \code{has}, and \code{lacks}. Otherwise, an atomic object
\link[=compatible]{compatible} with \code{x}.}

\item{err.}{\code{TRUE}, \code{FALSE}, or \code{NA}, indicating that,
respectively, \code{TRUE} should be substituted for a non-logical value,
\code{FALSE} should be substituted for a non-logical value, or an error
should thrown if a non-logical value is encountered.}

\item{...}{Arbitrary number of logical scalars or vectors to be processed.}

\item{a.}{Logical scalar indicating whether to atomize \code{...} before
processing. This creates a single atomic vector of all atomic elements
contained in all arguments in \code{...} and effectively changes the
behavior of \code{or} to \code{any}, \code{and} to \code{all}, \code{not}
to \code{!any}, and \code{some} and \code{most} to count the total number
of \code{TRUE} values rather than the number of \code{TRUE} values in the
same location of recycled arguments from \code{...} (but with error
checking and flexible \code{NA} value handling.)}

\item{not.}{Logical scalar indicating whether to negate values in arguments
supplied in \code{...} before processing.}

\item{across., within.}{Character scalar in \code{c('', 'none', 'one', 'any',
'some', 'all')} indicating no aggregation}

\item{agg.}{Character scalar in \code{c('nor', 'one', 'any', 'two', 'all')}
used to specify, respectively, that 0, 1, any, 2 or more, and all arguments
must be \code{TRUE}.}
}
\value{
A logical scalar (any function), vector (\code{}), matrix, or array.
}
\description{
Extended Logical Functions
}
\details{
\strong{\code{not}, \code{and}, \code{or}, and \code{nor}}
\cr Error checked \code{!}, \code{&}, \code{|}, and \code{xor} functions.
\cr\cr
\strong{\code{TEST}}
\cr Tests \code{x} and returns either \code{TRUE} or \code{FALSE}. If
\code{x} is not a logical scalar, throw an error if \code{err = 'err'};
otherwise return the value of \code{err}. Returns the value of \code{na} if
the value of \code{x} is \code{NA}.
\cr\cr
\strong{\code{NOR}}
\cr Returns \code{FALSE} as soon as a \code{TRUE} argument is encountered.
If none are encountered, return \code{TRUE}.
\cr\cr
\strong{\code{ANY}}
\cr Returns \code{TRUE} as soon as a \code{TRUE} argument is encountered.
If none are encountered, return \code{FALSE}.
\cr\cr
\strong{\code{ALL}}
\cr Returns \code{FALSE} as soon as a \code{FALSE} argument is encountered.
If none are encountered, return \code{TRUE}.
\cr\cr
\strong{\code{ONE}}
\cr Returns \code{FALSE} as soon as a second \code{TRUE} argument is
encountered. Otherwise, after evaluating all arguments evaluates whether
the number of \code{TRUE} arguments is 1.
\cr\cr
\strong{\code{TWO}}
\cr Returns \code{TRUE} as soon as a second \code{TRUE} argument is
encountered. Otherwise, after evaluating all arguments, check whether the
number of \code{TRUE} arguments is 1.
\cr\cr
\strong{\code{test}}
\cr Tests an arbitrary number of arguments with a wide array of options.
\cr\cr
\strong{\code{w}}
\cr Indexes \code{TRUE} or \code{FALSE} values.
\cr\cr
\strong{\code{nors}, \code{anys}, \code{alls}, \code{ones}, and
\code{twos}}
\cr Check for across and/or within argument counts of \code{TRUE} or
\code{FALSE} values equal to zero, one or more, all, one, or two or more,
respectively.
\cr\cr
\strong{\code{is_in}, \code{not_in}, \code{has}, and \code{lacks}}
\cr Check whether each element of \code{x} is contained by, contains values
of, is not contained by, and does not contain values of \code{y},
respectively.
}
\seealso{
Other is_functions: 
\code{\link{is_color}()},
\code{\link{is_failsafe}},
\code{\link{is_sortable}()},
\code{\link{is_unique}()},
\code{\link{is_xxx_array}},
\code{\link{is_xxx_generic}},
\code{\link{is_xxx_matrix}},
\code{\link{is_xxx_mvect}},
\code{\link{is_xxx_scalar}},
\code{\link{is_xxx_tibble}},
\code{\link{is_xxx_vect}},
\code{\link{is_xxx_vlist}},
\code{\link{is_xxx_vtype}}
}
\concept{is_functions}
\keyword{datasets}
