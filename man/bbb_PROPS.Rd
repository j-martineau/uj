% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bbb.R
\encoding{UTF-8}
\name{bbb_PROPS}
\alias{bbb_PROPS}
\alias{bbb}
\alias{bbb_funs}
\alias{bbb_props}
\alias{is_bbb_spec}
\alias{BBB}
\alias{ATM}
\alias{DEF}
\alias{FUN}
\alias{NIL}
\alias{NLL}
\alias{POP}
\alias{RCR}
\title{Basic Properties}
\usage{
bbb_PROPS()

bbb(x)

bbb_funs()

bbb_props()

is_bbb_spec(spec)

BBB(x, spec, ...)

ATM(x, ...)

DEF(x, ...)

FUN(x, ...)

NIL(x)

NLL(x)

POP(x, ...)

RCR(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{spec}{\code{NULL} or a \link[=cmp_chr_scl]{complete character vec} containing one or more basic properties from \code{bbb_props()}. basic properties may be pipe-delimited. If there are multiple properties in \code{spec}, \code{x} is inspected for a match to any of the specified properties.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\description{
An object's basic properties are defined by its fundamental structure as follows:
\tabular{lll}{  \verb{'atm', 'ATM'}   \tab \code{atomic-ness}      \tab Atomic (but not \code{NULL}). Both a basic and an \link[=mmm]{xmode} property.                                    \cr   \tab   \cr
  \verb{'fun', 'FUN'}   \tab \verb{function-ness}    \tab A function or a character scalar name of a function accessible from the environment of the calling function. \cr   \tab   \cr
  \verb{'rcr', 'RCR'}   \tab \code{recursive-ness}   \tab data.frame or list.                                                                                                       \cr
  \verb{'pop', 'POP'}   \tab \code{populated-ness}   \tab Length \code{1} or greater.                                                                                                    \cr
  \verb{'def', 'DEF'}   \tab \code{defined-ness}     \tab Not \code{NULL}.                                                                                                               \cr
  \verb{'nll', 'NLL'}   \tab \code{null-ness}        \tab \code{NULL}.                                                                                                                   \cr
  \verb{'nil', 'NIL'}   \tab \code{nil-ness}         \tab Length \code{0} but not \code{NULL}.                                                                                                  }
}
\section{Functions}{
\itemize{
\item \code{bbb()}: Lists all basic properties of \code{x}. Returns a sorted, lowercase, character vector.

\item \code{bbb_funs()}: Lists all basic-property-checking functions. Returns a sorted, uppercase, character vector.

\item \code{bbb_props()}: Lista all basic properties. Returns a sorted, lowercase, character vector.

\item \code{is_bbb_spec()}: Checks whether \code{spec} is a basic property spec. Returns a logical scalar. See \code{\link{ppp}} for a definition of a property spec.

\item \code{BBB()}: Checks \code{x} against the basic property spec \code{spec} subject to any count or value restrictions in \code{...}. Returns a logical scalar. See \code{\link{ppp}} for a definition of a property spec.

\item \code{ATM()}: Checks \code{x} atomic-ness subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{DEF()}: Checks \code{x} for defined-ness subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{FUN()}: Checks \code{x} for function-ness subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{NIL()}: Checks \code{x} ni-lness subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{NLL()}: Checks \code{x} for null-ness subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{POP()}: Checks \code{x} for populated-ness subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{RCR()}: Checks \code{x} for recursive-ness subject to any count or value restrictions in \code{...}. Returns a logical scalar.

}}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{ll}{  \verb{.max, .maxr, .maxc}   \tab Scalar maximum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.min, .minr, .minc}   \tab Scalar minimum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.lt, .le, .ge, .gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively. \cr   \tab   \cr
  \verb{.n, .nr, .nc}         \tab A vector of valid numbers of elements, rows, and columns, respectively.                                                                    \cr   \tab   \cr
  \code{.vals}                \tab A vector of valid values.                                                                                                                                 }
}

\examples{
bbb_funs()
bbb_props()
is_bbb_spec("nil|nll")
BBB(NULL, "nil|nll")
POP(NA)
ATM(list(letters))
bbb(NA)
}
