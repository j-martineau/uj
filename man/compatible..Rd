% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compatible.R
\name{compatible.}
\alias{compatible.}
\alias{compatible}
\alias{compatible_mats}
\alias{compatible_dtfs}
\title{Are objects compatible?}
\usage{
compatible.()

compatible(..., recyclable. = TRUE)

compatible_mats(..., bind. = "c")

compatible_dtfs(..., bind. = "c")
}
\arguments{
\item{...}{An arbitrary number of arguments to be checked for compatibility
with each other.}

\item{recyclable.}{\link[cmp_lgl_scl]{Complete logical scalar} indicating
whether arguments in \code{...} must be recyclable to be compatible_}

\item{bind.}{\link[cmp_chr_scl]{Complete character scalar} indicating how to
bind: \code{'c'} or \code{'r'} for column vs. row binding, respectively.}
}
\value{
A logical scalar.
}
\description{
Compatibility means that objects or corresponding variables in
data.frames arguments are either:\itemize{
\item all numeric
\item all character
\item all logical
\item all unordered factor with the same levels, or
\item ordered factor with the same levels in the same order.            }
FOR \link[atm_dtf]{ATOMIC DATA.FRAMES}:
\cr Arguments are compatible for row binding if they have identical column
names and their respective columns are of compatible modes as defined
above. Arguments are compatible for column binding if they have the same
number of rows.
\cr\cr
FOR \link[atm_mat]{ATOMIC MATRICES}:
\cr Arguments are compatible for
row binding if their modes are compatible and they have the same number of
columns. Arguments are compatible for column binding if their modes are
compatible and they the same number of rows.
}
\section{Functions}{
\itemize{
\item \code{compatible_dtfs()}: Are all atomic tibbles in \code{...} compatible for
binding?

}}
\examples{
N0 <- 0
N7 <- 0:7
N9 <- 0:9
Chr0 <- as.character(Num0)
Chr7 <- as.character(Num7)
Chr9 <- as.character(Num9)
Lgc0 <- Num0 < 4
Lgc7 <- Num7 < 3
Lgc9 <- Num9 < 2
Uno00 <- factor(C0, levels = C0, ordered = F)
Uno09 <- factor(C0, levels = C9, ordered = F)
Uno77 <- factor(C7, levels = C7, ordered = F)
Uno79 <- factor(C7, levels = C9, ordered = F)
Uno99 <- factor(C9, levels = C9, ordered = F)
Ord00 <- factor(C0, levels = C0, ordered = F)
Ord09 <- factor(C0, levels = C9, ordered = F)
Ord77 <- factor(C7, levels = C7, ordered = F)
Ord79 <- factor(C7, levels = C9, ordered = F)
Ord99 <- factor(C9, levels = C9, ordered = F)
compatible(N0, N7, N9)
compatible(C0, C7, C9)
compatible(L0, L7, L9)
compatible(UA0, U7A, U9A)
compatible(O0, )
compatible(ChrZero, ChrSeven, ChrDigits, recycle = F)
compatible(LgcZero, LgcSeven, LgcDigits, recycle = F)
compatible(NumZero, NumSeven, NumDigits, recycle = F)
compatible(list(letters), LETTERS, as.character(0:9))
}
\seealso{
Other props: 
\code{\link{as_mmm.}()},
\code{\link{ccc.}()},
\code{\link{cmp_ccc.}()},
\code{\link{cmp_mmm.}()},
\code{\link{cmp_mmm_ccc.}()},
\code{\link{comparable.}()},
\code{\link{ddd.}()},
\code{\link{eee.}()},
\code{\link{fff.}()},
\code{\link{meets.}()},
\code{\link{mmm.}()},
\code{\link{mmm_ccc.}()},
\code{\link{ppp.}()},
\code{\link{sss.}()},
\code{\link{ttt.}()},
\code{\link{ttt_ccc.}()},
\code{\link{ttt_mmm.}()}
}
\concept{props}
