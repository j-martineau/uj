% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/binfuns.R
\name{binfuns}
\alias{binfuns}
\alias{\%IS\%}
\alias{\%ISNT\%}
\alias{\%EQ\%}
\alias{\%NEQ\%}
\alias{\%AND\%}
\alias{\%OR\%}
\alias{\%NOT\%}
\alias{\%ONE\%}
\alias{\%IN\%}
\alias{\%OUT\%}
\alias{\%HAS\%}
\alias{\%LACKS\%}
\title{Scalar Result Failsafe Binary Logical Functions}
\usage{
x \%IS\% y

x \%ISNT\% y

x \%EQ\% y

x \%NEQ\% y

x \%AND\% y

x \%OR\% y

x \%NOT\% y

x \%ONE\% y

x \%IN\% y

x \%OUT\% y

x \%HAS\% y

x \%LACKS\% y
}
\arguments{
\item{x, y}{Any objects.}
}
\value{
A logical scalar.
}
\description{
\tabular{ll}{
\code{\%IS\%}          \tab Evaluates whether \code{x} and \code{y} are
\code{\link[base]{identical}}.            \cr
\code{\%ISNT\%}        \tab Evaluates whether \code{x} and \code{y} are
NOT \code{\link[base]{identical}}.        \cr
\code{\%EQ\%} (a)      \tab Evaluates whether \code{x} and \code{y} are
\code{\link[base]{setequal}}.             \cr
\code{\%NEQ\%} (a)     \tab Evaluates whether \code{x} and \code{y} are
NOT \code{\link[base]{setequal}}.         \cr
\code{\%AND\%}         \tab Evaluates whether \code{x} and \code{y} are
both scalar \code{TRUE}.                  \cr
\code{\%OR\%}          \tab Evaluates whether \code{x} or \code{y} is
scalar \code{TRUE} or both.               \cr
\code{\%NOR\%}         \tab Evaluates whether \code{x} and \code{y} are
both scalar \code{FALSE}.                 \cr
\code{\%ONE\%}         \tab Evaluates whether
\link[=base:xor]{either \code{x} or \code{y}}
is scalar \code{TRUE}, but not both.      \cr
\code{\%IN\%} (b)      \tab Evaluates whether atomic scalar \code{x} is
an element in atomic object \code{y}.     \cr
\code{\%OUT\%} (b)     \tab Evaluates whether atomic scalar \code{x} is
NOT an element in atomic object \code{y}. \cr
\code{\%HAS\%} (c)     \tab Evaluates whether atomic object \code{x}
contains atomic scalar \code{y}.          \cr
\code{\%LACKS\%} (c)   \tab Evaluates whether atomic object \code{x}
lacks (does not contain) atomic scalar
\code{y}.                                   }
(a) If \code{x} and \code{y} are not \code{\link{compatible}}, \code{\%EQ\%}
and \code{\%NEQ\%} return \code{FALSE} and \code{TRUE}, respectively.
\cr\cr
(b) If \code{x} is not atomic, \code{y} is not atomic scalar, or \code{x} and
\code{y} are not \code{\link{compatible}}, \code{\%IN\%} and \code{\%OUT\%}
return \code{FALSE} and \code{TRUE}, respectively.
\cr\cr
(c) If \code{x} is not atomic scalar, \code{y} is not atomic, or \code{x} and
\code{y} are not \code{\link{compatible}}, \code{\%HAS\%} and
\code{\%LACKS\%} return \code{FALSE} and \code{TRUE}, respectively.
}
\seealso{
Other extensions: 
\code{\link{atomize}},
\code{\link{callers}()},
\code{\link{case}()},
\code{\link{dots_uj}},
\code{\link{envir_vals}},
\code{\link{ex}()},
\code{\link{failsafe}()},
\code{\link{files_uj}},
\code{\link{fork}()},
\code{\link{fsub}()},
\code{\link{is_failsafe}},
\code{\link{is_unq}()},
\code{\link{logicals_uj}()},
\code{\link{make_uj}},
\code{\link{n_is}()},
\code{\link{n_th}()},
\code{\link{naming}},
\code{\link{na}()},
\code{\link{os}()},
\code{\link{pause}()},
\code{\link{ply}()},
\code{\link{put.}()},
\code{\link{reclass}()},
\code{\link{recycling}},
\code{\link{removal}},
\code{\link{run}()},
\code{\link{stats0}},
\code{\link{swap}()},
\code{\link{xb}()}

Other logicals: 
\code{\link{is_failsafe}},
\code{\link{logicals_uj}()}

Other failsafe: 
\code{\link{failsafe}()},
\code{\link{is_failsafe}}
}
\concept{extensions}
\concept{failsafe}
\concept{logicals}
