% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/weave.R
\encoding{UTF-8}
\name{weave}
\alias{weave}
\title{Weave inlay values into a string}
\usage{
weave(tmp, ...)
}
\arguments{
\item{tmp}{A \link[=cmp_chr_scl]{complete character scalar} template with embedded escape seqs. See details.}

\item{...}{Arbitrary number of unnamed atomic scalar/vector arguments to be inserted into \code{tmp} with formatting specified in inlay escape seqs. The \code{n}-th argument in \code{...} corresponds to the \code{n}-th inlay escape seq in \code{tmp}. The number of inlay escape seqs in \code{tmp} must be equal to the number of \code{...} arguments. See details.}
}
\value{
A character scalar.
}
\description{
A reformulation of \code{\link[base]{sprintf}} relying on a template containing escape seqs which in turn contain formatting switches. Escape seqs specify where to insert inlay arguments. switches specify how to format arguments to be inlaid, and come in three families as shown in the table below
\tabular{llll}{
  \strong{Switch} \tab   \strong{Switch Type}                  \tab   \strong{Sample}  \tab   \strong{Text of Result}    \cr
  \strong{Value}  \tab   \strong{(and Formatting)}             \tab   \strong{Arg}     \tab   \strong{with Sample Arg}   \cr
  \code{'0'}      \tab   \code{decimal }(\code{0} decimal points)   \tab   \code{arg = pi}  \tab   \code{3}                   \cr
  \code{'1'}      \tab   \code{decimal }(\code{1} decimal point)    \tab   \code{arg = pi}  \tab   \code{3.1}                 \cr
  \code{'2'}      \tab   \code{decimal }(\code{2} decimal points)   \tab   \code{arg = pi}  \tab   \code{3.14}                \cr
  \code{'3'}      \tab   \code{decimal }(\code{3} decimal points)   \tab   \code{arg = pi}  \tab   \code{3.141}               \cr
  \code{'4'}      \tab   \code{decimal }(\code{4} decimal points)   \tab   \code{arg = pi}  \tab   \code{3.1415}              \cr
  \code{'5'}      \tab   \code{decimal }(\code{5} decimal points)   \tab   \code{arg = pi}  \tab   \code{3.14159}             \cr
  \code{'6'}      \tab   \code{decimal }(\code{6} decimal points)   \tab   \code{arg = pi}  \tab   \code{3.141592}            \cr
  \code{'7'}      \tab   \code{decimal }(\code{7} decimal points)   \tab   \code{arg = pi}  \tab   \code{3.1415926}           \cr
  \code{'8'}      \tab   \code{decimal }(\code{8} decimal points)   \tab   \code{arg = pi}  \tab   \code{3.14159265}          \cr
  \code{'9'}      \tab   \code{decimal }(\code{9} decimal points)   \tab   \code{arg = pi}  \tab   \code{3.141592653}         \cr
  \code{'q'}      \tab   \code{quote   }(single straight)      \tab   \code{arg = 'x'} \tab   \code{'x'}                 \cr
  \code{'Q'}      \tab   \code{quote   }(double straight)      \tab   \code{arg = 'x'} \tab   \code{"x"}                 \cr
  \code{'t'}      \tab   \code{quote   }(single typeset)       \tab   \code{arg = 'x'} \tab   \verb{‘x’}                 \cr
  \code{'T'}      \tab   \code{quote   }(double typeset)       \tab   \code{arg = 'x'} \tab   \verb{“x”}                 \cr
  \code{'l'}      \tab   \code{list    }(simple)               \tab   \code{arg = 1:3} \tab   \verb{1, 2, 3}             \cr
  \code{'|'}      \tab   \code{list    }(Oxford 'or')          \tab   \code{arg = 1:3} \tab   \verb{1, 2, or 3}          \cr
  \code{'&'}      \tab   \code{list    }(Oxford 'and')         \tab   \code{arg = 1:3} \tab   \verb{1, 2, and 3}         \cr
  \code{'a'}      \tab   \code{list    }(Oxford 'all of')      \tab   \code{arg = 1:3} \tab   \verb{any of 1, 2, or 3}   \cr
  \code{'A'}      \tab   \code{list    }(Oxford 'any of')      \tab   \code{arg = 1:3} \tab   \verb{all of 1, 2, and 3}  \cr
  \code{'e'}      \tab   \code{list    }(Oxford 'either/or')   \tab   \code{arg = 1:3} \tab   \verb{either 1, 2, or 3}   \cr
  \code{'n'}      \tab   \code{list    }(Oxford 'neither/nor') \tab   \code{arg = 1:3} \tab   \verb{neither 1, 2, nor 3} \cr
  \code{'b'}      \tab   \code{list    }(brace-enclosed)       \tab   \code{arg = 1:3} \tab   \code{'{1, 2, 3}'}         \cr
  \code{'c'}      \tab   \code{list    }(\code{c(.)} statement)     \tab   \code{arg = 1:3} \tab   \code{'c(1, 2, 3)'}        \cr
  \code{'p'}      \tab   \code{list    }(paren-enclosed)       \tab   \code{arg = 1:3} \tab   \code{'(1, 2, 3)'}         \cr
  \code{'s'}      \tab   \code{list    }(bracket-enclosed)     \tab   \code{arg = 1:3} \tab   \code{'[1, 2, 3]'}           }
\cr\cr \strong{Escape seqs} are formatted as \code{'{@}'}, \code{'{@x}'}, \code{'{@xy}'}, and \verb{'\{@xyz\}} where \code{x}, \code{y}, and \code{z} are formatting switches and where there may only be \code{1} formatting switch per family.
\cr\cr Escape seqs in format \code{'{@}'} mean 'insert \link[=atm_scl]{atomic scalar} arg \emph{as is}'.
\cr\cr Escape seqs in formats \verb{'\{@x\}', '\{@xy\}',} and \code{'{@xyz}'} mean 'insert \link[=atm_scl]{atomic vec} arg \emph{after applying}, respectively, switch \code{x}; switches \code{x} and \code{y}; and switches \code{x}, \code{y}, and \code{z}.'
\cr\cr \strong{Ordering of switches in escape seqs} is arbitrary. Regardless of order in escape seqs, any \code{decimal} switches are applied first, followed by any \code{quote} switches, followed by any \code{list} switches.
}
\examples{
cat(weave('{@}', FALSE))
cat(weave('{@}', 42))
cat(weave('{@b}', 4:7))
cat(weave('{@q}', 'foo::bar'))
cat(weave('{@0}', pi))
cat(weave('{@c2}', c(pi, exp(1), 42)))
cat(weave('{@Q6}', pi))
cat(weave('{@et3}', c(pi, exp(1))))
cat(weave('{@aq}', c('me', 'myself', 'I')))
}
\seealso{
Other strings: 
\code{\link{blank}()},
\code{\link{chn}()},
\code{\link{delim}()},
\code{\link{fsub}()},
\code{\link{gr}},
\code{\link{ipat}()},
\code{\link{makestr}()},
\code{\link{markdown}()},
\code{\link{maxnch}()},
\code{\link{ox}()},
\code{\link{pgrid}()},
\code{\link{revstr}()},
\code{\link{spaces}()},
\code{\link{ss}()},
\code{\link{tocase}()}
}
\concept{strings}
