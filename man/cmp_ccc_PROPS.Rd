% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cmp_ccc.R
\encoding{UTF-8}
\name{cmp_ccc_PROPS}
\alias{cmp_ccc_PROPS}
\alias{cmp_ccc}
\alias{cmp_ccc_funs}
\alias{cmp_arr}
\alias{cmp_dtf}
\alias{cmp_gen}
\alias{cmp_mat}
\alias{cmp_mvc}
\alias{cmp_scl}
\alias{cmp_vec}
\alias{cmp_vls}
\title{Combo Completeness Extended Class Properties}
\usage{
cmp_ccc_PROPS()

cmp_ccc(x, ccc, ...)

cmp_ccc_funs()

cmp_arr(x, ...)

cmp_dtf(x, ...)

cmp_gen(x, ...)

cmp_mat(x, ...)

cmp_mvc(x, ...)

cmp_scl(x, ...)

cmp_vec(x, ...)

cmp_vls(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{ccc}{A character scalar single xclass property from \code{\link{ccc_props}()}.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\value{
\strong{A character vector} \cr\cr \code{cmp_ccc_funs}
\cr\cr  \strong{A logical scalar}   \cr\cr \verb{cmp_\{ccc\}, cmp_ccc}
}
\description{
Combinations of \link[=CMP]{completeness} and \link[=ccc]{extended class} properties.
}
\section{Functions}{
\itemize{
\item \code{cmp_ccc()}: Checks \code{x} for completeness plus the extended class in \code{ccc} subject to count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ccc_funs()}: Lists all completeness plus extended class property checking functions. Returns a character vector.

\item \code{cmp_arr()}: Checks \code{x} for completeness and array-ness subject to count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_dtf()}: Checks \code{x} for completeness and data.frame-ness subject to count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_gen()}: Checks \code{x} for completeness and generic-ness subject to count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_mat()}: Checks \code{x} for completeness and matrix-ness subject to count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_mvc()}: Checks \code{x} for completeness and multivec-ness subject to count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_scl()}: Checks \code{x} for completeness and scalar-ness subject to count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_vec()}: Checks \code{x} for completeness and vec-ness subject to count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_vls()}: Checks \code{x} for completeness and vector-list-ness subject to count and/or value restrictions in \code{...}. Returns a logical scalar.

}}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{ll}{  \verb{.max, .maxr, .maxc}   \tab Scalar maximum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.min, .minr, .minc}   \tab Scalar minimum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.lt, .le, .ge, .gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively. \cr   \tab   \cr
  \verb{.n, .nr, .nc}         \tab A vector of valid numbers of elements, rows, and columns, respectively.                                                                    \cr   \tab   \cr
  \code{.vals}                \tab A vector of valid values.                                                                                                                                 }
}

\examples{
cmp_ccc_funs()
cmp_ccc(letters, "mvc")
cmp_ccc(1, "scl")
cmp_ccc(NA, "gen")
cmp_mvc(letters)
cmp_scl(1)

}
