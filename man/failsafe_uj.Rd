% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/failsafe.R
\name{failsafe_uj}
\alias{failsafe_uj}
\alias{failsafe}
\alias{isERR}
\alias{notERR}
\alias{msgERR}
\title{Evaluate objects, flag any errors}
\usage{
failsafe_uj()

failsafe(x)

isERR(x)

notERR(x)

msgERR(x)
}
\arguments{
\item{x}{An object or a call to evaluate in the environment of a parent
function where the initial call was made.}
}
\value{
\code{failsafe} returns either \code{x} or an object of class
\code{'simpleError'}. \code{isERR, notERR} returns a logical scalar.
\code{msgERR} returns either \code{NULL} or a character scalar.
}
\description{
Evaluate objects, flag any errors
}
\section{Functions}{
\itemize{
\item \code{failsafe}: Attempts to call \code{identity(x)}. If an error is
produced in doing so, returns an object of class \code{'error'} or of class
\code{'simpleError'}. If an error is not generated, returns the safely
evaluated value of \code{x}.

\item \code{isERR}: Evaluates whether calling \code{identity(x)} produced
an error.

\item \code{notERR}: Evaluates whether calling \code{identity(x)} did not
produce an error.

\item \code{msgERR}: Gets any error message associated with calling
\code{identity(x)}. If there is none, returns \code{NULL}.
}}

\seealso{
Other meta: 
\code{\link{av_uj}()},
\code{\link{bin_uj}()},
\code{\link{callers_uj}()},
\code{\link{case_uj}()},
\code{\link{dots_uj}()},
\code{\link{ex_uj}()},
\code{\link{fork_uj.}()},
\code{\link{fx_uj}()},
\code{\link{is_failsafe_uj}()},
\code{\link{is_unique_uj}()},
\code{\link{logicals_uj}()},
\code{\link{make_uj}()},
\code{\link{n_uj}},
\code{\link{na_vals_uj}()},
\code{\link{names_uj}()},
\code{\link{os_uj}()},
\code{\link{ply_uj}()},
\code{\link{put_uj}()},
\code{\link{reclass_uj}()},
\code{\link{recycling_uj}()},
\code{\link{reps_uj}()},
\code{\link{run_uj}()},
\code{\link{swap_uj}()},
\code{\link{values_uj}()},
\code{\link{x_uj}()},
\code{\link{xb_uj}()}

Other errs: 
\code{\link{errs_uj}()}
}
\concept{errs}
\concept{failsafe}
\concept{meta}
