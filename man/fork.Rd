% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fork.R
\name{fork}
\alias{fork}
\alias{f0}
\alias{f1}
\title{Robust extended functionality for \code{\link[base]{ifelse}}.}
\usage{
f0(x, y, n)

fork(x, y, n, na = n)

f1(x, y, n, na = n, err = n)
}
\arguments{
\item{x}{A logical scalar or vector is anticipated for \code{f0} and \code{f1} vs. \code{fork} respectively, but this argument may be any R object.}

\item{y, n}{Objects of any type for \code{f0} and \code{f1}. \link[=atm_scl]{Atomic scalars} or \link[=atm_vec]{atomic vecs} of the same length as \code{test} for \code{fork}.}

\item{na}{An object of any type for \code{f1}. An atomic scalar \link[=compatible]{compatible} with \code{yes} and \code{no} for \code{fork}, with the additional possibility of \code{na = 'err'} to indicate an error should be thrown if any values in \code{test} are \code{na}.}

\item{err}{Either \code{'err'} or an object to be returned when \code{test} is not an atomic scalar in \code{c(TRUE, FALSE, NA)}.}
}
\value{
\tabular{rl}{
  \code{fork} \tab   A length-\code{length(x)} atomic object.
\cr \code{f0} \tab   An R object.
\cr \code{f1} \tab   An R object.
}
}
\description{
\tabular{rl}{
\code{fork}   \tab Evaluates logical scalar or logical vector \code{test} and return an object of the same length as \code{test} where:
\cr        \tab \itemize{
\item \code{TRUE} values of \code{test} are replaced by corresponding values of \code{yes}.
\item \code{FALSE} values of \code{test} are replaced by corresponding values of \code{no}.
\item \code{NA} values of \code{test} are replaced by \code{na} (unless \code{na = 'err'}, in which case if there are any \code{NA} values in \code{test}, throws an error).
}
\cr        \tab   
\cr \code{f0}   \tab If \code{test} is scalar \code{TRUE}, returns \code{yes}. If \code{test} is anything else, returns \code{no}.
\cr        \tab   
\cr \code{f1}   \tab Error-checked version of \code{f0}. Evaluates and processes logical scalar \code{test} in the following manner:
\cr        \tab \itemize{
\item If \code{test = TRUE}, returns \code{yes}.
\item If \code{test = FALSE}, returns \code{no}.
\item If \code{test = NA}, returns \code{na} unless \code{na = 'err'}, in which case, an error is thrown.
\item If \code{test} is neither a logical scalar nor scalar \code{NA}, returns \code{err} unless \code{err = 'err'}, in which case an error is thrown.
}
}
}
\examples{
Vec. <- sample(c(TRUE, FALSE, NA), 10, replace = TRUE)
Yes. <- list(a = "yes", b = "yes")
No. <- data.frame(a = "no", b = "no")

Vec.
Yes.
No.

fork(Vec., "y", "n", na = "NA")
fork(Vec., "y", "n")

f0(FALSE, Yes., No.)
f0(TRUE, Yes., No.)
f0(Vec., Yes., No.)
f0(No., Yes., Vec.)
f0(NA, Yes., No.)

f1(FALSE, Yes., No.)
f1(TRUE, Yes., No.)

f1(NA, Yes., No., na = Vec.)
f1(NA, Yes., No.)

f1(7, Yes., No., err = Vec.)
f1(7, Yes., No.)
}
\seealso{
Other forks: 
\code{\link{case}()},
\code{\link{swap}()}
}
\concept{forks}
