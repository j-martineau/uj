% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fx.R
\name{fork}
\alias{fork}
\alias{f0}
\alias{f1}
\title{Forking as an Extension of \code{base::ifelse}}
\usage{
fork(test, yes, no, na = "err")

f0(test, yes, no)

f1(test, yes, no, na = no, err = no)
}
\arguments{
\item{test}{A logical scalar or vector is anticipated, but this argument may
be any R object.}

\item{yes, no}{Objects of any type for \code{f0} and \code{f1}. \link[=atm_scl]{Atomic
scalars} or \link[=atm_vec]{atomic vecs} of the same length as \code{test} for
\code{fork}.}

\item{na}{An object of any type for \code{f1}. An \link[=atm_scl]{atomic scalar}
\link[=compatible]{compatible} with \code{yes} and \code{no} for \code{fork}, with the
additional possibility of \code{na = 'err'} to indicate an error should be
thrown if any values in \code{test} are \code{na}.}

\item{err}{\code{'err'} or an object to be returned when \code{test} is not an atomic
scalar in \code{c(TRUE, FALSE, NA)}.}
}
\value{
An R object.
}
\description{
Robust extended functionality for \code{\link[base]{ifelse}}.
\tabular{ll}{
FUNCTION   \tab WHAT IT DOES                                            \cr
\code{fork}     \tab Evaluate logical scalar or logical vector \code{test} and return
an object of the same length as \code{test} where:\itemize{
\item \code{TRUE} values of \code{test} are replaced by corresponding
values of \code{yes}.
\item \code{FALSE} values of \code{test} are replaced by
corresponding values of \code{no}.
\item \code{NA} values of \code{test} are replaced by \code{na} (unless
\code{na = 'err'}, in which case if there are any \code{na}
values in \code{test}, throws an error).              }\cr
\code{f0}       \tab If \code{test} is scalar \code{TRUE}, returns \code{yes}. If \code{test} is
anything else, returns \code{no}.                            \cr
\code{f1}       \tab Error-checked version of \code{f0}. Evaluates and processes
logical scalar \code{test} in the following manner:\itemize{
\item If \code{test = NA}, returns \code{yes}.
\item If \code{test = FALSE}, returns \code{no}.
\item If \code{test = NA}, returns \code{na} unless \code{na = 'err'}, in
which case, an error is thrown.
\item If \code{test} is neither a logical scalar nor scalar
\code{na}, returns \code{err} unless \code{err = 'err'}, in which
case an error is thrown.                           }}
}
\seealso{
Other extensions: 
\code{\link{atomize}},
\code{\link{binfuns}},
\code{\link{callers}()},
\code{\link{case}()},
\code{\link{dots_uj}},
\code{\link{envir_vals}},
\code{\link{ex}()},
\code{\link{failsafe}()},
\code{\link{files_uj}},
\code{\link{fsub}()},
\code{\link{is_failsafe}},
\code{\link{is_unq}()},
\code{\link{make_uj}},
\code{\link{n_is}()},
\code{\link{n_th}()},
\code{\link{naming}},
\code{\link{na}()},
\code{\link{os}()},
\code{\link{pause}()},
\code{\link{ply}()},
\code{\link{put}()},
\code{\link{reclass}()},
\code{\link{recycling}},
\code{\link{removal}},
\code{\link{run}()},
\code{\link{stats0}},
\code{\link{swap}()},
\code{\link{uj_logicals}},
\code{\link{xb}()}

Other forking: 
\code{\link{case}()},
\code{\link{swap}()}
}
\concept{extensions}
\concept{forking}
