% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/files.R
\name{files.}
\alias{files.}
\alias{is_path}
\alias{as_path}
\alias{object_path}
\alias{parent_path}
\alias{object_name}
\alias{parent_name}
\alias{object_dirs}
\alias{parent_dirs}
\alias{newdirs}
\title{Evaluate and manipulate paths to files or folders on disk.}
\usage{
files.()

is_path(..., err = F)

as_path(...)

object_path(path, err = T)

parent_path(path, err = T)

object_name(path, err = T)

parent_name(path, err = T)

object_dirs(path, err = T)

parent_dirs(path, err = T)

newdirs(dirs, path = NULL)
}
\arguments{
\item{...}{Atomic arguments pasted to create}

\item{err}{\link[cmp_atm_scl]{Complete logical scalar} indicating whether an
error should be thrown if \code{...} is not a valid object path when
collapsed to a character scalar.}

\item{path}{\link[cmp_chr_scl]{Complete character scalar} path to either a
directory or a file.}

\item{dirs}{\link[cmp_chr_vec]{Complete character vec} of new sub-directory
names.}
}
\value{
\strong{\code{is_path}}: A logical scalar. \strong{\code{object_path,
  folder_path, object_name, folder_name}}: A character scalar.
\strong{\code{object_dirs, folder_dirs}}: A character vector.
}
\description{
Evaluate and manipulate paths to files or folders on disk.
}
\details{
In most cases, if (optionally) specified, functions throw an error
if \code{...} does not resolve to a valid object path
}
\section{Functions}{
\itemize{
\item \code{is_path()}: Check whether \code{...} resolves to a valid path for an
object (file or folder) when arguments in \code{...} are collapsed into a
character scalar.

\item \code{as_path()}: Collapse \code{...} into a path using the current
platform file path separator (\code{.Platform$file.sep}).

\item \code{object_path()}: Collapse \code{...} into a character scalar and expands
the path to the object indicated by the result to account for relative
paths.

\item \code{parent_path()}: Call \code{object_path} and extracts from the resulting
character scalar just the path to the parent folder of the object specified
by \code{...} (i.e., discarding the name of the object itself).

\item \code{object_name()}: Calls \code{object_path} and extracts from the resulting
character scalar just the name of the object, discarding the path to its
parent.

\item \code{parent_name()}: Call \code{parent_path} and extracts from the resulting
character scalar just the name of last folder in the path

\item \code{object_dirs()}: Call \code{object_path} and splits the resulting
character scalar into a character vector containing the name of the root
folder, the names of any intermediate folders, the name of the parent
folder of the object, and the name of the object.

\item \code{parent_dirs()}: Call \code{folder_path} and splits the resulting
character scalar into a character vector containing the name of the root
folder, the names of any intermediate folders, and the name of the parent
folder of the object specified by \code{...}.

\item \code{newdirs()}: Create sub-directories within an existing directory,
optionally asking the user to choose an existing directory.

}}
\seealso{
Other extensions: 
\code{\link{a.}()},
\code{\link{binfuns.}()},
\code{\link{callers.}()},
\code{\link{case.}()},
\code{\link{dots.}()},
\code{\link{ex.}()},
\code{\link{failsafe.}()},
\code{\link{fork.}()},
\code{\link{fsub.}()},
\code{\link{is_failsafe.}()},
\code{\link{is_unq.}()},
\code{\link{logicals.}()},
\code{\link{make.}()},
\code{\link{n_th.}()},
\code{\link{na.}()},
\code{\link{naming.}()},
\code{\link{nx.}()},
\code{\link{os.}()},
\code{\link{pause.}()},
\code{\link{ply.}()},
\code{\link{put.}()},
\code{\link{reclass.}()},
\code{\link{recycling.}()},
\code{\link{run.}()},
\code{\link{stats.}()},
\code{\link{swap.}()},
\code{\link{values.}()},
\code{\link{x.}()},
\code{\link{xb.}()}
}
\concept{extensions}
\concept{files}
