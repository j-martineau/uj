% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/delim.R
\name{delim}
\alias{delim}
\alias{da}
\alias{dw}
\alias{daw}
\alias{dwa}
\alias{da0}
\alias{da1}
\alias{daD}
\alias{daP}
\alias{daB}
\alias{dw0}
\alias{dw1}
\alias{dwD}
\alias{dwP}
\alias{dwB}
\alias{daw00}
\alias{daw01}
\alias{daw0D}
\alias{daw0P}
\alias{daw0B}
\alias{daw10}
\alias{daw11}
\alias{daw1D}
\alias{daw1P}
\alias{daw1B}
\alias{dawD0}
\alias{dawD1}
\alias{dawDD}
\alias{dawDP}
\alias{dawDB}
\alias{dawP0}
\alias{dawP1}
\alias{dawPD}
\alias{dawPP}
\alias{dawPB}
\alias{dawB0}
\alias{dawB1}
\alias{dawBD}
\alias{dawBP}
\alias{dawBB}
\alias{dwa00}
\alias{dwa01}
\alias{dwa0D}
\alias{dwa0P}
\alias{dwa0B}
\alias{dwa10}
\alias{dwa11}
\alias{dwa1D}
\alias{dwa1P}
\alias{dwa1B}
\alias{dwaD0}
\alias{dwaD1}
\alias{dwaDD}
\alias{dwaDP}
\alias{dwaDB}
\alias{dwaP0}
\alias{dwaP1}
\alias{dwaPD}
\alias{dwaPP}
\alias{dwaPB}
\alias{dwaB0}
\alias{dwaB1}
\alias{dwaBD}
\alias{dwaBP}
\alias{dwaBB}
\title{Delimit strings}
\usage{
da(..., a. = " ")

dw(..., w. = " ")

daw(..., a. = "", w. = "")

dwa(..., w. = "", a. = "")

da0(...)

da1(...)

daD(...)

daP(...)

daB(...)

dw0(...)

dw1(...)

dwD(...)

dwP(...)

dwB(...)

daw00(...)

daw01(...)

daw0D(...)

daw0P(...)

daw0B(...)

daw10(...)

daw11(...)

daw1D(...)

daw1P(...)

daw1B(...)

dawD0(...)

dawD1(...)

dawDD(...)

dawDP(...)

dawDB(...)

dawP0(...)

dawP1(...)

dawPD(...)

dawPP(...)

dawPB(...)

dawB0(...)

dawB1(...)

dawBD(...)

dawBP(...)

dawBB(...)

dwa00(...)

dwa01(...)

dwa0D(...)

dwa0P(...)

dwa0B(...)

dwa10(...)

dwa11(...)

dwa1D(...)

dwa1P(...)

dwa1B(...)

dwaD0(...)

dwaD1(...)

dwaDD(...)

dwaDP(...)

dwaDB(...)

dwaP0(...)

dwaP1(...)

dwaPD(...)

dwaPP(...)

dwaPB(...)

dwaB0(...)

dwaB1(...)

dwaBD(...)

dwaBP(...)

dwaBB(...)
}
\arguments{
\item{...}{An arbitrary number of atomic vector arguments to be delimited.
Argument in \code{...} must be recyclable for \code{da}, \code{daw},
\code{dax}, and \code{dawxy}.}

\item{a., w.}{Character scalar across delimiter vs. within delimiter,
respectively. Defaults to a blank string (i.e., \code{""}).}
}
\value{
A character scalar, character vector, or list of character vectors.
}
\description{
Simplifies and extends \code{paste} and \code{paste0}, allowing
for 'delimiting across' and 'delimiting within' arguments in \code{...},
and a combination of delimiting within and across arguments, in any order.
Also offers convenience functions for specific delimiters.
}
\details{
\strong{code{da}}
\cr Delimits across corresponding elements of arguments in \code{...}.
\code{da(..., a. = value)} is identical to \code{paste(..., sep = value)}.
\cr\cr
\strong{\code{dw}}
\cr Delimits within arguments in \code{...}. \code{dw(..., w. = value)} is
equivalent to calling \code{sapply(list(...), paste0, collapse = value)}.
\cr\cr
\strong{\code{daw}}
\cr Delimits across then within \code{daw(..., a. = a.val, w. = w.val)} is
identical to \code{paste(..., sep = a.val, collapse = w.val)}
\cr\cr
\strong{\code{dwa}}
\cr Delimits within then across \code{dwa(..., w. = w.val, a. = a.val)} is
equivalent to \code{paste(sapply(list(...), paste0, collapse = dw), sep =
  a.val)}.
\cr\cr
\strong{Extensions}
\cr Functions are extended for specific delimiters, signified by the
following extension characters:
\tabular{lll}{
\strong{Character}\tab\strong{Name}\tab\strong{Delimiter Invoked}
\cr\code{'0'}     \tab Blank       \tab\code{""}
\cr\code{'1'}     \tab Space       \tab\code{" "}
\cr\code{'D'}     \tab Dot         \tab\code{"."}
\cr\code{'P'}     \tab Pipe        \tab\code{"|"}
\cr\code{'B'}     \tab Broken Pipe \tab\code{"Â¦"}
  }
\strong{\code{daA}}
\cr Delimits across using the extension character A.
\cr\cr
\strong{\code{dwW}}
\cr Delimits within using the extension character W.
\cr\cr
\strong{\code{dawAW}}
\cr Delimits across using the extension character A then delimits within
using the extension character W.
\cr\cr
\strong{\code{dwaWA}}
\cr Delimits within using the extension character W then delimits across
using the extension character A.
}
\seealso{
Other strings: 
\code{\link{Oxford}},
\code{\link{ipat}()},
\code{\link{pgrid}()},
\code{\link{spacing}},
\code{\link{ss}()},
\code{\link{tocase}()},
\code{\link{weave}()}
}
\concept{strings}
