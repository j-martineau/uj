% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/delim.R
\encoding{UTF-8}
\name{delim}
\alias{delim}
\alias{da}
\alias{dw}
\alias{daw}
\alias{dww}
\alias{da_0}
\alias{da_1}
\alias{da0}
\alias{da1}
\alias{da_b}
\alias{da_c}
\alias{da_d}
\alias{da_g}
\alias{da_p}
\alias{da_q}
\alias{da_s}
\alias{da_t}
\alias{dw_0}
\alias{dw0}
\alias{dw_1}
\alias{dw1}
\alias{dw_b}
\alias{dw_c}
\alias{dw_d}
\alias{dw_g}
\alias{dw_p}
\alias{dw_q}
\alias{dw_s}
\alias{dw_t}
\alias{daw_00}
\alias{daw_01}
\alias{daw00}
\alias{daw01}
\alias{daw_0b}
\alias{daw_0c}
\alias{daw_0d}
\alias{daw_0g}
\alias{daw_0p}
\alias{daw_0q}
\alias{daw_0s}
\alias{daw_0t}
\alias{daw_10}
\alias{daw_11}
\alias{daw10}
\alias{daw11}
\alias{daw_1b}
\alias{daw_1c}
\alias{daw_1d}
\alias{daw_1g}
\alias{daw_1p}
\alias{daw_1q}
\alias{daw_1s}
\alias{daw_1t}
\alias{daw_b0}
\alias{daw_b1}
\alias{daw_bb}
\alias{daw_bc}
\alias{daw_bd}
\alias{daw_bg}
\alias{daw_bp}
\alias{daw_bq}
\alias{daw_bs}
\alias{daw_bt}
\alias{daw_c0}
\alias{daw_c1}
\alias{daw_cb}
\alias{daw_cc}
\alias{daw_cd}
\alias{daw_cg}
\alias{daw_cp}
\alias{daw_cq}
\alias{daw_cs}
\alias{daw_ct}
\alias{daw_d0}
\alias{daw_d1}
\alias{daw_db}
\alias{daw_dc}
\alias{daw_dd}
\alias{daw_dg}
\alias{daw_dp}
\alias{daw_dq}
\alias{daw_ds}
\alias{daw_dt}
\alias{daw_g0}
\alias{daw_g1}
\alias{daw_gb}
\alias{daw_gc}
\alias{daw_gd}
\alias{daw_gg}
\alias{daw_gp}
\alias{daw_gq}
\alias{daw_gs}
\alias{daw_gt}
\alias{daw_p0}
\alias{daw_p1}
\alias{daw_pb}
\alias{daw_pc}
\alias{daw_pd}
\alias{daw_pg}
\alias{daw_pp}
\alias{daw_pq}
\alias{daw_ps}
\alias{daw_pt}
\alias{daw_q0}
\alias{daw_q1}
\alias{daw_qb}
\alias{daw_qc}
\alias{daw_qd}
\alias{daw_qg}
\alias{daw_qp}
\alias{daw_qq}
\alias{daw_qs}
\alias{daw_qt}
\alias{daw_s0}
\alias{daw_s1}
\alias{daw_sb}
\alias{daw_sc}
\alias{daw_sd}
\alias{daw_sg}
\alias{daw_sp}
\alias{daw_sq}
\alias{daw_ss}
\alias{daw_st}
\alias{daw_t0}
\alias{daw_t1}
\alias{daw_tb}
\alias{daw_tc}
\alias{daw_td}
\alias{daw_tg}
\alias{daw_tp}
\alias{daw_tq}
\alias{daw_ts}
\alias{daw_tt}
\alias{dww_00}
\alias{dww_01}
\alias{dww_0b}
\alias{dww_0c}
\alias{dww_0d}
\alias{dww_0g}
\alias{dww_0p}
\alias{dww_0q}
\alias{dww_0s}
\alias{dww_0t}
\alias{dww_10}
\alias{dww_11}
\alias{dww_1b}
\alias{dww_1c}
\alias{dww_1d}
\alias{dww_1g}
\alias{dww_1p}
\alias{dww_1q}
\alias{dww_1s}
\alias{dww_1t}
\alias{dww_b0}
\alias{dww_b1}
\alias{dww_bb}
\alias{dww_bc}
\alias{dww_bd}
\alias{dww_bg}
\alias{dww_bp}
\alias{dww_bq}
\alias{dww_bs}
\alias{dww_bt}
\alias{dww_c0}
\alias{dww_c1}
\alias{dww_cb}
\alias{dww_cc}
\alias{dww_cd}
\alias{dww_cg}
\alias{dww_cp}
\alias{dww_cq}
\alias{dww_cs}
\alias{dww_ct}
\alias{dww_d0}
\alias{dww_d1}
\alias{dww_db}
\alias{dww_dc}
\alias{dww_dd}
\alias{dww_dg}
\alias{dww_dp}
\alias{dww_dq}
\alias{dww_ds}
\alias{dww_dt}
\alias{dww_g0}
\alias{dww_g1}
\alias{dww_gb}
\alias{dww_gc}
\alias{dww_gd}
\alias{dww_gg}
\alias{dww_gp}
\alias{dww_gq}
\alias{dww_gs}
\alias{dww_gt}
\alias{dww_p0}
\alias{dww_p1}
\alias{dww_pb}
\alias{dww_pc}
\alias{dww_pd}
\alias{dww_pg}
\alias{dww_pp}
\alias{dww_pq}
\alias{dww_ps}
\alias{dww_pt}
\alias{dww_q0}
\alias{dww_q1}
\alias{dww_qb}
\alias{dww_qc}
\alias{dww_qd}
\alias{dww_qg}
\alias{dww_qp}
\alias{dww_qq}
\alias{dww_qs}
\alias{dww_qt}
\alias{dww_s0}
\alias{dww_s1}
\alias{dww_sb}
\alias{dww_sc}
\alias{dww_sd}
\alias{dww_sg}
\alias{dww_sp}
\alias{dww_sq}
\alias{dww_ss}
\alias{dww_st}
\alias{dww_t0}
\alias{dww_t1}
\alias{dww_tb}
\alias{dww_tc}
\alias{dww_td}
\alias{dww_tg}
\alias{dww_tp}
\alias{dww_tq}
\alias{dww_ts}
\alias{dww_tt}
\title{Error-checked string delimiting}
\usage{
delim()

da(d, ...)

dw(d, ...)

daw(d, D, ...)

dww(d, D, ...)

da_0(...)

da_1(...)

da0(...)

da1(...)

da_b(...)

da_c(...)

da_d(...)

da_g(...)

da_p(...)

da_q(...)

da_s(...)

da_t(...)

dw_0(...)

dw0(...)

dw_1(...)

dw1(...)

dw_b(...)

dw_c(...)

dw_d(...)

dw_g(...)

dw_p(...)

dw_q(...)

dw_s(...)

dw_t(...)

daw_00(...)

daw_01(...)

daw00(...)

daw01(...)

daw_0b(...)

daw_0c(...)

daw_0d(...)

daw_0g(...)

daw_0p(...)

daw_0q(...)

daw_0s(...)

daw_0t(...)

daw_10(...)

daw_11(...)

daw10(...)

daw11(...)

daw_1b(...)

daw_1c(...)

daw_1d(...)

daw_1g(...)

daw_1p(...)

daw_1q(...)

daw_1s(...)

daw_1t(...)

daw_b0(...)

daw_b1(...)

daw_bb(...)

daw_bc(...)

daw_bd(...)

daw_bg(...)

daw_bp(...)

daw_bq(...)

daw_bs(...)

daw_bt(...)

daw_c0(...)

daw_c1(...)

daw_cb(...)

daw_cc(...)

daw_cd(...)

daw_cg(...)

daw_cp(...)

daw_cq(...)

daw_cs(...)

daw_ct(...)

daw_d0(...)

daw_d1(...)

daw_db(...)

daw_dc(...)

daw_dd(...)

daw_dg(...)

daw_dp(...)

daw_dq(...)

daw_ds(...)

daw_dt(...)

daw_g0(...)

daw_g1(...)

daw_gb(...)

daw_gc(...)

daw_gd(...)

daw_gg(...)

daw_gp(...)

daw_gq(...)

daw_gs(...)

daw_gt(...)

daw_p0(...)

daw_p1(...)

daw_pb(...)

daw_pc(...)

daw_pd(...)

daw_pg(...)

daw_pp(...)

daw_pq(...)

daw_ps(...)

daw_pt(...)

daw_q0(...)

daw_q1(...)

daw_qb(...)

daw_qc(...)

daw_qd(...)

daw_qg(...)

daw_qp(...)

daw_qq(...)

daw_qs(...)

daw_qt(...)

daw_s0(...)

daw_s1(...)

daw_sb(...)

daw_sc(...)

daw_sd(...)

daw_sg(...)

daw_sp(...)

daw_sq(...)

daw_ss(...)

daw_st(...)

daw_t0(...)

daw_t1(...)

daw_tb(...)

daw_tc(...)

daw_td(...)

daw_tg(...)

daw_tp(...)

daw_tq(...)

daw_ts(...)

daw_tt(...)

dww_00(...)

dww_01(...)

dww_0b(...)

dww_0c(...)

dww_0d(...)

dww_0g(...)

dww_0p(...)

dww_0q(...)

dww_0s(...)

dww_0t(...)

dww_10(...)

dww_11(...)

dww_1b(...)

dww_1c(...)

dww_1d(...)

dww_1g(...)

dww_1p(...)

dww_1q(...)

dww_1s(...)

dww_1t(...)

dww_b0(...)

dww_b1(...)

dww_bb(...)

dww_bc(...)

dww_bd(...)

dww_bg(...)

dww_bp(...)

dww_bq(...)

dww_bs(...)

dww_bt(...)

dww_c0(...)

dww_c1(...)

dww_cb(...)

dww_cc(...)

dww_cd(...)

dww_cg(...)

dww_cp(...)

dww_cq(...)

dww_cs(...)

dww_ct(...)

dww_d0(...)

dww_d1(...)

dww_db(...)

dww_dc(...)

dww_dd(...)

dww_dg(...)

dww_dp(...)

dww_dq(...)

dww_ds(...)

dww_dt(...)

dww_g0(...)

dww_g1(...)

dww_gb(...)

dww_gc(...)

dww_gd(...)

dww_gg(...)

dww_gp(...)

dww_gq(...)

dww_gs(...)

dww_gt(...)

dww_p0(...)

dww_p1(...)

dww_pb(...)

dww_pc(...)

dww_pd(...)

dww_pg(...)

dww_pp(...)

dww_pq(...)

dww_ps(...)

dww_pt(...)

dww_q0(...)

dww_q1(...)

dww_qb(...)

dww_qc(...)

dww_qd(...)

dww_qg(...)

dww_qp(...)

dww_qq(...)

dww_qs(...)

dww_qt(...)

dww_s0(...)

dww_s1(...)

dww_sb(...)

dww_sc(...)

dww_sd(...)

dww_sg(...)

dww_sp(...)

dww_sq(...)

dww_ss(...)

dww_st(...)

dww_t0(...)

dww_t1(...)

dww_tb(...)

dww_tc(...)

dww_td(...)

dww_tg(...)

dww_tp(...)

dww_tq(...)

dww_ts(...)

dww_tt(...)
}
\arguments{
\item{d, D}{\link[=chr_scl]{Character scalar} delimiters.}

\item{...}{An arbitrary number of atomic vector arguments to be delimited. Argument in \code{...} must be recyclable for functions that delimit across \code{...} arguments as the first or only step (i.e., functions with names beginning with \code{da}).}
}
\value{
\strong{A character scalar} \cr\cr \verb{daw_\{X\}\{y\}, dww_\{X\}\{y\}, daw, dww}
\cr\cr  \strong{A character vector} \cr\cr \verb{da_\{X\}, dw_\{X\}, da, dw}
}
\description{
Simplified and extended \code{base::paste} and \code{base::paste0}. There are both primary functions using user-specified delimiters and convenience functions for common delimiters.
}
\details{
\strong{Primary functions}
\tabular{ll}{  \code{dww}   \tab Delimit elements within each (atomic vector) \code{...} argument using delimiter \code{d}, then delimit elements within the resulting vector using delimiter
\code{D}. Produces a character scalar of \code{...length()} substrings delimited by \code{D} where each substring contains sub-substrings delimited by \code{d}.                \cr   \tab   \cr
  \code{daw}   \tab Delimit across corresponding elements of (recyclable atomic vector) \code{...} arguments using delimiter \code{d}, then delimit elements within the resulting
character vector using delimiter \code{D}. Produces a character scalar of \code{...length()} substrings delimited by \code{D} where each substring contains
\code{max(lengths(list(...)))} sub-substrings delimited by \code{d}.                                                                                                  \cr   \tab   \cr
  \code{dw}    \tab Delimits elements within each (atomic vector) \code{...} argument using delimiter \code{d}. Produces a character vector of \code{...length()} substrings delimited by \code{d}. \cr   \tab   \cr
  \code{da}    \tab Delimits across corresponding elements of (recyclable atomic vector) \code{...} arguments using delimiter \code{d}. Produces a character vector of
\code{max(lengths(list(...)))} substrings delimited by \code{d}.                                                                                                                     }
\cr \strong{Common-delimiter convenience functions}
\cr\cr Convenience function names are constructed by append \code{1} or \code{2} codes for common delimiters to the function name as follows (where \code{{X}} and \code{{y}} are placeholders for common-delimiter codes):
\tabular{ll}{  \verb{daw_\{X\}\{y\}}   \tab Delimits across using \code{{X}} then within using \code{{y}}. \cr   \tab   \cr
  \verb{dww_\{X\}\{y\}}   \tab Delimits within using \code{{X}} then again using \code{{y}}.  \cr   \tab   \cr
  \verb{da_\{X\}}       \tab Delimits across using \code{{X}}.                                     \cr
  \verb{dw_\{X\}}       \tab Delimits within using \code{{X}}.                                       }
\cr Common delimiters are encoded as:
\tabular{lll}{  \strong{Code}   \tab \strong{Name}                      \tab   \strong{Delimiter} \cr
  \code{'0'}      \tab blank                         \tab   \code{''}          \cr
  \code{'1'}      \tab space                         \tab   \code{' '}         \cr
  \code{'b'}      \tab broken pipe                   \tab   \code{'¦'}         \cr
  \code{'c'}      \tab colon                         \tab   \code{':'}         \cr
  \code{'d'}      \tab dot                           \tab   \code{'.'}         \cr
  \code{'g'}      \tab grammatical comma\eqn{^{(1)}} \tab   \code{', '}        \cr
  \code{'p'}      \tab pipe                          \tab   \code{'|'}         \cr
  \code{'q'}      \tab back-tick quote               \tab   \code{'``'}        \cr
  \code{'s'}      \tab simple comma\eqn{^{(1)}}      \tab   \code{','}         \cr
  \code{'t'}      \tab tilde                         \tab   \code{'~'}           }
\tabular{l}{  \eqn{^{(1)}} 'Grammatical comma' vs. 'simple comma' indicates whether the function produces grammatical comma-delimited lists vs. simple comma-delimited values (e.g., \code{'1, 2, 3'} vs. \code{'1,2,3'}). }
}
\examples{
# delimit across using delimiter '|'.
# aliases paste(1:3, 4:6, sep = '|').
da('|', 1:3, 4:6)

# delimit within using delimiter ':'.
# aliases sapply(list(1:3, 4:6), paste0, collapse = ':').
dw(':', 1:3, 4:6)

# delimit across using '|', then within using ':'
# aliases paste(..., sep = d, collapse = D)
daw('|', ':', 1:3, 4:6)

# delimit within using '|' then again within using ':'.
# aliases paste0(sapply(list(...), paste0, collapse = d), collapse = D).
dww('|', ':', 1:3, 4:6)

# delimit across using pipe (encoded by 'P' suffix in function name).
da_p(1:3, 4:6)

# delimit within using colon (encoded by 'C' suffix in function name).
dw_c(1:3, 4:6)

# delimit across using pipe, then within using colon.
daw_pc(1:3, 4:6)

# delimit within using colon, then again using pipe.
dww_cp(1:3, 4:6)
}
\seealso{
Other strings: 
\code{\link{blank}()},
\code{\link{chn}()},
\code{\link{fsub}()},
\code{\link{gr}},
\code{\link{ipat}()},
\code{\link{makestr}()},
\code{\link{markdown}()},
\code{\link{maxnch}()},
\code{\link{ox}()},
\code{\link{pgrid}()},
\code{\link{revstr}()},
\code{\link{spaces}()},
\code{\link{ss}()},
\code{\link{tocase}()},
\code{\link{weave}()}
}
\concept{strings}
