% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/delim.R
\name{delim}
\alias{delim}
\alias{da}
\alias{dw}
\alias{daw}
\alias{dww}
\alias{da0}
\alias{da1}
\alias{daB}
\alias{daC}
\alias{daD}
\alias{daG}
\alias{daP}
\alias{daQ}
\alias{daS}
\alias{daT}
\alias{dw0}
\alias{dw1}
\alias{dwB}
\alias{dwC}
\alias{dwD}
\alias{dwG}
\alias{dwP}
\alias{dwQ}
\alias{dwS}
\alias{dwT}
\alias{daw00}
\alias{daw01}
\alias{daw0B}
\alias{daw0C}
\alias{daw0D}
\alias{daw0G}
\alias{daw0P}
\alias{daw0Q}
\alias{daw0S}
\alias{daw0T}
\alias{daw10}
\alias{daw11}
\alias{daw1B}
\alias{daw1C}
\alias{daw1D}
\alias{daw1G}
\alias{daw1P}
\alias{daw1Q}
\alias{daw1S}
\alias{daw1T}
\alias{dawB0}
\alias{dawB1}
\alias{dawBB}
\alias{dawBC}
\alias{dawBD}
\alias{dawBG}
\alias{dawBP}
\alias{dawBQ}
\alias{dawBS}
\alias{dawBT}
\alias{dawC0}
\alias{dawC1}
\alias{dawCB}
\alias{dawCC}
\alias{dawCD}
\alias{dawCG}
\alias{dawCP}
\alias{dawCQ}
\alias{dawCS}
\alias{dawCT}
\alias{dawD0}
\alias{dawD1}
\alias{dawDB}
\alias{dawDC}
\alias{dawDD}
\alias{dawDG}
\alias{dawDP}
\alias{dawDQ}
\alias{dawDS}
\alias{dawDT}
\alias{dawG0}
\alias{dawG1}
\alias{dawGB}
\alias{dawGC}
\alias{dawGD}
\alias{dawGG}
\alias{dawGP}
\alias{dawGQ}
\alias{dawGS}
\alias{dawGT}
\alias{dawP0}
\alias{dawP1}
\alias{dawPB}
\alias{dawPC}
\alias{dawPD}
\alias{dawPG}
\alias{dawPP}
\alias{dawPQ}
\alias{dawPS}
\alias{dawPT}
\alias{dawQ0}
\alias{dawQ1}
\alias{dawQB}
\alias{dawQC}
\alias{dawQD}
\alias{dawQG}
\alias{dawQP}
\alias{dawQQ}
\alias{dawQS}
\alias{dawQT}
\alias{dawS0}
\alias{dawS1}
\alias{dawSB}
\alias{dawSC}
\alias{dawSD}
\alias{dawSG}
\alias{dawSP}
\alias{dawSQ}
\alias{dawSS}
\alias{dawST}
\alias{dawT0}
\alias{dawT1}
\alias{dawTB}
\alias{dawTC}
\alias{dawTD}
\alias{dawTG}
\alias{dawTP}
\alias{dawTQ}
\alias{dawTS}
\alias{dawTT}
\alias{dww00}
\alias{dww01}
\alias{dww0B}
\alias{dww0C}
\alias{dww0D}
\alias{dww0G}
\alias{dww0P}
\alias{dww0Q}
\alias{dww0S}
\alias{dww0T}
\alias{dww10}
\alias{dww11}
\alias{dww1B}
\alias{dww1C}
\alias{dww1D}
\alias{dww1G}
\alias{dww1P}
\alias{dww1Q}
\alias{dww1S}
\alias{dww1T}
\alias{dwwB0}
\alias{dwwB1}
\alias{dwwBB}
\alias{dwwBC}
\alias{dwwBD}
\alias{dwwBG}
\alias{dwwBP}
\alias{dwwBQ}
\alias{dwwBS}
\alias{dwwBT}
\alias{dwwC0}
\alias{dwwC1}
\alias{dwwCB}
\alias{dwwCC}
\alias{dwwCD}
\alias{dwwCG}
\alias{dwwCP}
\alias{dwwCQ}
\alias{dwwCS}
\alias{dwwCT}
\alias{dwwD0}
\alias{dwwD1}
\alias{dwwDB}
\alias{dwwDC}
\alias{dwwDD}
\alias{dwwDG}
\alias{dwwDP}
\alias{dwwDQ}
\alias{dwwDS}
\alias{dwwDT}
\alias{dwwG0}
\alias{dwwG1}
\alias{dwwGB}
\alias{dwwGC}
\alias{dwwGD}
\alias{dwwGG}
\alias{dwwGP}
\alias{dwwGQ}
\alias{dwwGS}
\alias{dwwGT}
\alias{dwwP0}
\alias{dwwP1}
\alias{dwwPB}
\alias{dwwPC}
\alias{dwwPD}
\alias{dwwPG}
\alias{dwwPP}
\alias{dwwPQ}
\alias{dwwPS}
\alias{dwwPT}
\alias{dwwQ0}
\alias{dwwQ1}
\alias{dwwQB}
\alias{dwwQC}
\alias{dwwQD}
\alias{dwwQG}
\alias{dwwQP}
\alias{dwwQQ}
\alias{dwwQS}
\alias{dwwQT}
\alias{dwwS0}
\alias{dwwS1}
\alias{dwwSB}
\alias{dwwSC}
\alias{dwwSD}
\alias{dwwSG}
\alias{dwwSP}
\alias{dwwSQ}
\alias{dwwSS}
\alias{dwwST}
\alias{dwwT0}
\alias{dwwT1}
\alias{dwwTB}
\alias{dwwTC}
\alias{dwwTD}
\alias{dwwTG}
\alias{dwwTP}
\alias{dwwTQ}
\alias{dwwTS}
\alias{dwwTT}
\title{Error-Checked String Delimiting (variations on a theme of
\code{paste}).}
\usage{
da(d, ...)

dw(d, ...)

daw(d, D, ...)

dww(d, D, ...)

da0(...)

da1(...)

daB(...)

daC(...)

daD(...)

daG(...)

daP(...)

daQ(...)

daS(...)

daT(...)

dw0(...)

dw1(...)

dwB(...)

dwC(...)

dwD(...)

dwG(...)

dwP(...)

dwQ(...)

dwS(...)

dwT(...)

daw00(...)

daw01(...)

daw0B(...)

daw0C(...)

daw0D(...)

daw0G(...)

daw0P(...)

daw0Q(...)

daw0S(...)

daw0T(...)

daw10(...)

daw11(...)

daw1B(...)

daw1C(...)

daw1D(...)

daw1G(...)

daw1P(...)

daw1Q(...)

daw1S(...)

daw1T(...)

dawB0(...)

dawB1(...)

dawBB(...)

dawBC(...)

dawBD(...)

dawBG(...)

dawBP(...)

dawBQ(...)

dawBS(...)

dawBT(...)

dawC0(...)

dawC1(...)

dawCB(...)

dawCC(...)

dawCD(...)

dawCG(...)

dawCP(...)

dawCQ(...)

dawCS(...)

dawCT(...)

dawD0(...)

dawD1(...)

dawDB(...)

dawDC(...)

dawDD(...)

dawDG(...)

dawDP(...)

dawDQ(...)

dawDS(...)

dawDT(...)

dawG0(...)

dawG1(...)

dawGB(...)

dawGC(...)

dawGD(...)

dawGG(...)

dawGP(...)

dawGQ(...)

dawGS(...)

dawGT(...)

dawP0(...)

dawP1(...)

dawPB(...)

dawPC(...)

dawPD(...)

dawPG(...)

dawPP(...)

dawPQ(...)

dawPS(...)

dawPT(...)

dawQ0(...)

dawQ1(...)

dawQB(...)

dawQC(...)

dawQD(...)

dawQG(...)

dawQP(...)

dawQQ(...)

dawQS(...)

dawQT(...)

dawS0(...)

dawS1(...)

dawSB(...)

dawSC(...)

dawSD(...)

dawSG(...)

dawSP(...)

dawSQ(...)

dawSS(...)

dawST(...)

dawT0(...)

dawT1(...)

dawTB(...)

dawTC(...)

dawTD(...)

dawTG(...)

dawTP(...)

dawTQ(...)

dawTS(...)

dawTT(...)

dww00(...)

dww01(...)

dww0B(...)

dww0C(...)

dww0D(...)

dww0G(...)

dww0P(...)

dww0Q(...)

dww0S(...)

dww0T(...)

dww10(...)

dww11(...)

dww1B(...)

dww1C(...)

dww1D(...)

dww1G(...)

dww1P(...)

dww1Q(...)

dww1S(...)

dww1T(...)

dwwB0(...)

dwwB1(...)

dwwBB(...)

dwwBC(...)

dwwBD(...)

dwwBG(...)

dwwBP(...)

dwwBQ(...)

dwwBS(...)

dwwBT(...)

dwwC0(...)

dwwC1(...)

dwwCB(...)

dwwCC(...)

dwwCD(...)

dwwCG(...)

dwwCP(...)

dwwCQ(...)

dwwCS(...)

dwwCT(...)

dwwD0(...)

dwwD1(...)

dwwDB(...)

dwwDC(...)

dwwDD(...)

dwwDG(...)

dwwDP(...)

dwwDQ(...)

dwwDS(...)

dwwDT(...)

dwwG0(...)

dwwG1(...)

dwwGB(...)

dwwGC(...)

dwwGD(...)

dwwGG(...)

dwwGP(...)

dwwGQ(...)

dwwGS(...)

dwwGT(...)

dwwP0(...)

dwwP1(...)

dwwPB(...)

dwwPC(...)

dwwPD(...)

dwwPG(...)

dwwPP(...)

dwwPQ(...)

dwwPS(...)

dwwPT(...)

dwwQ0(...)

dwwQ1(...)

dwwQB(...)

dwwQC(...)

dwwQD(...)

dwwQG(...)

dwwQP(...)

dwwQQ(...)

dwwQS(...)

dwwQT(...)

dwwS0(...)

dwwS1(...)

dwwSB(...)

dwwSC(...)

dwwSD(...)

dwwSG(...)

dwwSP(...)

dwwSQ(...)

dwwSS(...)

dwwST(...)

dwwT0(...)

dwwT1(...)

dwwTB(...)

dwwTC(...)

dwwTD(...)

dwwTG(...)

dwwTP(...)

dwwTQ(...)

dwwTS(...)

dwwTT(...)
}
\arguments{
\item{d, D}{\link[=chr_scl]{Character scalar} delimiters.}

\item{...}{An arbitrary number of atomic vector arguments to be delimited.
Argument in \code{...} must be recyclable for functions that delimit across
arguments in \code{...} as the first or only step (i.e., functions with
names beginning with \code{da}).}
}
\value{
\tabular{lll}{
\code{da}, \code{dw}, \code{da[d]}, and \code{dw[d]}
\tab    \tab A character vector.                                   \cr
\code{daw}, \code{dww}, \code{daw[d][D]}, and code{dww\link[=D]{d}}
\tab    \tab A character scalar.                                     }
}
\description{
Simplifies and extends \code{paste} and \code{paste0}, allowing
for 'delimiting across' and 'delimiting within' arguments in \code{...},
and a combination of delimiting within and across arguments, in any order.
Also offers convenience functions for specific delimiters.
\cr\cr
\strong{\code{da(d, ...)}}
\cr Delimits across corresponding elements of arguments in \code{...} using
the delimiter \code{d}. Thus, \code{da("|", 1:3, 4:6)} produces
\code{c('1|4', '2|5', '3|6')}, which is also the result of calling
\code{paste(1:3, 4:6, sep = '|')}.
\cr\cr
\strong{\code{dw(d, ...)}}
\cr Delimits within arguments in \code{...} using the delimiter \code{d}.
Thus, \code{dw(":", 1:3, 4:6)} produces \code{c('1:2:3', '4:5:6')}, which
is also the result of calling \code{sapply(list(1:3, 4:6), paste0, collapse
  = "|"}).
\cr\cr
\strong{\code{daw(d, D, ...)}}
\cr Delimits across arguments in \code{...} using the first delimiter
\code{d}, then delimits within the resulting vector using the delimiter
\code{D}. Thus, \code{daw('|', ':', 1:3, 4:6)} produces
\code{'1|4:2|5:3:6'}, which is also the result of calling \code{paste(1:3,
  4:6, sep = '|', collapse = ':')}.
\cr\cr
\strong{\code{dww(d, D, ...)}}
\cr Delimits within arguments in \code{...} using the delimiter \code{d},
then delimits within the resulting vector using the delimiter \code{D}.
Thus, \code{dww(':', '|', 1:3, 4:6)} produces \code{'1:2:3|4:5:6'}, which
is also the result of calling \code{paste0(sapply(list(1:3, 4:6), paste0,
  collapse = ":"), collapse = "|")}.
\cr\cr
\strong{Delimiter-Specific Extension Functions}
\cr Delimiter-specific functions are available for convenience for common
delimiters and for any combination of two common delimiters. Common
delimiters and their extension characters are shown in the following
table:\tabular{lll}{
EXTENSION   \tab EXTENSION             \tab DELIMITER                 \cr
CHARACTER   \tab DESCRIPTION           \tab INVOKED                   \cr
\code{'0'}  \tab Blank                 \tab\code{""}                  \cr
\code{'1'}  \tab Space                 \tab\code{" "}                 \cr
\code{'B'}  \tab Broken pipe           \tab\code{"¦"}                 \cr
\code{'C'}  \tab Colon                 \tab\code{":"}                 \cr
\code{'D'}  \tab Dot                   \tab\code{"."}                 \cr
\code{'G'}  \tab Grammatical comma*    \tab\code{", "}                \cr
\code{'P'}  \tab Pipe                  \tab\code{"|"}                 \cr
\code{'Q'}  \tab Back quote (back tick)\tab\code{"`"}                 \cr
\code{'S'}  \tab Simple comma^         \tab\code{","}                 \cr
\code{'T'}  \tab Tilde                 \tab\code{"~"}                   }
NOTE: 'Grammatical comma' vs. 'simple comma' indicates whether the function
produces grammatical comma-separated lists vs. simple comma-separated
values (e.g., \code{'1, 2, 3'} vs. \code{'1,2,3'}).
\cr\cr
\strong{Extension Functions \code{da[d]}}
\cr Delimits across arguments in \code{...} using the delimiter invoked by
the extension character \code{[d]}. Thus, \code{daP(1:3, 4:6)} produces
\code{c('1|4', '2|5', '3|6')}, which is also the result of calling
\code{paste(1:3, 4:6, sep = '|')}.
\cr\cr
\strong{Extension Functions \code{dw[d]}}
\cr Delimits within arguments in \code{...} using the delimiter invoked by
the extension character \code{[d]}. Thus, \code{dwC(1:3, 4:6)} produces
\code{c('1:2:3', '4:5:6')}, which is also the result of calling
\code{sapply(list(1:3, 4:6), paste0, collapse = ":")}.
\cr\cr
\strong{Extension Functions \code{daw[d][D]}}
\cr Delimits across arguments in \code{...} using the delimiter invoked by
the extension character \code{[d]} and then delimits within the resulting
vector using the delimiter invoked by the extension character \code{[D]}.
Thus, \code{dawPC(1:3, 4:6)} produces \code{'1|4:2|5:3|6'}, which is also
the result of calling \code{paste(1:3, 4:6, sep = "|", collapse = ":")}.
\cr\cr
\strong{Extension Functions \code{dww[d][D]}}
\cr Delimits within using the delimiter invoked by the extension
character \code{[d]} and then delimits within the resulting vector using
the delimiter invoked by the extension character \code{[D]}. Thus,
\code{dwwCP(1:3, 4:6)} produces \code{'1:2:3|4:5:6'}, which is also the
result of calling \code{paste0(sapply(list(1:3, 4:6), paste0, collapse =
  ":"), collapse = "|")}.
}
\seealso{
Other strings: 
\code{\link{blank}()},
\code{\link{charn}()},
\code{\link{fsub}()},
\code{\link{ipat}()},
\code{\link{max_nch}()},
\code{\link{mkstr}},
\code{\link{ox.}()},
\code{\link{pgrid}()},
\code{\link{revstr}()},
\code{\link{spacing}},
\code{\link{ss}()},
\code{\link{tocase}()},
\code{\link{weave}()}
}
\concept{strings}
