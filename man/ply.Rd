% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ply.R
\name{ply}
\alias{ply}
\alias{norply}
\alias{anyply}
\alias{allply}
\alias{oneply}
\alias{twoply}
\alias{atmply}
\alias{mvcply}
\alias{vecply}
\alias{rowply}
\alias{colply}
\alias{dimply}
\alias{vlsply}
\title{Variations on \code{apply} functions}
\usage{
ply(x, fun, dim, ..., proc. = NULL)

norply(x, fun, dim, ..., proc. = NULL)

anyply(x, fun, dim, ..., proc. = NULL)

allply(x, fun, dim, ..., proc. = NULL)

oneply(x, fun, dim, ..., proc. = NULL)

twoply(x, fun, dim, ..., proc. = NULL)

atmply(x, fun, ..., proc. = NULL)

mvcply(x, fun, ..., proc. = NULL)

vecply(x, fun, ..., proc. = NULL)

rowply(x, fun, ..., proc. = NULL)

colply(x, fun, ..., proc. = NULL)

dimply(x, fun, ..., proc. = NULL)

vlsply(x, fun, ..., proc. = NULL)
}
\arguments{
\item{x}{An object to apply \code{fun} to.}

\item{fun}{Function or character scalar name of a function to apply to \code{x}.}

\item{dim}{A \link[=cmp_nnw_vec]{complete non-negative whole-number vec} giving dimension(s) of \code{x} to apply the function \code{fun} to (\code{0} indicates applying to elements of a vector or \link[=ivls]{vlist} vs. applying to every cell for arrays and data.frames).}

\item{...}{An arbitrary number of additional arguments to be passed to the function \code{fun}.}

\item{proc.}{\code{NULL} or a list of named elements with processing instructions. See the \emph{the \code{proc} argument} section.}
}
\value{
Varies.
}
\description{
(\code{norply}, \code{anyply}, \code{allply}, \code{oneply}, and \code{twoply} assume the result of applying \code{fun} is of mode 'logical')
\itemize{
\item \strong{\code{ply}}: offers all functionality specialized \code{ply} functions described below
\item \strong{\code{norply}}: evaluates whether there are \emph{0} \code{TRUE} values in the result of applying \code{fun}.
\item \strong{\code{anyply}}: evaluates whether there are \emph{any} \code{TRUE} values in the result of applying \code{fun}.
\item \strong{\code{allply}}: evaluates whether there are \emph{only} \code{TRUE} values in the result of applying \code{fun}.
\item \strong{\code{oneply}}: evaluates whether there is \emph{exactly 1} \code{TRUE} value in the result of applying \code{fun}.
\item \strong{\code{twoply}}: evaluates whether there are \emph{2+} \code{TRUE} values in the result of applying \code{fun}.
\item \strong{\code{atmply}}: \link[=av]{Atomize} \code{x} and apply \code{fun} to elements of the resulting atomic vector.
\item \strong{\code{mvcply}}: apply \code{fun} to elements of \link[=atm_vec]{atomic multivec} \code{x}.
\item \strong{\code{vecply}}: apply \code{fun} to elements of \link[=atm_vec]{atomic vec} \code{x}.
\item \strong{\code{rowply}}: apply \code{fun} to rows of matrix/data.frame \code{x}.
\item \strong{\code{colply}}: apply \code{fun} to columns of matrix/data.frame \code{x}.
\item \strong{\code{dimply}}: apply \code{fun} to cells of array/data.frame \code{x}.
\item \strong{\code{vlsply}}: apply \code{fun} to elements of \link[=ivls]{vlist} \code{x}.
}
}
\section{The \code{proc} Argument}{
 When not \code{NULL}, the \code{proc} argument is an optional list with up to seven named elements, which give processing instructions as follows:
\itemize{
\item \strong{\code{s = TRUE}}: \link[base:simplify2array]{simplify} the result.
\item \strong{\code{a1 = TRUE}}: \link[=a]{atomize} \code{x} as a first step.
\item \strong{\code{a2 = TRUE}}: atomize the result.
\item \strong{\code{na = TRUE}}: replace resulting \code{NA} values with \code{TRUE}.
\item \strong{\code{na = FALSE}}: replace resulting \code{NA} values with \code{FALSE}.
\item \strong{\code{na = 'err'}}: throw error if result contains any \code{NA}s.
\item \strong{\code{agg = 'nor'}}: inspect result for \emph{0} \code{TRUE} values.
\item \strong{\code{agg = 'any'}}: inspect result for \emph{any} \code{TRUE} values.
\item \strong{\code{agg = 'all'}}: inspect result for \emph{only} \code{TRUE} values.
\item \strong{\code{agg = 'one'}}: inspect result for \emph{exactly 1} \code{TRUE} value.
\item \strong{\code{agg = 'two'}}: inspect result for \emph{2+} \code{TRUE} values.
\item \strong{\code{arg = 'xxx'}}: inspect \code{x} for \link[=ppp]{properties} in the string \code{xxx} and throw an error if not met.
\item \strong{\code{out = 'yyy'}}: inspect the result for properties given in the string \code{yyy} and throw an error if not met.
}
}

\seealso{
Other extensions: 
\code{\link{atomize}},
\code{\link{binary_failsafe}},
\code{\link{callers}()},
\code{\link{case}()},
\code{\link{dots_uj}},
\code{\link{envir_vals}},
\code{\link{ex}()},
\code{\link{failsafe}()},
\code{\link{fork}()},
\code{\link{fsub}()},
\code{\link{is_failsafe}},
\code{\link{is_unq}()},
\code{\link{make_uj}},
\code{\link{n_is}()},
\code{\link{n_th}()},
\code{\link{naming}},
\code{\link{na}()},
\code{\link{os}()},
\code{\link{paths}},
\code{\link{pause}()},
\code{\link{put}()},
\code{\link{reclass}()},
\code{\link{recycling}},
\code{\link{removal}},
\code{\link{run}()},
\code{\link{r}()},
\code{\link{stats0}},
\code{\link{swap}()},
\code{\link{uj_logicals}},
\code{\link{xb}()}
}
\concept{extensions}
