% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ply.R
\name{ply}
\alias{ply}
\alias{norply}
\alias{anyply}
\alias{allply}
\alias{oneply}
\alias{twoply}
\alias{atmply}
\alias{mvcply}
\alias{vecply}
\alias{rowply}
\alias{colply}
\alias{dimply}
\alias{vlsply}
\title{Variations on \code{apply} functions}
\usage{
ply(x, fun, ..., dim. = 0, proc. = NULL)

norply(x, fun, ..., dim. = 0, proc. = NULL)

anyply(x, fun, ..., dim. = 0, proc. = NULL)

allply(x, fun, ..., dim. = 0, proc. = NULL)

oneply(x, fun, ..., dim. = 0, proc. = NULL)

twoply(x, fun, ..., dim. = 0, proc. = NULL)

atmply(x, fun, ..., proc. = NULL)

mvcply(x, fun, ..., proc. = NULL)

vecply(x, fun, ..., proc. = NULL)

rowply(x, fun, ..., proc. = NULL)

colply(x, fun, ..., proc. = NULL)

dimply(x, fun, ..., proc. = NULL)

vlsply(x, fun, ..., proc. = NULL)
}
\arguments{
\item{x}{An object to apply \code{fun} to.}

\item{fun}{Function or character scalar name of a function to apply to \code{x}.}

\item{...}{An arbitrary number of additional arguments to be passed to the function \code{fun}.}

\item{dim.}{A \link[=cmp_nnw_vec]{complete non-negative whole-number vec} giving dimension(s) of \code{x} to apply the function \code{fun} to (\code{0} indicates applying to elements of a vector or \link[=ivls]{vlist} vs. applying to every cell for arrays and data.frames).}

\item{proc.}{\code{NULL} or a list of named elements with processing instructions. See the \emph{the \code{proc} argument} section.}
}
\description{
\tabular{rl}{
  \code{norply}   \tab Checks for \code{0} resulting \code{TRUE} values\eqn{^1}.
\cr \code{oneply}   \tab Checks for \code{1} resulting \code{TRUE} values\eqn{^1}.
\cr \code{twoply}   \tab Checks for \verb{2+} resulting \code{TRUE} values\eqn{^1}.
\cr \code{anyply}   \tab Checks for \emph{any} resulting \code{TRUE} values\eqn{^1}.
\cr \code{allply}   \tab Checks for \emph{only} resulting \code{TRUE} values\eqn{^1}.
\cr \code{atmply}   \tab Applies \code{fun} to \link[=av]{atomized} \code{x}.
\cr \code{mvcply}   \tab Applies \code{fun} to elements of \link[=atm_mvc]{atomic multivec} \code{x}.
\cr \code{vecply}   \tab Applies \code{fun} to elements of \link[=atm_vec]{atomic vec} \code{x}.
\cr \code{vlsply}   \tab Applies \code{fun} to elements of \link[=atm_vls]{atomic vlist} \code{x}.
\cr \code{rowply}   \tab Applies \code{fun} to rows of \code{x}.
\cr \code{colply}   \tab Applies \code{fun} to columns of \code{x}.
\cr \code{dimply}   \tab Applies \code{fun} to cells of \code{x}.
\cr            \tab   
\cr    \code{ply}   \tab Offers all functionality of the above specialized \code{ply} functions.
}
   \eqn{^{1.}} These functions assume that applying \code{fun} produces \code{'logical'} results.
}
\section{The \code{proc} Argument}{
 When not \code{NULL}, the \code{proc} argument is an optional list with up to seven named elements, which give processing instructions as follows:
\tabular{rll}{
  \strong{Name} \tab   \strong{Value} \tab   \strong{Instructions}
\cr  \code{arg} \tab   \code{'***'}   \tab   Checks \code{x} for match to \link[=ppp]{spec} \code{'***'}.
\cr  \code{out} \tab   \code{'***'}   \tab   Checks result for match to spec \code{'***'}.
\cr  \code{agg} \tab   \code{'nor'}   \tab   Inspect result for \code{0} \code{TRUE} values.
\cr  \code{agg} \tab   \code{'one'}   \tab   Inspect result for \code{1} \code{TRUE} values.
\cr  \code{agg} \tab   \code{'two'}   \tab   Inspect result for \verb{2+} \code{TRUE} values.
\cr  \code{agg} \tab   \code{'any'}   \tab   Inspect result for \emph{any} \code{TRUE} values.
\cr  \code{agg} \tab   \code{'all'}   \tab   Inspect result for \emph{only} \code{TRUE} values.
\cr   \code{na} \tab   \code{'err'}   \tab   Throw error if result has any \code{NA}s.
\cr   \code{na} \tab   \code{FALSE}   \tab   Replace resulting \code{NA}s with \code{FALSE}.
\cr   \code{na} \tab   \code{TRUE}    \tab   Replace resulting \code{NA}s with \code{TRUE}.
\cr   \code{a1} \tab   \code{TRUE}    \tab   \link[=av]{Atomize} \code{x}.
\cr   \code{a2} \tab   \code{TRUE}    \tab   Atomize the result.
\cr    \code{s} \tab   \code{TRUE}    \tab   \link[base:simplify2array]{Simplify} the result.
}
}

\examples{
NumVec. <- 1:5
NumMat. <- matrix(1:25, nrow = 5)
ChrDtf. <- dtf(az = letters[1:10], AZ = LETTERS[1:10], nm = as.character(0:9))
ChrVls. <- list(az = letters, AZ = LETTERS, nm = as.character(0:9))
Comp. <- function(x, comp, value) {if (comp == "<") {x < value} else {x > value}}

NumVec.
NumMat.
ChrDtf.
ChrVls.

norply(NumVec., Comp., ">", value = 6)
norply(NumVec., Comp., ">", value = 4)

anyply(NumVec., Comp., ">", value = 6)
anyply(NumVec., Comp., ">", value = 4)

allply(NumVec., Comp., "<", value = 6)
allply(NumVec., Comp., "<", value = 4)

oneply(NumVec., Comp., ">", value = 6)
oneply(NumVec., Comp., ">", value = 4)

twoply(NumVec., Comp., ">", value = 2)
twoply(NumVec., Comp., ">", value = 5)
twoply(NumMat., Comp., ">", value = 15, dim. = 2)

dimply(NumMat., Comp., ">", value = 15)
dimply(ChrDtf., toupper)

rowply(NumMat., sum)
colply(ChrDtf., paste0, collapse = "")

vlsply(ChrVls., paste0, collapse = "")
}
