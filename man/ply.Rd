% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ply.R
\name{ply}
\alias{ply}
\alias{norply}
\alias{anyply}
\alias{allply}
\alias{oneply}
\alias{twoply}
\alias{atmply}
\alias{mvcply}
\alias{vecply}
\alias{rowply}
\alias{colply}
\alias{dimply}
\alias{vlsply}
\title{Variations on \code{apply(.)}}
\usage{
ply(x, fun., dim., ..., proc. = NULL)

norply(x, fun., dim., ..., proc. = NULL)

anyply(x, fun., dim., ..., proc. = NULL)

allply(x, fun., dim., ..., proc. = NULL)

oneply(x, fun., dim., ..., proc. = NULL)

twoply(x, fun., dim., ..., proc. = NULL)

atmply(x, fun., ..., proc. = NULL)

mvcply(x, fun., ..., proc. = NULL)

vecply(x, fun., ..., proc. = NULL)

rowply(x, fun., ..., proc. = NULL)

colply(x, fun., ..., proc. = NULL)

dimply(x, fun., ..., proc. = NULL)

vlsply(x, fun., ..., proc. = NULL)
}
\arguments{
\item{x}{An object to apply the function \code{fun.} to.}

\item{fun.}{A function or name of a funciton to apply to \code{x}.}

\item{dim.}{A non-negative whole number vector giving the dimension(s) of
\code{x} to apply the function \code{fun.} to. \code{0} indicates applying
to elements of an object (for arrays, and tibbles, this means applying
to every cell).}

\item{...}{An arbitrary number of additional arguments to be passed to the
function \code{fun.}.}

\item{proc.}{\code{NULL} or a list of named elements with processing
instructions. See details.}
}
\description{
Variations on \code{apply(.)}
}
\details{
\strong{\code{ply}}
\cr Generalized \code{apply(.)} with a wide range of options.
\cr\cr
\strong{\code{norply}, \code{anyply}, \code{allply}, \code{oneply},
\code{twoply}}
\cr The functions assume applying \code{fun.} produces an object of logical
mode. They check, respectively, \code{TRUE} if zero, any, all, exactly one,
or at least two values in the result are \code{TRUE}.
\cr\cr
\strong{\code{atmply}}
\cr \code{\link[=a]{Atomizes}} \code{x} and applies \code{fun.} to the
resulting atomic vector.
\cr\cr
\strong{\code{mvcply}}
\cr Applies \code{fun.} to each element of \code{x}, which is assumed to be
an \link[=is_atm_mvect]{atomic mvect}..
\cr \cr
\strong{\code{vecply}}
\cr Applies \code{FUN} to each element of \code{x}, which is assumed to be
an \link[=is_atm_vext]{atomic vect}.
\cr \cr
\strong{\code{rowply}}
\cr Applies \code{fun.} to each row of \code{x}, which is assumed to be a
matrix or \link[tibble:is_tibble]{tibble}.
\cr \cr
\strong{\code{colply}}
\cr Applies \code{fun.} to each column of \code{x}, which is assumed to be
a matrix or \link[tibble:is_tibble]{tibble}.
\cr \cr
\strong{\code{dimply}}
\cr Applies \code{fun.} across all dimensions of \code{x}, where
\code{dots} is created \emph{in the calling function} with the command
\code{list(...)}.
\cr \cr
\strong{\code{vlsply}}
\cr Applies \code{fun.} to each element of \code{x}, where \code{x} is
assumed to be a \link[=is_gen_vlist]{generic vlist}.
\cr\cr
\strong{The \code{proc.} Argument}
\cr When not \code{NULL}, the \code{proc.} argument can be a list with
up to seven optional named elements, which give processing instructions as
follows:
\tabular{lll}{
\strong{Name}\tab\strong{Value} \tab\strong{Processing Instruction}
\cr\code{a1}\tab\code{TRUE} \tab\link[=a]{Atomize} \code{x} before applying
\code{fun.}.
\cr\code{a2}\tab\code{TRUE} \tab\link[=a]{Atomize} \code{x} after applying
\code{fun.}.
\cr\code{s} \tab\code{TRUE} \tab\link[base:simplify2array]{Simplify} the
result.
\cr\code{na}\tab\code{TRUE} \tab Replace any resulting \code{NA} values
with \code{TRUE}.
\cr\code{na}\tab\code{FALSE}\tab Replace any resulting \code{NA} values
with \code{FALSE}.
\cr\code{na}\tab\code{'err'}\tab Throw an error if the result contains any
\code{NA} values.
\cr\code{arg}\tab\code{\link[uj:is_xxx]{xxx}}
\tab Inspect \code{x} for the specified properties before
processing and throw an error if they are not met.
\cr\code{out}\tab \code{\link[uj:is_xxx]{xxx}}
\tab After processing, inspect the result for the specified
properties and throw an error if they are not met.
\cr\code{agg}\tab\code{'nor'}\tab Evaluate whether the result contains zero
\code{TRUE} values.
\cr\code{agg}\tab\code{'any'}\tab Evaluate whether the result contains any
\code{TRUE} values.
\cr\code{agg}\tab\code{'all'}\tab Evaluate whether the result contains only
\code{TRUE} values.
\cr\code{agg}\tab\code{'one'}\tab Evaluate whether the result contains
exactly one \code{TRUE} values.
\cr\code{agg}\tab\code{'two'}\tab Evaluate whether the result contains two
or more \code{TRUE} values.
}
}
\seealso{
Other meta: 
\code{\link{as_xxx}},
\code{\link{av}()},
\code{\link{binfuns}},
\code{\link{callers}()},
\code{\link{case}()},
\code{\link{ex}()},
\code{\link{failsafe}()},
\code{\link{fx}()},
\code{\link{getnames}()},
\code{\link{make}},
\code{\link{na_vals}},
\code{\link{named}()},
\code{\link{nx}()},
\code{\link{os}()},
\code{\link{recycling}},
\code{\link{run}()},
\code{\link{swap}()},
\code{\link{values}},
\code{\link{xb}()}
}
\concept{meta}
