% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unq_ccc.R
\encoding{UTF-8}
\name{unq_ccc_PROPS}
\alias{unq_ccc_PROPS}
\alias{unq_ccc}
\alias{unq_ccc_funs}
\alias{unq_arr}
\alias{unq_dtf}
\alias{unq_gen}
\alias{unq_mat}
\alias{unq_mvc}
\alias{unq_scl}
\alias{unq_vec}
\alias{unq_vls}
\title{Combo Uniqueness and Extended Class Properties}
\usage{
unq_ccc_PROPS()

unq_ccc(x, ccc, ...)

unq_ccc_funs()

unq_arr(x, ...)

unq_dtf(x, ...)

unq_gen(x, ...)

unq_mat(x, ...)

unq_mvc(x, ...)

unq_scl(x, ...)

unq_vec(x, ...)

unq_vls(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{ccc}{A character scalar single extended property from \code{\link{ccc_props}()}.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\description{
Functions checking for combinations of \link[=UNQ]{uniqueness} and \link[=ccc]{extended class}.
}
\section{Functions}{
\itemize{
\item \code{unq_ccc()}: Checks \code{x} for uniqueness and against the extended class in \code{ccc}. Return a logical scalar.

\item \code{unq_ccc_funs()}: Lists all combo uniqueness and extended class property checking functions. Returns a sorted, lowercase, character vector.

\item \code{unq_arr()}: Checks \code{x} for completeness and array-ness, subject to any count or content restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_dtf()}: Checks \code{x} for completeness and data.frame-ness, subject to any count or content restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_gen()}: Checks \code{x} for completeness and generic-ness, subject to any count or content restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_mat()}: Checks \code{x} for completeness and matrix-ness, subject to any count or content restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_mvc()}: Checks \code{x} for completeness and multivec-ness, subject to any count or content restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_scl()}: Checks \code{x} for completeness and scalar-ness, subject to any count or content restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_vec()}: Checks \code{x} for completeness and vec-ness, subject to any count or content restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_vls()}: Checks \code{x} for completeness and vector-list-ness, subject to any count or content restrictions in \code{...}. Returns a logical scalar.

}}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{ll}{  \verb{.max, .maxr, .maxc}   \tab Scalar maximum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.min, .minr, .minc}   \tab Scalar minimum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.lt, .le, .ge, .gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively. \cr   \tab   \cr
  \verb{.n, .nr, .nc}         \tab A vector of valid numbers of elements, rows, and columns, respectively.                                                                    \cr   \tab   \cr
  \code{.vals}                \tab A vector of valid values.                                                                                                                                 }
}

\examples{
UnqArr <- array(1:27, dim = c(3, 3, 3))
UnqDtf <- data.frame(a = c("a", "b", "c"), b = 1:3)
UnqMat <- matrix(1:9, nrow = 3)
UnqMvc <- 1:2
UnqScl <- 1
UnqVec <- "a"
UnqVls <- list(a = letters, b = 1:3)

unq_ccc_funs()
unq_ccc(UnqArr, "arr")
unq_ccc(UnqVls, "dtf")
c(unq_dtf(UnqDtf), unq_arr(UnqArr), unq_arr(rbind(UnqDtf, UnqDtf)))
c(unq_mat(UnqMat), unq_arr(UnqVls), unq_arr(rbind(UnqMat, UnqMat)))
c(unq_arr(UnqArr), unq_arr(UnqDtf), unq_arr(c(UnqArr, UnqArr)))
c(unq_gen(UnqArr), unq_arr(UnqDtf), unq_arr(c(UnqArr, UnqArr)))
c(unq_gen(UnqVec), unq_arr(UnqArr), unq_arr(c(UnqVec, UnqCec)))
c(unq_gen(UnqMvc), unq_arr(UnqScl), unq_arr(c(UnqMvc, UnqMvc)))
c(unq_gen(UnqScl), unq_arr(UnqMvc), unq_arr(c(UnqScl, UnqScl)))
c(unq_mvc(UnqMvc), unq_arr(UnqVec), unq_arr(c(UnqMvc, UnqMvc)))
c(unq_scl(UnqScl), unq_arr(UnqMvc), unq_arr(c(UnqScl, UnqScl)))
c(unq_vec(UnqVec), unq_arr(UnqDtf), unq_arr(c(UnqVec, UnqVec)))
c(unq_vls(UnqVls), unq_arr(UnqVec), unq_arr(c(UnqVls, UnqVls)))
}
