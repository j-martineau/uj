% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/basics.R
\name{basics}
\alias{basics}
\alias{u}
\alias{w}
\alias{dn}
\alias{up}
\alias{len}
\alias{mid}
\alias{spf}
\alias{levs}
\alias{g}
\alias{g0}
\alias{g1}
\alias{p}
\alias{p0}
\alias{p1}
\title{Wrappers for \code{base} functions}
\usage{
u(x)

w(x)

dn(x)

up(x)

len(x, type = "chars", allowNA = FALSE, keepNA = NA)

mid(x, start, stop)

spf(fmt, ...)

levs(x)

g(g, ...)

g0(...)

g1(...)

p(p, ...)

p0(...)

p1(...)
}
\arguments{
\item{x}{a vector or a data frame or an array or \code{NULL}.}

\item{type}{character string: partial matching to one of
    \code{c("bytes", "chars", "width")}.  See \sQuote{Details}.}

\item{allowNA}{logical: should \code{NA} be returned for invalid
    multibyte strings or \code{"bytes"}-encoded strings (rather than
    throwing an error)?}

\item{keepNA}{logical: should \code{NA} be returned when
  \code{x} is \code{\link[base]{NA}}?  If false, \code{nchar()} returns
  \code{2}, as that is the number of printing characters used when
  strings are written to output, and \code{nzchar()} is \code{TRUE}.  The
  default for \code{nchar()}, \code{NA}, means to use \code{keepNA = TRUE}
  unless \code{type} is \code{"width"}.}

\item{fmt}{a character vector of format strings, each of up to 8192 bytes.}

\item{...}{arguments for particular methods.}
}
\value{
For a vector, an object of the same type of \code{x}, but with only
  one copy of each duplicated element.  No attributes are copied (so
  the result has no names).

  For a data frame, a data frame is returned with the same columns but
  possibly fewer rows (and with row names from the first occurrences of
  the unique rows).

  A matrix or array is subsetted by \code{[, drop = FALSE]}, so
  dimensions and dimnames are copied appropriately, and the result
  always has the same number of dimensions as \code{x}.
}
\description{
\tabular{rl}{
\code{levs}   \tab Thinly wraps \code{\link[base]{levels}}.
\cr         \tab   
\cr \code{spf}   \tab Thinly wraps \code{\link[base]{sprintf}}.
\cr \code{mid}   \tab Thinly wraps \code{\link[base]{substr}}.
\cr \code{len}   \tab Thinly wraps \code{\link[base]{nchar}}.
\cr         \tab   
\cr  \code{up}   \tab Thinly wraps \code{\link[base]{ceiling}}.
\cr  \code{dn}   \tab Thinly wraps \code{\link[base]{floor}}.
\cr         \tab   
\cr   \code{u}   \tab Thinly wraps \code{\link[base]{unique}}\eqn{^a}.
\cr   \code{w}   \tab Thinly Wraps \code{\link[base]{which}}\eqn{^b}.
\cr         \tab   
\cr  \code{g1}   \tab Calls \code{\link[base:paste0]{paste0(av(...), collapse = " ")}}.
  \cr  \code{g0}   \tab Calls \code{\link[base:paste0]{paste0(av(...), collapse = "")}}.
  \cr   \code{g}   \tab Calls \code{\link[base:paste0]{paste0(av(...), collapse = g)}}
  \cr         \tab   
\cr  \code{p1}   \tab Calls \code{\link[base:paste]{paste(..., sep = " ")}}.
  \cr  \code{p0}   \tab Calls \code{\link[base:paste]{paste(..., sep = "")}}.
  \cr   \code{p}   \tab Calls \code{\link[base:paste]{paste(..., sep = p)}}
}
    \eqn{^{a.}} Differs from \code{\link{uv}}, which calls \code{unique(av(...))}.
\cr \eqn{^{b.}} Differs from \code{\link{wv}}, which calls \code{which(av(...))}.
}
\details{
This is a generic function with methods for vectors, data frames and
  arrays (including matrices).

  The array method calculates for each element of the dimension
  specified by \code{MARGIN} if the remaining dimensions are identical
  to those for an earlier element (in row-major order).  This would most
  commonly be used for matrices to find unique rows (the default) or columns
  (with \code{MARGIN = 2}).

  Note that unlike the Unix command \code{uniq} this omits
  \emph{duplicated} and not just \emph{repeated} elements/rows.  That
  is, an element is omitted if it is equal to any previous element and
  not just if it is equal the immediately previous one.  (For the
  latter, see \code{\link[base]{rle}}).

  Missing values (\code{"\link[base]{NA}"}) are regarded as equal, numeric and
  complex ones differing from \code{NaN}; character strings will be compared in a
  \dQuote{common encoding}; for details, see \code{\link[base]{match}} (and
  \code{\link[base]{duplicated}}) which use the same concept.

  Values in \code{incomparables} will never be marked as duplicated.
  This is intended to be used for a fairly small set of values and will
  not be efficient for a very large set.

  When used on a data frame with more than one column, or an array or
  matrix when comparing dimensions of length greater than one, this
  tests for identity of character representations.  This will
  catch people who unwisely rely on exact equality of floating-point
  numbers!
}
\note{
Unlike most other base \R functions this does not coerce \code{x}
  to logical: only arguments with \code{\link[base]{typeof}} logical are
  accepted and others give an error.
}
\section{Warning}{

  Using this for lists is potentially slow, especially if the elements
  are not atomic vectors (see \code{\link[base]{vector}}) or differ only
  in their attributes.  In the worst case it is \eqn{O(n^2)}.



  The realities of computer arithmetic can cause unexpected results,
  especially with \code{floor} and \code{ceiling}.  For example, we
  \sQuote{know} that \code{floor(log(x, base = 8))} for \code{x = 8} is
  \code{1}, but \code{0} has been seen on an \R platform.  It is
  normally necessary to use a tolerance.

  Rounding to decimal digits in binary arithmetic is non-trivial (when
  \code{digits != 0}) and may be surprising.  Be aware that most decimal
  fractions are \emph{not} exactly representable in binary double precision.
  In \R 4.0.0, the algorithm for \code{round(x, d)}, for \eqn{d > 0}, has
  been improved to \emph{measure} and round \dQuote{to nearest even},
  contrary to earlier versions of \R (or also to \code{\link[base]{sprintf}()}
  or \code{\link[base]{format}()} based rounding).



  The realities of computer arithmetic can cause unexpected results,
  especially with \code{floor} and \code{ceiling}.  For example, we
  \sQuote{know} that \code{floor(log(x, base = 8))} for \code{x = 8} is
  \code{1}, but \code{0} has been seen on an \R platform.  It is
  normally necessary to use a tolerance.

  Rounding to decimal digits in binary arithmetic is non-trivial (when
  \code{digits != 0}) and may be surprising.  Be aware that most decimal
  fractions are \emph{not} exactly representable in binary double precision.
  In \R 4.0.0, the algorithm for \code{round(x, d)}, for \eqn{d > 0}, has
  been improved to \emph{measure} and round \dQuote{to nearest even},
  contrary to earlier versions of \R (or also to \code{\link[base]{sprintf}()}
  or \code{\link[base]{format}()} based rounding).



  The format string is passed down the OS's \code{sprintf} function, and
  incorrect formats can cause the latter to crash the \R process .  \R
  does perform sanity checks on the format, but not all possible user
  errors on all platforms have been tested, and some might be terminal.

  The behaviour on inputs not documented here is \sQuote{undefined},
  which means it is allowed to differ by platform.

}

\section{S4 methods}{

  These are all (internally) S4 generic.

  \code{ceiling}, \code{floor} and \code{trunc} are members of the
  \code{\link[=S4groupGeneric]{Math}} group generic.  As an S4
  generic, \code{trunc} has only one argument.

  \code{round} and \code{signif} are members of the
  \code{\link[=S4groupGeneric]{Math2}} group generic.



  These are all (internally) S4 generic.

  \code{ceiling}, \code{floor} and \code{trunc} are members of the
  \code{\link[=S4groupGeneric]{Math}} group generic.  As an S4
  generic, \code{trunc} has only one argument.

  \code{round} and \code{signif} are members of the
  \code{\link[=S4groupGeneric]{Math2}} group generic.

}

\examples{
vals <- c(1:3, 2:4) / 3
vars <- c("a", "bb", "ccc", "dddd", "ccc", "bb")
text <- "\%s = \%0.2f and \%s = \%0.0f"

vals
vars
text

u(vals)
u(vars)
u(data.frame(var = vars, val = vals))

dn(vals)
up(vals)

len(vars)
mid(vars, 1, 3)

spf(text, vars[1:3], vals[1:3], vars[4:6], vals[4:6])
}
\references{
Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988)
  \emph{The New S Language}.
  Wadsworth & Brooks/Cole.
}
\seealso{
Other wraps: 
\code{\link{dp}},
\code{\link{dt}()},
\code{\link{ggp}()},
\code{\link{gr}},
\code{\link{rd}},
\code{\link{sca}()},
\code{\link{tb}()}
}
\author{
Werner Stahel and Peter Holzer (ETH Zurich) proposed the
  \code{arr.ind} option.
}
\concept{wraps}
