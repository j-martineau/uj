% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/value_exists.R
\encoding{UTF-8}
\name{value_exists}
\alias{value_exists}
\alias{get_value}
\alias{set_value}
\alias{exists_value}
\alias{exists_val}
\alias{existsv}
\alias{vexists}
\alias{val_exists}
\alias{value_get}
\alias{val_get}
\alias{vget}
\alias{getv}
\alias{get_val}
\alias{value_set}
\alias{val_set}
\alias{vset}
\alias{setv}
\alias{set_val}
\title{Objects in environments of calling functions}
\usage{
value_exists(name, err = T, gens = 1)

get_value(name, err = T, gens = 1)

set_value(name, val, gens = 1)

exists_value(name, err = T, gens = 1)

exists_val(name, err = T, gens = 1)

existsv(name, err = T, gens = 1)

vexists(name, err = T, gens = 1)

val_exists(name, err = T, gens = 1)

value_get(name, err = T, gens = 1)

val_get(name, err = T, gens = 1)

vget(name, err = T, gens = 1)

getv(name, err = T, gens = 1)

get_val(name, err = T, gens = 1)

value_set(name, val, gens = 1)

val_set(name, val, gens = 1)

vset(name, val, gens = 1)

setv(name, val, gens = 1)

set_val(name, val, gens = 1)

set_value(name, val, gens = 1)
}
\arguments{
\item{name}{A \link[=cmp_chr_scl]{complete character scalar} giving the name of an object.}

\item{err}{A non\code{NA} logical scalar indicating whether to throw an error if the object specified by \code{name} does not exist (i.e., rather than returning \code{FALSE}).}

\item{gens}{A \link[=cmp_psw_scl]{complete positive whole-number scalar} giving the number of generations back in the function call stack to go.}

\item{val}{A value to place into the object specified by \code{name}.}
}
\value{
\strong{A logical scalar}      \cr\cr \verb{value_exists, val_exists, vexists, ...}
\cr\cr  \strong{The} \code{NULL} \strong{object} \cr\cr \verb{set_value, set_val, setv, ...}
\cr\cr  \strong{An object}             \cr\cr \verb{get_value, get_val, getv, ...}
}
\description{
All functions in this family operate in the environment of the calling function \code{gens} generations back in the call stack.
\tabular{ll}{  \verb{value_exists, val_exists, vexists}   \tab Checks for the existence of an object in the          \cr
  \verb{exists_value, exists_val, existsv}   \tab environment of the \code{gens}-specified calling function. \cr   \tab   \cr
  \verb{get_value, get_val, getv}            \tab Gets the value of an object in the environment of the \cr
  \verb{value_get, val_get, vget}            \tab \code{gens}-specified calling function.                    \cr   \tab   \cr
  \verb{set_value, set_val, setv}            \tab Sets the value of an object in the environment of the \cr
  \verb{value_set, val_set, vset}            \tab \code{gens}-specified calling function.                      }
}
\examples{
egValueExists <- function() {
  egValueExistsC <- function() {
    parent <- uj::caller1()
    grand  <- uj::caller2()
    aInParent  <- uj::value_exists('A', err = FALSE, gens = 1)
    bInParent  <- uj::val_exists('B', err = FALSE, gens = 1)
    aInGrand   <- uj::vexists('A', err = FALSE, gens = 2)
    bInGrand   <- uj::existsv('B', err = FALSE, gens = 2)
    aValParent <- uj::get_value('A', err = FALSE, gens = 1)
    bValParent <- uj::get_val('B', err = FALSE, gens = 1)
    aValGrand  <- uj::getv('A', err = FALSE, gens = 2)
    bValGrand  <- uj::vget('B', err = FALSE, gens = 2)
    uj::say("\nParent Function     : '", parent, "'")
    uj::say("\nGrandparent Function: '", grand , "'")
    uj::say("\n")
    uj::say("\nDoes variable 'A' exist in parent function '", parent, "'? ", aInParent)
    uj::say("\nDoes variable 'B' exist in parent function '", parent, "'? ", bInParent)
    uj::say("\n")
    uj::say("\nDoes variable 'A' exist in grandparent function '", grand, "'? ", aInGrand)
    uj::say("\nDoes variable 'B' exist in grandparent function '", grand, "'? ", bInGrand)
    uj::say("\n")
    uj::say("\nValue of variable 'A' in parent function '", parent, "': ", aValParent)
    uj::say("\nValue of variable 'B' in parent function '", parent, "': ", bValParent)
    uj::say("\n")
    uj::say("\nValue of variable 'A' in grandparent function '", grand, "': ", aValGrand)
    uj::say("\nValue of variable 'B' in grandparent function '", grand, "': ", bValGrand)
    uj::vset('A', 'A', gens = 1)
    uj::vset('B', 'B', gens = 2)
    aInParent  <- uj::exists_val('A', err = FALSE, gens = 1)
    bInParent  <- uj::exists_value('B', err = FALSE, gens = 1)
    aInGrand   <- uj::value_exists('A', err = FALSE, gens = 2)
    bInGrand   <- uj::val_exists('B', err = FALSE, gens = 2)
    aValParent <- uj::val_get('A', err = FALSE, gens = 1)
    bValParent <- uj::value_get('B', err = FALSE, gens = 1)
    aValGrand  <- uj::get_value('A', err = FALSE, gens = 2)
    bValGrand  <- uj::get_val('B', err = FALSE, gens = 2)
    uj::say("\nParent Function     : '", parent, "'")
    uj::say("\nGrandparent Function: '", grand , "'")
    uj::say("\n")
    uj::say("\nDoes variable 'A' exist in parent function '", parent, "'? ", aInParent)
    uj::say("\nDoes variable 'B' exist in parent function '", parent, "'? ", bInParent)
    uj::say("\n")
    uj::say("\nDoes variable 'A' exist in grandparent function '", grand, "'? ", aInGrand)
    uj::say("\nDoes variable 'B' exist in grandparent function '", grand, "'? ", bInGrand)
    uj::say("\n")
    uj::say("\nValue of variable 'A' in parent function '", parent, "': ", aValParent)
    uj::say("\nValue of variable 'B' in parent function '", parent, "': ", bValParent)
    uj::say("\n")
    uj::say("\nValue of variable 'A' in grandparent function '", grand, "': ", aValGrand)
    uj::say("\nValue of variable 'B' in grandparent function '", grand, "': ", bValGrand)
  }
  egValueExistsB <- function() {B <- 1; egValueExistsC()}
  egValueExistsA <- function() {A <- 0; egValueExistsB()}
  egValueExistsA()
}
egValueExists()
}
\seealso{
Other environments: 
\code{\link{callers}()},
\code{\link{os}()},
\code{\link{recyclable_ns}()}

Other extensions: 
\code{\link{N}()},
\code{\link{atomize_funs}()},
\code{\link{case}()},
\code{\link{compatible}()},
\code{\link{declare}},
\code{\link{dups}()},
\code{\link{failsafe}()},
\code{\link{flex_rbind}()},
\code{\link{fork}()},
\code{\link{naming}},
\code{\link{na}()},
\code{\link{paths}},
\code{\link{purge}()},
\code{\link{rd}()},
\code{\link{r}()},
\code{\link{sets}()},
\code{\link{stats0}()},
\code{\link{swaps}()}
}
\concept{environments}
\concept{extensions}
