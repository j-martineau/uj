% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/value_exists.R
\encoding{UTF-8}
\name{value_exists}
\alias{value_exists}
\alias{get_value}
\alias{set_value}
\alias{val_exists}
\alias{get_val}
\alias{set_val}
\alias{vexists}
\alias{getv}
\alias{setv}
\title{Objects in environments of calling functions}
\usage{
value_exists(name, .ERR = T, .GENS = 1)

get_value(name, .ERR = T, .GENS = 1)

set_value(name, val, .GENS = 1)

val_exists(name, .ERR = T, .GENS = 1)

get_val(name, .ERR = T, .GENS = 1)

set_val(name, val, .GENS = 1)

vexists(name, .ERR = T, .GENS = 1)

getv(name, .ERR = T, .GENS = 1)

setv(name, val, .GENS = 1)
}
\arguments{
\item{name}{A \link[=cmp_chr_scl]{complete character scalar} giving the name of an object.}

\item{.ERR}{A non\code{NA} logical scalar indicating whether to throw an error if the object specified by \code{name} does not exist (i.e., rather than returning \code{FALSE}).}

\item{.GENS}{A \link[=cmp_psw_scl]{complete positive whole-number scalar} giving the number of generations back in the function call stack to go.}

\item{val}{A value to place into the object specified by \code{name}.}
}
\value{
\strong{A logical scalar}      \cr\cr \verb{value_exists, val_exists, vexists}
\cr\cr  \strong{The} \code{NULL} \strong{object} \cr\cr \verb{set_value, set_val, setv}
\cr\cr  \strong{An object}             \cr\cr \verb{get_value, get_val, getv}
}
\description{
All functions in this family operate in the environment of the calling function \code{.GENS} generations back in the call stack.
\tabular{ll}{  \verb{value_exists, val_exists, vexists}   \tab Checks for the existence of an object in the environment of the \code{.GENS}-specified calling function. \cr   \tab   \cr
  \verb{get_value, get_val, getv}            \tab Gets the value of an object in the environment of the \code{.GENS}-specified calling function.           \cr   \tab   \cr
  \verb{set_value, set_val, setv}            \tab Sets the value of an object in the environment of the \code{.GENS}-specified calling function.                          }
}
\examples{
egFunC <- function() {
  parent <- callers(1)
  grand  <- callers(2)

  say("\n Parent Function: '", parent, "'")
  say("\n Grandparent Function: '", grand , "'")
  say("\n")
  say("\n Variable 'A' exists in parent function '", parent, "': ", val_exists('A', .ERR = FALSE, .GENS = 1))
  say("\n Variable 'B' exists in parent function '", parent, "': ", val_exists('B', .ERR = FALSE, .GENS = 1))
  say("\n")
  say("\n Variable 'A' exists in grandparent function '", grand, "': ", val_exists('A', .ERR = FALSE, .GENS = 2))
  say("\n Variable 'B' exists in grandparent function '", grand, "': ", val_exists('B', .ERR = FALSE, .GENS = 2))
  say("\n")
  say("\n Value of variable 'B' in parent function '", parent, "': ", get_value('B', .ERR = FALSE, .GENS = 1))
  say("\n Value of variable 'A' in grandparent function '", grand, "': ", get_value('A', .ERR = FALSE, .GENS = 2))

  vSET('A', 'A', .GENS = 1)
  vSET('B', 'B', .GENS = 2)

  say("\n")
  say("\n vSET('A', 'A', .GENS = 1)")
  say("\n vSET('B', 'B', .GENS = 2)")
  say("\n")
  say("\n Variable 'A' exists in parent function '", parent, "': ", val_exists('A', .ERR = FALSE, .GENS = 1))
  say("\n Variable 'B' exists in parent function '", parent, "': ", val_exists('B', .ERR = FALSE, .GENS = 1))
  say("\n")
  say("\n Variable 'A' exists in grandparent function '", grand, "': ", val_exists('A', .ERR = FALSE, .GENS = 2))
  say("\n Variable 'B' exists in grandparent function '", grand, "': ", val_exists('B', .ERR = FALSE, .GENS = 2))
  say("\n")
  say("\n Value of variable 'A' in parent function '", parent, "': ", get_value('A', .ERR = FALSE, .GENS = 1))
  say("\n Value of variable 'B' in parent function '", parent, "': ", get_value('B', .ERR = FALSE, .GENS = 1))
  say("\n")
  say("\n Value of variable 'A' in grandparent function '", grand, "': ", get_value('A', .ERR = FALSE, .GENS = 2))
  say("\n Value of variable 'B' in grandparent function '", grand, "': ", get_value('B', .ERR = FALSE, .GENS = 2))
}
egFunB <- function() {B <- 1; egFunC()}
egFunA <- function() {A <- 0; egFunB()}
egFunA()
}
\seealso{
Other environments: 
\code{\link{callers}()},
\code{\link{os}()},
\code{\link{recyclable_ns}()}

Other extensions: 
\code{\link{N}()},
\code{\link{atomize}()},
\code{\link{case}()},
\code{\link{cb}()},
\code{\link{comparable}()},
\code{\link{compatible}()},
\code{\link{declare}},
\code{\link{dups}()},
\code{\link{failsafe}()},
\code{\link{flex_rbind}()},
\code{\link{fork}()},
\code{\link{is_unique}()},
\code{\link{naming}},
\code{\link{na}()},
\code{\link{paths}},
\code{\link{purge}()},
\code{\link{rd}()},
\code{\link{r}()},
\code{\link{sets}()},
\code{\link{sum0}()},
\code{\link{swap}()}
}
\concept{environments}
\concept{extensions}
