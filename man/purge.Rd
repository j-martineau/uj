% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/purge.R
\encoding{UTF-8}
\name{purge}
\alias{purge}
\alias{x}
\alias{purge_plots}
\alias{purge_plot}
\alias{xplots}
\alias{xplot}
\alias{purge_global}
\alias{purge_all}
\alias{xglobal}
\alias{xall}
\alias{purge_warnings}
\alias{purge_warn}
\alias{xwarnings}
\alias{xwarn}
\alias{purge_console}
\alias{purge_con}
\alias{xconsole}
\alias{xcon}
\alias{purge_pkg_prefix}
\alias{purge_pkg_pref}
\alias{xpkgprefix}
\alias{xpkgpref}
\alias{xpkg}
\title{Purge objects and parts of objects ('\code{x}' them out!)}
\usage{
purge(...)

x(...)

purge_plots(x = NULL)

purge_plot(x = NULL)

xplots(x = NULL)

xplot(x = NULL)

purge_global()

purge_all()

xglobal()

xall()

purge_warnings()

purge_warn()

xwarnings()

xwarn()

purge_console()

purge_con()

xconsole()

xcon()

purge_pkg_prefix(funs)

purge_pkg_pref(funs)

xpkgprefix(funs)

xpkgpref(funs)

xpkg(funs)
}
\arguments{
\item{...}{One or more \link[=cmp_chr_vec]{complete character vecs} containing names of objects to purge from the global environment.}

\item{funs}{\link[=cmp_chr_vec]{A complete character vec} of function names, possibly with package prefixes.}
}
\value{
\emph{A character vector}
\cr   \code{purge_pkg_prefix}
\cr   \code{purge_pkg_pref}
\cr   \code{xpkgprefix}
\cr   \code{xpkgpref}
\cr   \code{xpkg}
\cr\cr \code{NULL}
\cr   all others
}
\description{
All purge (\code{x}) functions include garbage collection.
\tabular{rl}{
  \code{purge_pkg_prefix}   \tab Strips package prefixes
\cr \code{purge_pkg_pref}   \tab   (e.g., \code{'pkg::'}) from a
\cr     \code{xpkgprefix}   \tab   vector of package names.
\cr       \code{xpkgpref}   \tab
\cr           \code{xpkg}   \tab
\cr                    \tab  
\cr \code{purge_warnings}   \tab Purges all cached warnings.
\cr     \code{purge_warn}   \tab  
\cr      \code{xwarnings}   \tab  
\cr          \code{xwarn}   \tab  
\cr                    \tab  
\cr   \code{purge_global}   \tab \strong{WARNING: Use with care!}
\cr      \code{purge_all}   \tab   \emph{These functions purge the}
\cr        \code{xglobal}   \tab   \emph{global environment.}
\cr           \code{xall}   \tab  
\cr                    \tab  
\cr    \code{purge_plots}   \tab Purges plots and, if \code{x}
\cr     \code{purge_plot}   \tab   is not \code{NULL}, prints \code{x}.
\cr         \code{xplots}   \tab   (assumes that if x is not
\cr          \code{xplot}   \tab   \code{NULL} it is a plot object.
\cr                    \tab  
\cr  \code{purge_console}   \tab Purges the console.
\cr      \code{purge_con}   \tab  
\cr       \code{xconsole}   \tab  
\cr           \code{xcon}   \tab  
\cr                    \tab  
\cr          \code{purge}   \tab Purges specific objects.
\cr              \code{x}   \tab  
}
}
\examples{
fun.names <- c("base::c", "uj::cmp_chr_scl", "run")
xpkg(fun.names)

\dontrun{
## build a ggplot scatterplot object (y.)
library(ggplot2)
ggp. <- ggplot(obj., aes(x, y)) + geom_point()

## print to console, wait for user, purge console
say("\n A message")
continue()
xcon()

## display a scatterplot, wait for user
plot(obj.$x, obj.$y)
continue()

## purge plots and print ggplot
xplot(ggp.)

## wait for user, purge plots again
continue()
xplot()

## generate warning, print warnings
sqrt(-1)
warnings()

## purge warnings, validate that warnings are purged
xwarn()
warnings()
}
}
\seealso{
Other extensions: 
\code{\link{atomize}()},
\code{\link{case}()},
\code{\link{cb}()},
\code{\link{comparable}()},
\code{\link{compatible}()},
\code{\link{declare}},
\code{\link{dups}()},
\code{\link{envir_vals}},
\code{\link{evals}},
\code{\link{failsafe_binaries}},
\code{\link{failsafe_is}},
\code{\link{failsafe}()},
\code{\link{fork}()},
\code{\link{is_unique}()},
\code{\link{n_is}()},
\code{\link{naming}},
\code{\link{na}()},
\code{\link{paths}},
\code{\link{rd}},
\code{\link{r}()},
\code{\link{sets}()},
\code{\link{stats0}},
\code{\link{swap}()}

Other meta: 
\code{\link{callers}()},
\code{\link{dot_args}},
\code{\link{pause}()},
\code{\link{ply}()},
\code{\link{recycling}},
\code{\link{run}()},
\code{\link{say}()}
}
\concept{extensions}
\concept{meta}
