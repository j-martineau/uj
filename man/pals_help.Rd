% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pals.R
\encoding{UTF-8}
\name{pals_help}
\alias{pals_help}
\alias{line_types}
\alias{fill_shapes}
\alias{open_shapes}
\alias{punc_shapes}
\alias{empty_shapes}
\alias{solid_shapes}
\alias{digit_shapes}
\alias{digit_shapes0}
\alias{letter_shapes}
\alias{LETTER_shapes}
\alias{colors_dark}
\alias{colors_bright}
\alias{colors_sensitive}
\alias{build_palette}
\alias{blank_shape}
\title{Plotting palettes}
\usage{
pals_help()

line_types(tot, unq = min(9, tot))

fill_shapes(tot, unq = min(5, tot))

open_shapes(tot, unq = min(5, tot))

punc_shapes(tot, unq = min(7, tot))

empty_shapes(tot, unq = min(5, tot))

solid_shapes(tot, unq = min(4, tot))

digit_shapes(tot, unq = min(9, tot))

digit_shapes0(tot, unq = min(10, tot))

letter_shapes(tot, unq = min(26, tot))

LETTER_shapes(tot, unq = min(26, tot))

colors_dark(tot, unq = min(6, tot))

colors_bright(tot, unq = min(6, tot))

colors_sensitive(tot, unq = min(12, tot))

build_palette(type, tot, unq)

blank_shape()
}
\arguments{
\item{tot}{A \link[=cmp_psw_scl]{complete positive whole-number scalar} indicating the number of values to return.}

\item{unq}{A positive whole-number scalar less than or equal to \code{tot} giving the number of unique values to be repeated until there are \code{tot} total values.}

\item{type}{A character scalar from \code{c('line.types', 'open.shapes', 'punc.shapes', 'fill.shapes','empty.shapes', 'solid.shapes', 'digit.shapes', 'digit.shapes0', 'letter.shapes', 'LETTER.shapes', 'colors.standard', 'colors.sensitive')}.}
}
\value{
\strong{A positive whole number vector} \cr\cr \code{fill_shapes}, \code{open_shapes}, \code{punc_shapes}, \code{empty_shapes}, \code{solid_shapes}, \code{digit_shapes}, \code{digit_shapes0}, \code{letter_shapes}, \verb{LETTER_shapes,} \emph{and possibly} \code{build_palette}
\cr\cr  \strong{A character vector}             \cr\cr \code{line_types}, \code{colors_dark}, \code{colors_bright}, \code{colors_sensitive} \emph{and possibly} \code{build_palette}
\cr\cr  \strong{A positive whole number scalar} \cr\cr \code{blank_shape}
}
\description{
Build line type, shape, and color palettes.
}
\details{
The functions in this family create palettes of various types from values of source vectors as defined below:
\tabular{lll}{
\strong{Function}           \tab \strong{Palette type}                                  \tab \strong{Source}            \cr
\code{colors_sensitive}     \tab 6 dark + 6 bright colorblind sensitive colors     \tab \code{v(colors.sensitive)} \cr
\code{colors_bright}        \tab 6 colorblind sensitive bright colors              \tab \code{v(colors.bright)}    \cr
\code{colors_dark}          \tab 6 colorblind-sensitive dark colors                \tab \code{v(colors.dark)}      \cr
\code{line_types}           \tab line types                                        \tab \code{v(line.types)}       \cr
\code{open_shapes}          \tab \verb{+ x ~ ^ v < >} as shapes                         \tab \code{v(open.shapes)}      \cr
\code{punc_shapes}          \tab \verb{! @ # $ \% & ?} as shapes                         \tab \code{v(punc.shapes)}      \cr
\code{fill_shapes}          \tab The \code{5} R fillable shapes                         \tab \code{v(fill.shapes)}      \cr
\code{empty_shapes}         \tab The \code{5} R empty shapes                            \tab \code{v(empty.shapes)}     \cr
\code{solid_shapes}         \tab The \code{4} R solid shapes                            \tab \code{v(solid.shapes)}     \cr
\code{digit_shapes}         \tab \code{1} to \code{9} as shapes                              \tab \code{v(digit.shapes)}     \cr
\code{digit_shapes0}        \tab \code{0} to \code{9} as shapes                              \tab \code{v(digit.shapes0)}    \cr
\code{letter_shapes}        \tab \code{a} to \code{z} as shapes                              \tab \code{v(letter.shapes)}    \cr
\code{LETTER_shapes}        \tab \code{A} to \code{Z} as shapes                              \tab \code{v(LETTER.shapes)}    \cr
\code{build_palette}        \tab \emph{any of the above}                                \tab \emph{any of the above}    \cr
\code{blank_shape}          \tab Space as a shape                                  \tab \code{v(blank.shape)}        }
\emph{NOTE}: \code{unq} defaults to the smaller of \code{tot} or the number of unique values available for the palette. If \code{unq} is larger than the number of unique values available for the palette, an error is generated, except in \code{create_palette} where \code{unq} is reduced to the number of available unique values if necessary.
}
\section{Functions}{
\itemize{
\item \code{line_types()}: Returns a linetype palette composed of up to 9 unique linetypes. Sourced from \code{v(line.types)}. Consists of solid, 4 on 2 off dashed, 2 on 2 off dashed, 1 on 1 off dotted, 4 on 1 off 1 on 1 off dash-dotted, 2 on 1 off 1 on 1 off dash-dotted, 1 on 1 off 1 on 4 off dotted, 1 on 1 off 1 on 2 off dotted, and 1 on 4 off 4 on 1 off dot-dashed.

\item \code{fill_shapes()}: Returns a palette of fillable plotting shapes composed of up to 5 unique shapes. Sourced from \code{v(fill.shapes)}. Consists of circle, square, up triangle, down triangle, diamond.

\item \code{open_shapes()}: Returns a palette of open plotting shapes composed of up to 5 unique shapes. Sourced from \code{v(open.shapes)}. Consists of \code{+}, \code{^} ,\code{v}, \code{<}, and \code{>} shapes.

\item \code{punc_shapes()}: Returns a palette of punctuation-based plotting shapes composed of up to 7 unique shapes. Sourced from \code{v(punc.shapes)}. Consists of \code{!}, \code{@}, \verb{#}, \code{$}, \verb{\%}, \code{&}, and \verb{?} shapes.

\item \code{empty_shapes()}: Returns a palette of empty (unfilled) plotting shapes composed of up to 5 unique shapes. Sourced from \code{v(empty.shapes)}. Consists of empty circle, square, up triangle, down triangle, and diamond.

\item \code{solid_shapes()}: Returns a palette of solid plotting shapes consisting of up to 4 unique shapes. Sourced from \code{v(solid.shapes)}. Consists of circle, square, up triangle, and diamond shapes.

\item \code{digit_shapes()}: Returns a palette of digit character plotting shapes consisting of up to 9 unique shapes. Sourced from \code{v(digit.shapes)}. Consists of the numerals from \code{1} to \code{9}.

\item \code{digit_shapes0()}: Returns a palette of digit character plotting shapes consisting of up to 10 unique shapes. Sourced from \code{v(digit.shapes0)}. Consists of numerals from \code{0} to \code{9}.

\item \code{letter_shapes()}: Returns a palette of lowercase letter plotting shapes consisting of up to 26 unique shapes. Sourced from \code{v(letter.shapes)}. Consists of English lowercase letters.

\item \code{LETTER_shapes()}: Returns a palette of uppercase letter plotting shapes consisting of up to 26 unique shapes. Sourced from \code{v(letter.shapes)}. Consists of English uppercase letters.

\item \code{colors_dark()}: Returns a palette of dark hexademical plotting colors consisting of up to 6 unique colors. Sources from \code{v(.HexColorVals)$colors.dark}. Consists of dark blue, orange, magenta, cyan, red-orange and grey-green.

\item \code{colors_bright()}: Returns a palette of bright hexademical plotting colors consisting of up to 6 unique colors. Sources from \code{v(.HexColorVals)$colors.bright}. Consists of bright blue, orange, magenta, cyan, red-orange and grey-green.

\item \code{colors_sensitive()}: Returns a palette of dark and bright hexademical plotting colors sensitive to most forms of colorblindness consisting of up to 12 unique colors. Sources from \code{v(.HexColorVals)$colors.sensitive}. Consists of dark, then bright blue, orange, magenta, cyan, red-orange and grey-green.

\item \code{build_palette()}: Builds a plotting palette of any type, where \code{type} is one of \code{c('colors.dark', 'colors.bright', 'colors.sensitive', 'line.types', 'letter.shapes', 'LETTER.shapes', 'digit.shapes0', 'digit.shapes', 'open.shapes', 'punc.shapes', 'empty.shapes', 'fill.shapes', 'solid.shapes')}.

\item \code{blank_shape()}: Returns a shape that prints nothing on a plot (i.e., a space as a plotting symbol).

}}
\seealso{
Other plots: 
\code{\link{color_funs}()},
\code{\link{gg_help}()},
\code{\link{gr}},
\code{\link{markdown_help}()},
\code{\link{u2u_help}()}
}
\concept{plots}
