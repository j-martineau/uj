% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ppp.R
\name{ppp}
\alias{ppp}
\alias{ppp_props}
\alias{is_valid_spec}
\alias{is_valid_combo}
\alias{is_valid_ppp}
\alias{ppp_from_combo}
\alias{combos_from_spec}
\alias{ppp_funs}
\alias{is_ppp_fun}
\alias{ippp}
\alias{ppp_all}
\alias{nll_or}
\alias{nas_or}
\alias{ppp_defs}
\alias{ppp_verbose}
\alias{ppp_concise}
\alias{alt_ppp_concise}
\title{All purpose property checking}
\usage{
ppp(x)

ppp_props(as.dtf = F)

is_valid_spec(spec)

is_valid_combo(combo)

is_valid_ppp(ppp)

ppp_from_combo(combo, valid = ppp_props())

combos_from_spec(spec, valid = ppp_props())

ppp_funs(as.dtf = F)

is_ppp_fun(x)

ippp(x, spec, ...)

ppp_all(spec, valid = ppp_props())

nll_or(x, ppp, ...)

nas_or(x, ppp, ...)

ppp_defs()

ppp_verbose(ppp = NULL, print = TRUE)

ppp_concise(combo)

alt_ppp_concise(spec)
}
\arguments{
\item{x}{An R object.}

\item{as.dtf}{A non-\code{NA} logical scalar indicating whether to return the result as a data.frame with column \code{1} containing property values and column \code{2} containing the property families.}

\item{ppp}{A \link[=cmp_chr_scl]{complete character scalar} containing one or more values from \code{ppp_vals()} separated by pipes and/or underscores. Combinations of properties can be specified by separating them with underscores. Separating properties or combinations of properties with pipes will result in a value of \code{TRUE} if any of them applies to \code{x}.}

\item{valid}{A \link[=cmp_chr_vec]{complete character vec} containing all properties considered valid.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}

\item{print}{A non-\code{NA} logical scalar indicating whether to print the property definition to the console.}
}
\value{
\itemize{
\item \strong{\verb{ppp_concise, alt_ppp_concise}}: a character scalar.
\item \strong{\verb{ppp, ppp_all, ppp_vals, pop_funs, ppp_from_combo, combos_from_ppp}}: a character vector.
\item \strong{\verb{All others}}: a logical scalar.
}
}
\description{
This set of functions provide utilities that bring together seven families of object properties defined by this package:\itemize{
\item \strong{\code{\link{bbb}}}: base.
\item \strong{\code{\link{ccc}}}: extended class.
\item \strong{\code{\link{ddd}}}: defined dimensionality.
\item \strong{\code{\link{eee}}}: effective dimensionality.
\item \strong{\code{\link{iii}}}: integrity (state of completeness).
\item \strong{\code{\link{mmm}}}: extended mode.
\item \strong{\code{\link{sss}}}: shape.
}
\strong{Individual property specifications} are character scalars containing exactly \code{3} characters (e.g., \code{'ord'}, \code{'dtf'}, \code{'d1D'}, \code{'rct'}).
\cr\cr
\strong{Combination (or conjunctive property specifications} are for properties that must co-occur. They are constructed by delimiting multiple individual properties with underscores (e.g., \code{'ord_dtf_d1D_rct'} or an equivalent underscore-delimited permutation).
\cr\cr
\strong{Alternate (compensatory) property specifications} give a way to indicate that if any one (individual or combination) property is satisfied the entire specification is satisfied. They are constructed by pipe-delimiting multiple individual or combination properties. For example, the specification \code{'ord|dtf_d1D||dtf_rct'} would be satisfied by an object with individual property \code{'ord'}, combined property \code{'dtf_d1D'}, or combined property \code{'dtf_rct'}.
\cr\cr
\strong{Universal property functions} address all families.
\itemize{
\item \strong{\code{ppp}}: gets all properties of all property families applicable to \code{x}
\item \strong{\code{ippp}}: evaluates whether an object satisfies the property specification in \code{ppp} subject to any additional restrictions supplied in \code{...}.
\item \strong{\code{nll_or}}: evaluates whether an object is either \code{NULL} or satisfies the property specification in argument \code{ppp} subject to any additional restrictions in \code{...}.
\item \strong{\code{nas_or}}: evaluates whether an object is either scalar \code{NA} or satisfies the property specification in argument \code{ppp} subject to any additional restrictions in \code{...}.
\item \strong{\code{all_props}}: gets all possible individual properties from all property families and all possible combination/conjunctive properties as checked by combined property functions.
\item \strong{\code{ppp_all}}: gets all constituent individual properties from the property specification in argument \code{ppp}.
\item \strong{\code{ppp_funs}}: gets the names of all property functions that check for a single property or a combined property without checking for any additional restrictions.
\item \strong{\code{ppp_defs}}: gets a data frame defining all individual properties of all property families.
\item \strong{\code{is_ppp_fun}}: evaluates whether a character scalar is the name of a property function (as listed by \code{ppp_funs}).
\item \strong{\code{is_valid_ppp}}: evaluates a character scalar property specification for validity (i.e., does it contain only single properties, valid combination properties,and/or valid alternate properties).
\item \strong{\code{ppp_from_combo}}: extracts each individual property value from a combination/conjunctive property specification.
\item \strong{\code{combos_from_ppp}}: extracts each individual or combination property specification from an alternative/compensatory property specification.
\item \strong{\code{ppp_verbose}}: gets a verbose definition of an individual property specification.
\item \strong{\code{ppp_concise}}: gets a plain-language, concise definition of an individual or combination/conjunctive property specification.
\item \strong{\code{alt_ppp_concise}}: gets a plain-language, concise definition of an alternative/compensatory property specification.
}
\strong{Individual property functions} associated with a single property family take the following forms where \code{xxx} is a placeholder for any given individual property and \code{yyy} is a placeholder for any given  property family.
\itemize{
\item \strong{\code{yyy}}: gets properties applicable to \code{x} from from property family \code{yyy}.
\item \strong{\code{ixxx}}: evaluates whether \code{x} has the property \code{xxx}.
\item \strong{\code{iyyy}}: evaluates whether \code{x} has one or more individual properties from property family \code{yyy}, subject to any restrictions supplied in \code{...}.
\item \strong{\code{yyy_props}}: gets all properties in the property family \code{yyy}.
}
\strong{Combination property functions} associated with a multiple property families take the following forms where \code{xxx}, \code{yyy}, and \code{zzz} are placeholders for properties from base, extended mode, and extended class property families, respectively:
\itemize{
\item \strong{\code{yyy_zzz}}: evaluates whether an object is of extended mode \code{yyy} and extended class \code{zzz}.
\item \strong{\code{xxx_zzz}}: evaluates whether an object is of base property \code{xxx} and extended class \code{zzz}.
\item \strong{\code{xxx_yyy}}: evaluates whether an object is of base property \code{xxx} and extended mode \code{yyy}.
\item \strong{\code{cmp_yyy}}: evaluates whether an object is complete (non-empty, atomic, containing no \code{NA} values) and of extended mode \code{yyy}.
\item \strong{\code{cmp_zzz}}: evaluates whether an object is complete (implying non-empty and atomic) and extended class \code{zzz}.
\item \strong{\code{cmp_yyy_zzz}}: evaluates whether an object is complete (non-empty and atomic), extended mode \code{yyy}, and extended class \code{zzz}.
\item \strong{\code{mmm_ccc_props}}: gets all combined extended mode + extended class properties.
\item \strong{\code{bbb_ccc_props}}: gets all combined base + extended class properties.
\item \strong{\code{bbb_mmm_props}}: gets all combined base + extended mode properties.
\item \strong{\code{cmp_ccc_props}}: gets all combined completeness + extended class properties.
\item \strong{\code{cmp_mmm_props}}: gets all combined completeness + extended mode properties.
\item \strong{\code{cmp_mmm_ccc_props}}: gets all combined completeness + extended mode + extended class properties.
}
}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{rl}{
\verb{max,maxr,maxc}   \tab Scalar maximum valid numbers of element, rows, and columns, respectively..
\cr                   \tab  
\cr \verb{min,minr,minc}   \tab Scalar minimum valid numbers of element, rows, and columns, respectively..
\cr                   \tab  
\cr   \verb{lt,le,ge,gt}   \tab Scalar less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively.
\cr                   \tab  
\cr       \verb{n,nr,nc}   \tab A vector of valid numbers of elements, rows, and columns, respectively..
\cr                   \tab  
\cr          \code{vals}   \tab A vector of valid values.
}
}

\seealso{
Other props: 
\code{\link{as_mmm}},
\code{\link{bbb_ccc}()},
\code{\link{bbb_mmm}()},
\code{\link{bbb}()},
\code{\link{ccc}()},
\code{\link{cmp_ccc}()},
\code{\link{cmp_mmm_ccc}()},
\code{\link{cmp_mmm}()},
\code{\link{comparable}()},
\code{\link{compatible}()},
\code{\link{ddd}()},
\code{\link{eee}()},
\code{\link{iii}()},
\code{\link{meets}()},
\code{\link{mmm_ccc}()},
\code{\link{mmm}()},
\code{\link{sss}()}
}
\concept{props}
