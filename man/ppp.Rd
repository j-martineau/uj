% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ppp.R
\encoding{UTF-8}
\name{ppp}
\alias{ppp}
\alias{ppp_or_funs}
\alias{all_props}
\alias{prop_funs}
\alias{is_prop}
\alias{is_prop_fun}
\alias{is_prop_spec}
\alias{is_prop_combo}
\alias{props_from_spec}
\alias{combos_from_spec}
\alias{props_from_combo}
\alias{ippp}
\alias{nll_or}
\alias{nas_or}
\alias{prop_defs}
\alias{prop_verbose}
\alias{combo_concise}
\alias{spec_concise}
\title{All purpose property checking}
\usage{
ppp(x)

ppp_or_funs()

all_props(as.dtf = F)

prop_funs(as.dtf = F)

is_prop(prop)

is_prop_fun(fun)

is_prop_spec(spec)

is_prop_combo(combo)

props_from_spec(spec, valid = uj::all_props())

combos_from_spec(spec, valid = uj::all_props())

props_from_combo(combo, valid = uj::all_props())

ippp(x, spec, ...)

nll_or(x, spec, ...)

nas_or(x, spec, ...)

prop_defs()

prop_verbose(prop, print = TRUE)

combo_concise(combo)

spec_concise(spec)
}
\arguments{
\item{x}{An R object.}

\item{as.dtf}{A non-\code{NA} logical scalar indicating whether to return the result as a data.frame with column \code{1} containing property values and column \code{2} containing the property families.}

\item{spec}{A \link[=cmp_chr_scl]{complete character scalar} containing one or more values from \code{ppp_vals()} separated by pipes and/or underscores. Combinations of properties can be specified by separating them with underscores. Separating properties or combinations of properties with pipes will result in a value of \code{TRUE} if any of them applies to \code{x}.}

\item{valid}{A \link[=cmp_chr_vec]{complete character vec} containing all properties considered valid.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}

\item{print}{A non-\code{NA} logical scalar indicating whether to print the property definition to the console.}
}
\value{
\emph{A character vector}
\cr   \code{combos_from_spec}
\cr   \code{props_from_combo}
\cr   \code{props_from_spec}
\cr   \code{ppp_or_funs}
\cr   \code{all_props}
\cr   \code{prop_funs}
\cr   \code{ppp}
\cr\cr \emph{A character scalar}
\cr   \code{combo_concise}
\cr   \code{prop_verbose}
\cr   \code{spec_concise}
\cr\cr \emph{A logical scalar}
\cr   \code{is_valid_combo}
\cr   \code{is_valid_prop}
\cr   \code{is_valid_spec}
\cr   \code{is_prop_fun}
\cr   \code{nas_or}
\cr   \code{nll_or}
\cr   \code{ippp}
}
\description{
\emph{Property families defined by this package} \tabular{rl}{
  \code{\link{bbb}}   \tab basic properties
\cr \code{\link{ccc}}   \tab xclass (extended class)
\cr \code{\link{ddd}}   \tab defined.d (defined dimensionality)
\cr \code{\link{eee}}   \tab effective.d (effective dimensionality)
\cr \code{\link{iii}}   \tab integrity (completeness, uniqueness)
\cr \code{\link{mmm}}   \tab xmode (extended modes)
\cr \code{\link{sss}}   \tab shape (geometric shape)
}
\cr \emph{Types of property specs} \tabular{rl}{
  \emph{single}   \tab \link[=ich3]{3-char} scalars (i.e., \code{all(nchar(.) == 3)} with all values in \code{all_props()}. For example, \verb{'ord', 'dtf', 'd1D',} and \code{'rct'} are \emph{single} property specs.
\cr  \emph{combo}   \tab Character scalars containing multiple underscore-delimited \emph{single} properties, indicating that those \emph{single} properties must co-occur. For example, the \emph{combo} property spec \code{'ord_dtf_d1D_rct'} (or an equivalent underscore-delimited permutation) indicates that all four \emph{single} properties must co-occur to satisfy the spec.
\cr \emph{option}   \tab Character scalars containing multiple pipe-delimited \emph{combo} and/or \emph{single} property specs. For example, the \emph{option} property spec \code{'ord|dtf_d1D|dtf_rct'} would be satisfied by an object with \emph{single} property \code{'ord'}, \emph{combo} property \code{'dtf_d1D'}, \strong{or} \emph{combo} property \code{'dtf_rct'}.
\cr   \emph{flex}   \tab A \emph{single}, \emph{combo}, or \emph{option} property spec as defined above.
}
\cr \emph{Functions for property spec decomposition} \tabular{rl}{
  \code{props_from_combo}   \tab What are the constituent \emph{single} properties of a \emph{combo} property spec?
\cr \code{combos_from_spec}   \tab What are the constituent \emph{combo} properties in a \emph{flex} property spec?
\cr  \code{props_from_spec}   \tab What are the \emph{unique} constituent \emph{single} properties in a \emph{flex} property spec?
}
\cr \emph{Functions to check whether a value is a valid property spec} \tabular{rl}{
  \code{is_prop_combo}   \tab Is \code{combo} a valid \emph{combo} property spec?
\cr \code{is_prop_spec}   \tab Is \code{spec} a valid \emph{flex} property spec?
\cr  \code{is_prop_fun}   \tab Is \code{fun} the name of a dedicated property checking function?
\cr      \code{is_prop}   \tab Is \code{prop} a valid \emph{single} property?
}
\cr \emph{Functions to define properties and property specs} \tabular{rl}{
  \code{combo_concise}   \tab How is a \emph{combo} property spec (concisely) defined?
\cr \code{spec_concise}   \tab How is an \emph{options} property spec (concisely) defined?
\cr \code{prop_verbose}   \tab How is a \emph{single} property (verbosely) defined?
\cr    \code{prop_defs}   \tab What are the definitions of all possible \emph{single} properties (returned as a data.frame)?
}
\cr \emph{Functions to list names of dedicated property-checking functions} \tabular{rl}{
  \code{ppp_or_funs}   \tab What dedicated functions check \code{x} for either special values or a match to a \emph{flex} property spec?
\cr \code{prop_funs}   \tab What dedicated functions check \code{x} for a match to a specific \emph{single} or \emph{combo} property?
\cr \code{all_props}   \tab What is the complete set of all possible \emph{single} properties?
}
\cr \emph{Functions to check object against arbitrary property specs} \tabular{rl}{
  \code{nas_or}   \tab Is \code{x} either \code{NA} or a match to the \emph{flex} property spec in \code{spec}?
\cr \code{nll_or}   \tab Is \code{x} either \code{NULL} or a match to the \emph{flex} property spec in \code{spec}
\cr   \code{ippp}   \tab Is \code{x} a match to the \emph{flex} property spec in \code{spec}?
}
\cr \emph{Functions to list all of an object's} single \emph{properties across property families} \tabular{rl}{
  \code{ppp}   \tab What are all of \code{x}'s \emph{single} properties compiled from all property families?
}
\cr For convenience, property functions from other function families are described in \emph{details}.
}
\details{
\emph{Functions to list all} single \emph{properties in a property family} \tabular{rl}{
  \code{bbb_props}   \tab \link[=bbb]{basic}
\cr \code{ccc_props}   \tab \link[=ccc]{xclass}
\cr \code{ddd_props}   \tab \link[=ddd]{defined.d}
\cr \code{eee_props}   \tab \link[=eee]{effective.d}
\cr \code{iii_props}   \tab \link[=iii]{integrity}
\cr \code{mmm_props}   \tab \link[=mmm]{xmode}
\cr \code{sss_props}   \tab \link[=sss]{shape}
}
\cr \emph{Functions to list names of dedicated property-checking functions} \tabular{rl}{
  \code{cmp_mmm_ccc_funs}   \tab integrity = \code{'cmp'} + xmode + xclass
\cr \code{unq_mmm_ccc_funs}   \tab integrity = \code{'unq'} + xmode + xclass
} \tabular{rl}{
  \tab  
\cr   \code{cmp_ccc_funs}   \tab integrity = \code{'cmp'} + xclass
\cr   \code{cmp_mmm_funs}   \tab integrity = \code{'cmp'} + xmode
\cr   \code{unq_ccc_funs}   \tab integrity = \code{'unq'} + xclass
\cr   \code{unq_mmm_funs}   \tab integrity = \code{'unq'} + xmode
} \tabular{rl}{
  \tab  
\cr   \code{bbb_ccc_funs}   \tab basic + xclass
\cr   \code{bbb_mmm_funs}   \tab basic + xmode
\cr   \code{mmm_ccc_funs}   \tab xmode + xclass
} \tabular{rl}{
  \tab  
\cr   \code{bbb_funs}   \tab \link[=bbb]{basic}
\cr   \code{ccc_funs}   \tab \link[=ccc]{xclass}
\cr   \code{ddd_funs}   \tab \link[=ddd]{defined.d}
\cr   \code{eee_funs}   \tab \link[=eee]{effective.d}
\cr   \code{iii_funs}   \tab \link[=iii]{integrity}
\cr   \code{mmm_funs}   \tab \link[=mmm]{xmode}
\cr   \code{sss_funs}   \tab \link[=sss]{shape}
}
\cr \emph{Dedicated functions to check an object for a specific} combo \emph{or} single \emph{property}
\cr\cr For these functions, an uppercase letter repeated three times is a placeholder for the value of an arbitrary single property from the associated property family.
\tabular{rl}{
  \code{cmp_MMM_CCC}   \tab integrity = \code{'cmp'} + xmode=\code{'MMM'} + xclass = \code{'CCC'}
\cr \code{unq_MMM_CCC}   \tab integrity = \code{'unq'} + xmode=\code{'MMM'} + xclass = \code{'CCC'}
} \tabular{rl}{
  \tab  
\cr   \code{cmp_CCC}   \tab integrity = \code{'cmp'} + xclass = \code{'CCC'}
\cr   \code{cmp_MMM}   \tab integrity = \code{'cmp'} + xmode = \code{'MMM'}
} \tabular{rl}{
  \tab  
\cr   \code{unq_CCC}   \tab integrity = \code{'unq'} + xclass = \code{'CCC'}
\cr   \code{unq_MMM}   \tab integrity = \code{'unq'} + xmode = \code{'MMM'}
} \tabular{rl}{
  \tab  
\cr   \code{BBB_CCC}   \tab basic = \code{'BBB'} + xclass = \code{'CCC'}
\cr   \code{BBB_MMM}   \tab basic = \code{'BBB'} + xmode = \code{'MMM'}
\cr   \code{MMM_CCC}   \tab xmode = \code{'MMM'} + xclass = \code{'CCC'}
\cr   \code{SSS_CCC}   \tab shape = \code{'SSS'} + xclass = \code{'CCC'}
} \tabular{rl}{
  \tab  
\cr   \code{iBBB}   \tab \link[=bbb]{basic} = \code{'BBB'}
\cr   \code{iCCC}   \tab \link[=ccc]{xclass} = \code{'CCC'}
\cr   \code{iDDD}   \tab \link[=ddd]{defined.d} = \code{'DDD'}
\cr   \code{iEEE}   \tab \link[=eee]{effective.d} = \code{'EEE'}
\cr   \code{iIII}   \tab \link[=iii]{integrity} = \code{'III'}
\cr   \code{iMMM}   \tab \link[=mmm]{xmode} = \code{'MMM'}
\cr   \code{iSSS}   \tab \link[=sss]{shape} = \code{'SSS'}
}
\cr \emph{Functions to check an object against an arbitrary} combo \emph{property specs}
\cr\cr For these functions, an uppercase letter repeated three times is a placeholder for the value of an arbitrary single property from the associated property family.
\tabular{rl}{
  \code{cmp_mmm_ccc}   \tab integrity = \code{'cmp'} + arbitrary xmode + arbitrary xclass
\cr \code{unq_mmm_ccc}   \tab integrity = \code{'unq'} + arbitrary xmode + arbitrary xclass
} \tabular{rl}{
  \tab  
\cr   \code{bbb_ccc}   \tab arbitrary basic property + arbitrary xclass
\cr   \code{bbb_mmm}   \tab arbitrary basic property + arbitrary xmode
\cr   \code{mmm_ccc}   \tab arbitrary xmode + arbitrary xclass
\cr   \code{sss_ccc}   \tab arbitrary shape + arbitrary xclass
} \tabular{rl}{
  \tab  
\cr   \code{cmp_ccc}   \tab integrity = \code{'cmp'} + arbitrary xclass
\cr   \code{cmp_mmm}   \tab integrity = \code{'cmp'} + arbitrary xmode
} \tabular{rl}{
  \tab  
\cr   \code{unq_ccc}   \tab integrity = \code{'unq'} + arbitrary xclass
\cr   \code{unq_mmm}   \tab integrity = \code{'unq'} + arbitrary xmode
}
\cr \emph{Functions to check objects against} flex \emph{property specs in a single family} \tabular{rl}{
  \code{ibbb}   \tab \link[=bbb]{basic}
\cr \code{iccc}   \tab \link[=ccc]{xclass}
\cr \code{iddd}   \tab \link[=ddd]{defined.d}
\cr \code{ieee}   \tab \link[=eee]{effective.d}
\cr \code{iiii}   \tab \link[=iii]{integrity}
\cr \code{immm}   \tab \link[=mmm]{xmode}
\cr \code{isss}   \tab \link[=sss]{shape}
}
\cr \emph{Functions to retrieve all of an object's} single \emph{properties of a specific family} \tabular{rl}{
  \code{bbb}   \tab \link[=bbb]{basic}
\cr \code{ccc}   \tab \link[=ccc]{xclass}
\cr \code{ddd}   \tab \link[=ddd]{defined.d}
\cr \code{eee}   \tab \link[=eee]{effective.d}
\cr \code{iii}   \tab \link[=iii]{integrity}
\cr \code{mmm}   \tab \link[=mmm]{xmode}
\cr \code{sss}   \tab \link[=sss]{shape}
}
}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{rl}{
  \verb{max, maxr, maxc}   \tab Scalar maximum valid numbers of element, rows, and columns, respectively.
\cr \verb{min, minr, minc}   \tab Scalar minimum valid numbers of element, rows, and columns, respectively.
\cr  \verb{lt, le, ge, gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively.
\cr       \verb{n, nr, nc}   \tab A vector of valid numbers of elements, rows, and columns, respectively.
\cr            \code{vals}   \tab A vector of valid values.
}
}

\examples{
nas_or("5", "ch1")
nas_or(NA, "ch1")

nll_or(NULL, "ch1")
nll_or("1", "ch1")
nll_or(7, "ch1")

all_props()
prop_funs()

spec_concise("nll|cmp_psw_vls|ch1_scl")
combo_concise("cmp_psw_vls")
prop_verbose("srt")
prop_verbose("nnw")

combos_from_spec("nll|cmp_psw_vls|ch1_scl")
props_from_spec("nll|cmp_psw_vls|ch1_scl")
props_from_combo("cmp_psw_vls")

ippp("7", "nll|cmp_psw_vls|ch1_scl")
ippp(NULL, "nll|cmp_psw_vls|ch1_scl")
ippp("35", "nll|cmp_psw_vls|ch1_scl")

is_prop_combo("letter")
is_prop_combo("cmp_psw_vls")
is_prop_spec("nll|cmp_psw_vls|ch1_scl")

is_prop("vls")
is_prop("18")

is_prop_fun("cmp_psw_vls")
is_prop_fun("18")

ppp(letters)
prop_defs()
}
\seealso{
Other properties: 
\code{\link{as_mmm}},
\code{\link{bbb_mmm}()},
\code{\link{bbb}()},
\code{\link{cls}()},
\code{\link{cmp_ccc}()},
\code{\link{cmp_mmm}()},
\code{\link{comparable}()},
\code{\link{compatible}()},
\code{\link{ddd}()},
\code{\link{eee}()},
\code{\link{err_check}()},
\code{\link{iii}()},
\code{\link{is_unique}()},
\code{\link{meets}()},
\code{\link{mmm_ccc}()},
\code{\link{mmm}()},
\code{\link{sss}()},
\code{\link{unq_ccc}()}
}
\concept{properties}
