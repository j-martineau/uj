% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_xxx.R
\encoding{UTF-8}
\name{check_xxx}
\alias{check_xxx}
\alias{check_t}
\alias{check_tf}
\alias{check_lgl}
\alias{check_nll_or}
\alias{check_nas_or}
\alias{check_cls}
\alias{check_pop}
\alias{check_funs}
\alias{check_spec}
\alias{check_vals}
\alias{check_chars}
\alias{check_dots}
\alias{check_when}
\alias{check_fail}
\title{Incremental Error Checking}
\usage{
check_xxx()

check_t(..., .d = " ")

check_tf(...)

check_lgl(..., .na = FALSE, .extras = NULL)

check_nll_or(.funs, ..., .vals = NULL)

check_nas_or(.funs, ..., .vals = NULL)

check_cls(.cls, ...)

check_pop(...)

check_funs(.funs, ..., .vals = NULL)

check_spec(.spec, ..., .na = F)

check_vals(.vals, ..., .a = TRUE, .na = FALSE)

check_chars(.chars, ..., .a = TRUE)

check_dots(.spec, ..., .named = FALSE)

check_when(.whens, .vals, ...)

check_fail(...)
}
\arguments{
\item{...}{Differs by function in terms of whether they are named, how many there are, and their \link[=ppp]{property requirements} as described in the \emph{functions} section.}

\item{.d}{A non-\code{NA} character scalar delimiter for collapsing \code{...} into an error message.}

\item{.na}{A logical scalar indicating whether \code{NA} values qualify as \code{'logical'}.}

\item{.extras}{\code{NULL} or a \link[=cmp_atm]{complete atomic object} containing additional valid values.}

\item{.funs}{A \link[=cmp_chr_vec]{complete character vec} containing \code{1} or more \link[=prop_funs]{property function} names.}

\item{.vals}{A \link[=cmp_atm]{complete atomic object} of length \code{length(.whens)}.}

\item{.spec}{A \link[=cmp_chr_scl]{complete character scalar} containing a \link[=is_prop_spec]{property spec}.}

\item{.a}{A logical scalar indicating whether to \link[=av]{atomize} \code{...} args.}

\item{.chars}{A \link[=cmp_str]{complete string object} containing}

\item{.named}{A logical scalar indicating whether \code{...} args must uniquely named without using \code{""}.}

\item{.whens}{A \link[=pop_atm]{populated atomic object} of length \code{length(.vals)}.}

\item{.fun}{A character scalar naming the function generating an error or errors.}
}
\value{
**A **\code{\link[base]{simpleError}} \strong{object} \cr\cr \code{getterr}
\cr\cr  \strong{A character vector}                           \cr\cr \code{banked_Errs}
\cr\cr  All others are called for their side effects.
}
\description{
Conditionally bank error messages in the immediate environment of a function to allow for exhaustive error checking before throwing an exception. Results in a possibly multiple-error, accumulated message to be processed upon completion of error checking.
}
\section{Functions}{
\itemize{
\item \code{check_t()}: Checks named \code{...} arguments for scalar \code{TRUE}-ness. If any named \code{...} argument is not scalar \code{TRUE}, collapses \emph{unnamed} \code{...} args to an error message template, replacing the escape sequence \code{'{@}'} with each non-qualifying \emph{named} \code{...} arg's name.

\item \code{check_tf()}: Checks named \code{...} arguments for scalar \code{TRUE}-ness or scalar \code{FALSE}-ness. If any named \code{...} argument is neither scalar \code{TRUE} nor scalar \code{FALSE}, banks an error indicating that the argument must be scalar \code{TRUE} or scalar \code{FALSE}. NOTE: unnamed \code{...} arguments are not valid.

\item \code{check_lgl()}: Checks each named \code{...} arg for scalar \code{TRUE}-ness, scalar \code{FALSE}-ness, scalar \code{NA}-ness (if \code{.na} is scalar \code{TRUE}), or scalar membership in \code{.extras} (when \code{.extras} is a \link[=cmp_atm]{complete atomic object}). Banks an error for each \code{...} that does not qualify. NOTE: unnamed \code{...} arguments are not valid.

\item \code{check_nll_or()}: Checks each named \code{...} argument for \code{NULL}-ness or for any property describe by any property function named in character argument \code{.funs}. Banks an automatically-generated error message for each \code{...} argument that does not qualify. NOTE: Unnamed \code{...} arguments are not valid.

\item \code{check_nas_or()}: Checks each named \code{...} argument for scalar \code{NA}-ness or for any property describe by any property function named in character argument \code{.funs}. Banks an automatically-generated error message for each \code{...} argument that does not qualify. NOTE: Unnamed \code{...} arguments are not valid.

\item \code{check_cls()}: Checks each named \code{...} argument for any one the classes named in character argument \code{.cls}. Banks an automatically-generated error message for each \code{...} argument that does not qualify. NOTE: Unnamed \code{...} arguments are not valid.

\item \code{check_pop()}: Checks each named \code{...} for \link[=POP]{populated-ness} (i.e., non-\code{NULL} and not of length \code{0}). Banks an error for each \code{...} argument that does not qualify. NOTE: Unnamed \code{...} arguments are not valid.

\item \code{check_funs()}: Checks each named \code{...} argument for a match to any of the property functions named in \code{.funs}, and if there is a match and atomic argument \code{.vals} is non-\code{NULL}, whether the values are all contained in atomic argument \code{.vals}. Banks an error for each \code{...} argument that does not qualify. NOTE: Unname \code{...} arguments are not valid.

\item \code{check_spec()}: Checks each named \code{...} argument for a match to the property spec in character argument \code{.spec} with the additional check for disallowed \code{NA} values if logical scalar argument \code{.na = FALSE}. Banks an error for each \code{...} argument that does not qualify. NOTE: Unnamed \code{...} arguments are not valid.

\item \code{check_vals()}: Checks each named \code{...} argument for atomic-ness and for containing only the atomic values given in \code{.vals}. Banks an error for each non-qualifying \code{...} argument. NOTE: Unnamed \code{...} arguments are not valid.

\item \code{check_chars()}: Checks each named \code{...} argument (assumed to be of mode \code{'character'}) for whether it contains only the characters contained in the character argument \code{.chars}. When \code{.a = TRUE}, \link[=av]{atomizes} \code{...} before value checking. Banks an error for each \code{...} argument that does not qualify. NOTE: Unnamed \code{...} arguments are not valid.

\item \code{check_dots()}: Checks each \code{...} argument for a match to at least one value of the property spec on character argument \code{.spec}. Optionally checks whether all \code{...} arguments are named (when \code{.named = TRUE}). Banks an error for missing \code{...} argument names (if there are an missing names and \code{.named = TRUE}). Also banks an error for any non-qualifying \code{...} argument. for whether it contains only the characters contained in the character argument \code{.chars}. When \code{.a = TRUE}, \link[=av]{atomizes} \code{...} before value checking. Banks an error for each \code{...} argument that does not qualify.

\item \code{check_when()}: Assumes two named, atomic, scalar \code{...} arguments. Checks that the value of the second named \code{...} argument is appropriate given the value of the first \code{...} argument by identifying which element of \code{.whens} is equal to the value of the first \code{...} argument, and checking the corresponding element of \code{.vals} against the second \code{...} argument. Banks an error if the value of the first and the value of the second \code{...} arguments do not pass the check. NOTE: There must be only two named \code{...} arguments and unnamed \code{...} arguments are not valid.

\item \code{check_fail()}: Checks each named \code{...} argument for validity (i.e., evaluating an argument does not produce an error). Banks an error for each \code{...} argument that does not qualify. NOTE: Unnamed \code{...} arguments are not valid.

}}
\examples{
egStopper <- function() {stopperr('stopper demo', pkg = 'ppp')}
egErrs    <- function() {Errs('Errs demo1', 'Errs demo2', pkg = 'ppp')}
egErr     <- function() {err('err', 'demo', pkg = 'ppp')}
egErrors  <- function(..., tf = NA, lgl = 42, not = FALSE, pop = NULL,
                           fail = simpleError('error'), funs = 2:4, spec = 42,
                           vals = 42, class = 42, nas.or = NULL, nll.or = NA,
                           chars = '5', when.a = "error.a", when.b = "error.b") {
  bankerr(...elt(1))
  bankErrs(...elt(2), ...elt(3))
  check_tf(tf = tf)
  check_lgl(lgl = lgl)
  check_t(not = not)
  check_pop(pop = pop)
  check_fail(fail = fail)
  check_funs(c('cmp_ch1_vec', 'cmp_ngw_vec'), funs = funs)
  check_spec('cmp_ch1_vec|nll|nas', spec = spec)
  check_vals(letters, vals = vals)
  check_cls('data.frame', class)
  check_nas_or(c('cmp_ch1_vec', 'cmp_ngw_vec'), nas.or = nas.or)
  check_nll_or(c('cmp_ch1_vec', 'cmp_ngw_vec'), nll.or = nll.or)
  check_chars(letters, chars = chars)
  check_when(when.a = when.a, when.b = when.b, c('error.a', ''), c('error.b', ''))
  checkerr(pkg = 'ppp')
}
\dontrun{
  egstopperr()
  getterr()
  purgerr()
  getter()
  egErrs()
  egErrs()
  egErrors()
}
}
\seealso{
Other Errs: 
\code{\link{stopperr}()}
}
\concept{Errs}
