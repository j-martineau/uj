% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mmm.R
\name{mmm}
\alias{mmm}
\alias{mmm_props}
\alias{is_mmm_spec}
\alias{immm}
\alias{ich1}
\alias{ich3}
\alias{ichr}
\alias{iclr}
\alias{ievn}
\alias{ifac}
\alias{ifrc}
\alias{iind}
\alias{ilgl}
\alias{ineg}
\alias{ingw}
\alias{inng}
\alias{innw}
\alias{inps}
\alias{inpw}
\alias{inst}
\alias{inum}
\alias{iodd}
\alias{iord}
\alias{ipct}
\alias{ipos}
\alias{ippn}
\alias{ipsw}
\alias{isrt}
\alias{istr}
\alias{iuno}
\alias{iwhl}
\title{Extended mode properties}
\usage{
mmm(x)

mmm_props()

is_mmm_spec(spec)

immm(x, spec, ...)

ich1(x, ...)

ich3(x, ...)

ichr(x, ...)

iclr(x, ...)

ievn(x, ...)

ifac(x, ...)

ifrc(x, ...)

iind(x, ...)

ilgl(x, ...)

ineg(x, ...)

ingw(x, ...)

inng(x, ...)

innw(x, ...)

inps(x, ...)

inpw(x, ...)

inst(x, ...)

inum(x, ...)

iodd(x, ...)

iord(x, ...)

ipct(x, ...)

ipos(x, ...)

ippn(x, ...)

ipsw(x, ...)

isrt(x, ...)

istr(x, ...)

iuno(x, ...)

iwhl(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{spec}{\code{NULL} or a \link[=cmp_chr_scl]{complete character vec} containing one or more extended mode properties from \code{mmm_props()}. Extended mode properties may be pipe-delimited. If there are multiple properties in \code{spec}, \code{x} is inspected for a match to any of the specified properties.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\value{
\itemize{
\item \strong{\code{mmm}}: a character scalar/vector.
\item \strong{\code{mmm_vals}}: a character vector.
\item \strong{\verb{immm, ixxx, is_mmm_spec}}: a logical scalar.
}
}
\description{
Extended modes are defined for non-empty atomic objects. For all other objects, the extended mode is \code{NULL}. These are not formally defined classes, but are evaluated dynamically based on the current characteristics of an object.
\cr\cr
Atomic objects that contain only \code{NA} values are of every extended mode, as they can be coerced to any mode without introducing new \code{NA} values. The following tables gives extended mode values, names, and requirements.
\cr\cr
\strong{Character extended mode properties}
\itemize{
\item \strong{\code{'chr'} (character)}: character.
\item \strong{\code{'clr'} (color)}: character color representation.
\item \strong{\code{'ch1'} (onechar)}: single character values.
\item \strong{\code{'str'} (string)}: no blank ("") values.
}
\strong{Categorical extended mode properties}
\itemize{
\item \strong{\code{'fac'} (factor)}: factor.
\item \strong{\code{'lgl'} (logical)}: logical.
\item \strong{\code{'ord'} (ordered)}: ordered factor.
\item \strong{\code{'uno'} (unordered)}: Unordered factor.
}
\strong{Combination extended mode properties}
\itemize{
\item \strong{\code{'ind'} (indexer)}: logical/positive whole number.
\item \strong{\code{'srt'} (sortable)}: character/logical/numeric/ordered factor.
\item \strong{\code{'nst'} (non-sortable)}: atomic but not sortable.
}
\strong{Numeric extended mode properties}
\itemize{
\item \strong{\code{'num'} (numeric)}: numeric.
\item \strong{\code{'frc'} (fractional)}: fractional numeric.
\item \strong{\code{'pct'} (percent)}: percentage numeric (in the interval \verb{[0, 100]}).
\item \strong{\code{'ppn'} (proportion)}: proportion numeric (in the interval \verb{[0, 1]}).
\item \strong{\code{'pos'} (positive)}: positive numeric.
\item \strong{\code{'neg'} (negative)}: negative numeric.
\item \strong{\code{'nng'} (non-neg)}: non-negative numeric.
\item \strong{\code{'nps'} (non-pos)}: non-positive numeric.
\item \strong{\code{'whl'} (whole)}: whole number.
\item \strong{\code{'psw'} (pos-whole)}: positive whole-number.
\item \strong{\code{'nnw'} (non-neg-whole)}: non-negative whole-number.
\item \strong{\code{'npw'} (non-pos-hole)}: non-positive whole-number.
\item \strong{\code{'ngw'} (neg-whole)}: negative whole-number.
\item \strong{\code{'evn'} (even)}: even (whole) number.
\item \strong{\code{'odd'} (odd)}: odd (whole) number.
}
\strong{Functions}
\itemize{
\item \strong{\code{mmm}}: gets a character vector containing all extended mode properties possessed by \code{x}.
\item \strong{\code{ixxx}}: evaluates whether \code{x} possesses the extended mode property \code{xxx} (a placeholder for any given extended mode property value), subject to any restrictions in \code{...}.
\item \strong{\code{immm}}: evaluates whether \code{x} possesses one or more (possibly pipe-delimited) extended mode properties in \code{spec}, subject to any restrictions in \code{...}.
\item \strong{\code{mmm_props}}: gets a character vector of all possible extended mode property values.
\item \strong{\code{is_mmm_spec}}: evaluates whether \code{spec} is a valid extended mode property specification.
}
}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\itemize{
\item \strong{\code{n}}: a vector of valid lengths/numbers of elements.
\item \strong{\code{nr}}: a vector of valid numbers of rows.
\item \strong{\code{nc}}: a vector of valid numbers of columns.
\item \strong{\code{min}}: a scalar minimum valid length/number of element.
\item \strong{\code{minr}}: a scalar minimum valid number of rows.
\item \strong{\code{minc}}: a scalar minimum valid number of columns.
\item \strong{\code{max}}: a scalar maximum valid length/number of element.
\item \strong{\code{maxr}}: a scalar maximum valid number of rows.
\item \strong{\code{maxc}}: a scalar maximum valid number of columns.
\item \strong{\code{vals}}: a vector of valid values.
\item \strong{\code{lt}}: a scalar less-than (exclusive upper) bound.
\item \strong{\code{le}}: a scalar less-than-or-equal (inclusive upper) bound
\item \strong{\code{ge}}: a scalar greater-than-or-equal (inclusive lower) bound.
\item \strong{\code{gt}}: a scalar greater-than bound (exclusive lower) bound.
}
}

\seealso{
Other props: 
\code{\link{as_mmm}},
\code{\link{bbb_ccc}()},
\code{\link{bbb_mmm}()},
\code{\link{bbb}()},
\code{\link{ccc}()},
\code{\link{cmp_ccc}()},
\code{\link{cmp_mmm_ccc}()},
\code{\link{cmp_mmm}()},
\code{\link{comparable}()},
\code{\link{compatible}()},
\code{\link{ddd}()},
\code{\link{eee}()},
\code{\link{iii}()},
\code{\link{meets}()},
\code{\link{mmm_ccc}()},
\code{\link{ppp}()},
\code{\link{sss}()}
}
\concept{props}
