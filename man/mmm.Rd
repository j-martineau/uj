% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mmm.R
\name{mmm}
\alias{mmm}
\alias{mmm_props}
\alias{is_mmm_spec}
\alias{immm}
\alias{ich1}
\alias{ich3}
\alias{ichr}
\alias{iclr}
\alias{ievn}
\alias{ifac}
\alias{ifrc}
\alias{iind}
\alias{ilgl}
\alias{ineg}
\alias{ingw}
\alias{inng}
\alias{innw}
\alias{inps}
\alias{inpw}
\alias{inst}
\alias{inum}
\alias{iodd}
\alias{iord}
\alias{ipct}
\alias{ipos}
\alias{ippn}
\alias{ipsw}
\alias{isrt}
\alias{istr}
\alias{iuno}
\alias{iwhl}
\title{Extended Mode Properties}
\usage{
mmm(x)

mmm_props()

is_mmm_spec(spec)

immm(x, spec, ...)

ich1(x, ...)

ich3(x, ...)

ichr(x, ...)

iclr(x, ...)

ievn(x, ...)

ifac(x, ...)

ifrc(x, ...)

iind(x, ...)

ilgl(x, ...)

ineg(x, ...)

ingw(x, ...)

inng(x, ...)

innw(x, ...)

inps(x, ...)

inpw(x, ...)

inst(x, ...)

inum(x, ...)

iodd(x, ...)

iord(x, ...)

ipct(x, ...)

ipos(x, ...)

ippn(x, ...)

ipsw(x, ...)

isrt(x, ...)

istr(x, ...)

iuno(x, ...)

iwhl(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{spec}{\code{NULL} or a \link[=cmp_chr_scl]{complete character vec}
containing one or more extended mode properties from \code{mmm_props()}.
Extended mode properties may be pipe-delimited. If there are multiple
properties in \code{spec}, \code{x} is inspected for a match to any of the specified
properties.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\value{
\tabular{ll}{
FUNCTIONS                       \tab RETURN VALUE                       \cr
\code{mmm_vals}                      \tab A character vector.                \cr
\code{mmm}                           \tab A character scalar or vector.      \cr
\code{mmmi}, \code{ixxx}, \code{is_mmm_spec}   \tab A logical scalar.                    }
}
\description{
Extended modes are defined for non-empty atomic objects. For all
other objects, the extended mode is \code{NULL}. These are not formally defined
classes, but are evaluated dynamically based on the current characteristics
of an object.
\cr\cr
Atomic objects that contain only \code{NA} values are of every extended mode, as
they can be coerced to any mode without introducing new \code{NA} values. The
following tables gives extended mode values, names, and requirements.
\cr\cr
\strong{Character Extended Mode Properties}\tabular{lll}{
VALUE   \tab NAME        \tab CHARACTERISTICS                           \cr
\code{'chr'} \tab Character   \tab Character.                                \cr
\code{'clr'} \tab Color       \tab Valid character color representation.     \cr
\code{'ch1'} \tab Onechar     \tab Single character values.                  \cr
\code{'str'} \tab String      \tab No blank ("") values.                       }
\strong{Categorical Extended Mode Properties\verb{\\tabular\{lll\}\{ VALUE   \\tab NAME        \\tab CHARACTERISTICS                           \\cr}'fac'\verb{\\tab Factor      \\tab Factor.                                   \\cr}'lgl'\verb{\\tab Logical     \\tab Logical.                                  \\cr}'ord'\verb{\\tab Ordered     \\tab Ordered factor.                           \\cr}'uno'\verb{ \\tab Unordered   \\tab Unordered factor.                           \} \\strong\{Combination Extended Mode Properties} \tabular{lll}{
VALUE   \tab NAME           \tab CHARACTERISTICS                        \cr
\code{'ind'} \tab Indexer        \tab Logical or positive whole number.      \cr
\code{'srt'} \tab Sortable       \tab Character, logical, numeric, or ordered
factor.                                \cr
\code{'nst'} \tab non-sortable   \tab Atomic, but not sortable.                }
\strong{Numeric Extended Mode Properties\verb{\\tabular\{lll\}\{ VALUE   \\tab NAME                 \\tab CHARACTERISTICS                  \\cr}'num'\verb{\\tab Numeric              \\tab Numeric.                         \\cr}'frc'\verb{\\tab Fractional           \\tab At least}1\verb{ non-}NA\verb{value is not a whole number .                   \\cr}'pct'\verb{\\tab Percent              \\tab Percentage numeric (in the interval}\link{0, 100}}).                     \cr
\code{'ppn'} \tab Proportion           \tab Proportion numeric (in the interval
\verb{[0, 1]\}).                       \\cr }'pos'\verb{\\tab Positive             \\tab Positive numeric.                \\cr}'nng'\verb{\\tab Non-negative         \\tab Non-negative numeric.            \\cr}'nps'\verb{\\tab Non-positive         \\tab Non-positive numeric.            \\cr}'neg'\verb{\\tab Negative             \\tab Negative numeric.                \\cr}'whl'\verb{\\tab Whole                \\tab Whole number.                    \\cr}'evn'\verb{\\tab Even                 \\tab Even (whole) number.             \\cr}'odd'\verb{\\tab Odd                  \\tab Odd (whole) number.              \\cr}'psw'\verb{\\tab Positive whole       \\tab Positive whole-number.           \\cr}'nnw'\verb{\\tab Non-negative whole   \\tab Non-negative whole-number.       \\cr}'npw'\verb{\\tab Non-positive whole   \\tab Non-positive whole-number.       \\cr}'ngw'\verb{\\tab Negative whole       \\tab Negative whole-number.             \} Functions in this family are:\\tabular\{ll\}\{ FUNCTION        \\tab WHAT IT DOES                                       \\cr}mmm\verb{          \\tab Get a character vector containing all extended mode properties possessed by}x\verb{.                       \\cr }ixxx\verb{         \\tab Evaluate whether}x\verb{possesses the extended mode property}xxx\verb{(a placeholder for any given extended mode property value), subject to any restrictions in}...\verb{.                                             \\cr }mmmi\verb{         \\tab Evaluate whether}x\verb{possesses one or more (possibly pipe-delimited) extended mode properties in}spec\verb{, subject to any restrictions in }...\verb{.              \\cr }mmm_props\verb{    \\tab Get a character vector of all possible extended mode property values.                                   \\cr}is_mmm_spec\verb{   \\tab Evaluate whether }spec` is a valid extended mode
property specification.                              }
}
\section{Specifying Count and Value Restrictions}{
 Specifying restrictions in
\code{...} is optional. The full set of recognized arguments names are defined
in the following table along with the properties each
specifies:\tabular{ll}{
NAME     \tab WHAT IT SPECIFIES                                         \cr
\code{n}      \tab Vector of valid lengths/numbers of elements.              \cr
\code{nr}     \tab Vector of valid numbers of rows.                          \cr
\code{nc}     \tab Vector of valid numbers of columns.                       \cr
\code{min}    \tab Scalar minimum valid length/number of element.            \cr
\code{minr}   \tab Scalar minimum valid number of rows.                      \cr
\code{minc}   \tab Scalar minimum valid number of columns.                   \cr
\code{max}    \tab Scalar maximum valid length/number of element.            \cr
\code{maxr}   \tab Scalar maximum valid number of rows.                      \cr
\code{maxc}   \tab Scalar maximum valid number of columns.                   \cr
\code{vals}   \tab Vector of valid values.                                   \cr
\code{lt}     \tab Scalar less-than (exclusive upper) bound.                 \cr
\code{le}     \tab Scalar less-than-or-equal (inclusive upper) bound         \cr
\code{ge}     \tab Scalar greater-than-or-equal (inclusive lower) bound.     \cr
\code{gt}     \tab Scalar greater-than bound (exclusive lower) bound.          }
}

\seealso{
Other props: 
\code{\link{as_mmm}},
\code{\link{bbb_ccc}()},
\code{\link{bbb_mmm}()},
\code{\link{bbb}()},
\code{\link{ccc}()},
\code{\link{cmp_ccc}()},
\code{\link{cmp_mmm_ccc}()},
\code{\link{cmp_mmm}()},
\code{\link{comparable}()},
\code{\link{compatible}()},
\code{\link{ddd}()},
\code{\link{eee}()},
\code{\link{iii}()},
\code{\link{meets}()},
\code{\link{mmm_ccc}()},
\code{\link{ppp}()},
\code{\link{sss}()}
}
\concept{props}
