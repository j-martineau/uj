% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eee.R
\encoding{UTF-8}
\name{eee}
\alias{eee}
\alias{eee_funs}
\alias{eee_props}
\alias{is_eee_spec}
\alias{ieee}
\alias{ie0D}
\alias{ie1D}
\alias{ie2D}
\alias{ieHD}
\alias{ieUD}
\alias{neee}
\title{Effective dimensionality (effective.d) properties}
\usage{
eee(x)

eee_funs()

eee_props()

is_eee_spec(spec)

ieee(x, spec, ...)

ie0D(x, ...)

ie1D(x, ...)

ie2D(x, ...)

ieHD(x, ...)

ieUD(x, ...)

neee(x)
}
\arguments{
\item{x}{An R object.}

\item{spec}{\code{NULL} or a \link[=cmp_chr_scl]{complete character vec} containing one or more effective.d properties from \code{eee_props()}. Effective.d properties may be pipe-delimited. If there are multiple properties in \code{spec}, \code{x} is inspected for a match to any of the specified properties.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\value{
\emph{A character vector}
\cr   \code{eee_props}
\cr   \code{eee_funs}
\cr   \code{eee}
\cr
\cr \emph{A logical scalar}
\cr   \code{is_eee_spec}
\cr   \code{iEEE}
\cr   \code{ieee}
\cr
\cr \emph{A numeric scalar}
\cr   \code{neee}
}
\description{
An object's effective.d is defined as the number of dimensions in which it has multiple populated index positions (i.e., if a dimension has only one index position, that is not an effective dimension).
\tabular{rl}{
  \code{'eUD'}   \tab \emph{Effectively} \code{NaN} \emph{dimensional}.
\cr           \tab Length-\code{0} objects including \code{NULL} (of undefined effective.d).
\cr           \tab  
\cr \code{'e0D'}   \tab \emph{Effectively} \code{0} \emph{dimensional}
\cr           \tab \verb{1x1} data.frames and length-\code{1} vectors, \code{\link[=ivls]{vlists}}, and arrays.
\cr           \tab  
\cr \code{'e1D'}   \tab \emph{Effectively} \code{1} \emph{dimensional}
\cr           \tab \code{\link[=imvc]{multivecs}}, length-\verb{2+} vlists, \code{\link[=irow]{row}} data.frames, \code{\link[=icol]{col}} data.frames, and length-\verb{2+} arrays with \verb{2+} index positions in exactly \code{1} dimension.
\cr           \tab  
\cr \code{'e2D'}   \tab \emph{Effectively} \code{2} \emph{dimensional}
\cr           \tab \verb{2+ x 2+ }data.frames and length-\verb{4+} arrays with \verb{2+} positions in exactly \code{2} dimensions.
\cr           \tab  
\cr \code{'eHD'}   \tab \emph{Effectively hyper dimensional}
\cr           \tab Length-\verb{8+} arrays with \verb{2+} positions in \verb{3+} dimensions.
}
\cr\cr
Effective dimensionality property functions are:
\tabular{rl}{
  \code{is_eee_spec}   \tab Is \code{spec} an effective.d specification?
\cr               \tab  
\cr \code{eee_props}   \tab What effective.d properties are there?
\cr               \tab  
\cr  \code{eee_funs}   \tab What effective.d property functions are there?
\cr               \tab  
\cr      \code{neee}   \tab How many effective dimensions does \code{x} have?
\cr               \tab  
\cr      \code{ieee}   \tab Is \code{x} a match to the effective.d specification\code{spec}?
\cr               \tab  
\cr      \code{iEEE}   \tab Is \code{x} a match to the single effective.d property \code{'EEE'}?
\cr               \tab  
\cr       \code{eee}   \tab What are \code{x}'s effective.d properties?
}
}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{rl}{
  \verb{max, maxr, maxc}   \tab Scalar maximum valid numbers of element, rows, and columns, respectively.
\cr                     \tab  
\cr \verb{min, minr, minc}   \tab Scalar minimum valid numbers of element, rows, and columns, respectively.
\cr                     \tab  
\cr  \verb{lt, le, ge, gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively.
\cr                     \tab  
\cr       \verb{n, nr, nc}   \tab A vector of valid numbers of elements, rows, and columns, respectively.
\cr                     \tab  
\cr            \code{vals}   \tab A vector of valid values.
}
}

\examples{
a. <- "a"
abc. <- c("a", "b", "c")
udf1 <- NULL
udf2 <- character(0)
udf3 <- matrix(nrow = 0, ncol = 0)
udf4 <- list()
zro1 <- a.
zro2 <- list(abc = abc.)
zro3 <- data.frame(a = a.)
zro4 <- array(a., dim = c(1, 1, 1))
one1 <- matrix(abc., nrow = 1)
one2 <- matrix(abc., ncol = 1)
one3 <- data.frame(a. = abc.)
one4 <- array(abc., dim = c(3, 1, 1))
two1 <- matrix(rep.int(abc., 2), nrow = 2)
two2 <- data.frame(a = abc., b = abc.)
two3 <- array(1:4, dim = c(2, 2, 1))
two4 <- array(1:4, dim = c(1, 2, 2, 1))
hyp1 <- array(1:8, dim = c(2, 2, 2))
hyp2 <- array(1:8, dim = c(2, 2, 2, 1))
hyp3 <- array(1:8, dim = c(1, 2, 2, 2, 1))
hyp4 <- array(1:16, dim = c(2, 2, 2, 2))

eee_funs()
eee_props()
is_eee_spec("eUD")
is_eee_spec("d1D")
c(neee(udf1), neee(udf2), neee(udf3), neee(udf4))
c(neee(zro1), neee(zro2), neee(zro3), neee(zro4))
c(neee(one1), neee(one2), neee(one3), neee(one4))
c(neee(two1), neee(two2), neee(two3), neee(two4))
c(neee(hyp1), neee(hyp2), neee(hyp3), neee(hyp4))

c(ieee(one1, "eUD"), ieee(one1, "e0D"), ieee(one1, "e1D"), ieee(one1, "e2D"), ieee(one1, "eHD"))
c(ieUD(one1), ie0D(one1), ie1D(one1), ie2D(one1), ieHD(one1))

c(eee(udf1), eee(zro1), eee(one1), eee(two1), eee(hyp1), eee(hyp4))
}
\seealso{
Other properties: 
\code{\link{as_mmm}},
\code{\link{bbb_mmm}()},
\code{\link{bbb}()},
\code{\link{cls}()},
\code{\link{cmp_ccc}()},
\code{\link{cmp_mmm}()},
\code{\link{comparable}()},
\code{\link{compatible}()},
\code{\link{ddd}()},
\code{\link{err_check}()},
\code{\link{iii}()},
\code{\link{is_unique}()},
\code{\link{meets}()},
\code{\link{mmm_ccc}()},
\code{\link{mmm}()},
\code{\link{ppp}()},
\code{\link{sss}()},
\code{\link{unq_ccc}()}
}
\concept{properties}
