% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sss_ccc.R
\encoding{UTF-8}
\name{sss_ccc_PROPS}
\alias{sss_ccc_PROPS}
\alias{sss_ccc}
\alias{sss_ccc_funs}
\alias{emp_arr}
\alias{emp_dtf}
\alias{emp_gen}
\alias{emp_mat}
\alias{emp_vec}
\alias{emp_vls}
\alias{pnt_arr}
\alias{pnt_dtf}
\alias{pnt_gen}
\alias{pnt_mat}
\alias{pnt_scl}
\alias{pnt_vec}
\alias{pnt_vls}
\alias{lin_arr}
\alias{lin_dtf}
\alias{lin_gen}
\alias{lin_mat}
\alias{lin_mvc}
\alias{lin_vec}
\alias{lin_vls}
\alias{col_dtf}
\alias{col_mat}
\alias{row_dtf}
\alias{row_mat}
\alias{rct_dtf}
\alias{rct_mat}
\alias{sqr_mat}
\alias{sld_arr}
\title{Combo Shape and Extended Class Properties}
\usage{
sss_ccc_PROPS()

sss_ccc(x, sss, ccc, ...)

sss_ccc_funs()

emp_arr(x, ...)

emp_dtf(x, ...)

emp_gen(x, ...)

emp_mat(x, ...)

emp_vec(x, ...)

emp_vls(x, ...)

pnt_arr(x, ...)

pnt_dtf(x, ...)

pnt_gen(x, ...)

pnt_mat(x, ...)

pnt_scl(x, ...)

pnt_vec(x, ...)

pnt_vls(x, ...)

lin_arr(x, ...)

lin_dtf(x, ...)

lin_gen(x, ...)

lin_mat(x, ...)

lin_mvc(x, ...)

lin_vec(x, ...)

lin_vls(x, ...)

col_dtf(x, ...)

col_mat(x, ...)

row_dtf(x, ...)

row_mat(x, ...)

rct_dtf(x, ...)

rct_mat(x, ...)

sqr_mat(x, ...)

sld_arr(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{sss}{A character scalar single basic property from \code{link{sss_props}()}.}

\item{ccc}{A character scalar single extended class property from \code{link{ccc_props}()}}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\description{
These functions check for the combination of \link[=sss]{shape} and \link[=ccc]{extended class} properties.

Some combinations of shape and extended class are nonsensical. That includes:

\itemize{\item Shapes \code{emp} (empty) and \code{pnt} (point) combined with extended classes \code{mvc} (multivec) or \code{scl} (scalar).
\item Shapes \code{row}, \code{col} (column), or \code{rct} (rectangular) combined with extended classes other than \code{dtf} (data.frame) or \code{mat} (matrix),
\item Shape \code{sqr} (square) combined with any extended class other than \code{mat} (matrix).}

Nonsensical combinations do not have corresponding \code{sss_ccc} property functions.
}
\section{Functions}{
\itemize{
\item \code{sss_ccc()}: Checks \code{x} for a combination of the single shape property \code{sss} and the single extended class property \code{ccc} subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{sss_ccc_funs()}: Lists all shape-plus-extended class combo property checking functions. Returns a character vector.

\item \code{emp_arr()}: Checks \code{x} for empty-ness and array-ness. Returns a logical scalar.

\item \code{emp_dtf()}: Checks \code{x} for empty-ness and data.frame-ness. Returns a logical scalar.

\item \code{emp_gen()}: Checks \code{x} for empty-ness and generic-ness. Returns a logical scalar.

\item \code{emp_mat()}: Checks \code{x} for empty-ness and matrix-ness. Returns a logical scalar.

\item \code{emp_vec()}: Checks \code{x} for empty-ness and vec-ness. Returns a logical scalar.

\item \code{emp_vls()}: Checks \code{x} for empty-ness and vector-list-ness. Returns a logical scalar.

\item \code{pnt_arr()}: Checks \code{x} for point-ness and array-ness. Returns a logical scalar.

\item \code{pnt_dtf()}: Checks \code{x} for point-ness and data.frame-ness. Returns a logical scalar.

\item \code{pnt_gen()}: Checks \code{x} for point-ness and generic-ness. Returns a logical scalar.

\item \code{pnt_mat()}: Checks \code{x} for point-ness and matrix-ness. Returns a logical scalar.

\item \code{pnt_scl()}: Checks \code{x} for point-ness and scalar-ness. Returns a logical scalar.

\item \code{pnt_vec()}: Checks \code{x} for point-ness and vec-ness. Returns a logical scalar.

\item \code{pnt_vls()}: Checks \code{x} for point-ness and vector-list-ness. Returns a logical scalar.

\item \code{lin_arr()}: Checks \code{x} for linear-ness and array-ness. Returns a logical scalar.

\item \code{lin_dtf()}: Checks \code{x} for linear-ness and data.frame-ness. Returns a logical scalar.

\item \code{lin_gen()}: Checks \code{x} for linear-ness and generic-ness. Returns a logical scalar.

\item \code{lin_mat()}: Checks \code{x} for linear-ness and matrix-ness. Returns a logical scalar.

\item \code{lin_mvc()}: Checks \code{x} for linear-ness and multivec-ness. Returns a logical scalar.

\item \code{lin_vec()}: Checks \code{x} for linear-ness and vec-ness. Returns a logical scalar.

\item \code{lin_vls()}: Checks \code{x} for linear-ness and vector-list-ness. Returns a logical scalar.

\item \code{col_dtf()}: Checks \code{x} for column-ness and data.frame-ness. Returns a logical scalar.

\item \code{col_mat()}: Checks \code{x} for column-ness and matrix-ness. Returns a logical scalar.

\item \code{row_dtf()}: Checks \code{x} for row-ness and data.frame-ness. Returns a logical scalar.

\item \code{row_mat()}: Checks \code{x} for row-ness and matrix-ness. Returns a logical scalar.

\item \code{rct_dtf()}: Checks \code{x} for rectangle-ness and data.frame-ness. Returns a logical scalar.

\item \code{rct_mat()}: Checks \code{x} for rectangle-ness and matrix-ness. Returns a logical scalar.

\item \code{sqr_mat()}: Checks \code{x} for square-ness and matrix-ness. Returns a logical scalar.

\item \code{sld_arr()}: Checks \code{x} for solid-ness and array-ness. Returns a logical scalar.

}}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{ll}{  \verb{.max, .maxr, .maxc}   \tab Scalar maximum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.min, .minr, .minc}   \tab Scalar minimum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.lt, .le, .ge, .gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively. \cr   \tab   \cr
  \verb{.n, .nr, .nc}         \tab A vector of valid numbers of elements, rows, and columns, respectively.                                                                    \cr   \tab   \cr
  \code{.vals}                \tab A vector of valid values.                                                                                                                                 }
}

\examples{
sss_cccfuns()
sss_cccprops()
sss_ccc(letters, "lin", "vec")
sss_ccc(1, "emp", "vec")
lin_gen(letters)
pnt_vec(1)
}
\seealso{
Other props: 
\code{\link{cmp_mmm_ccc_PROPS}()},
\code{\link{mmm_ccc_PROPS}()},
\code{\link{unq_mmm_ccc_PROPS}()}
}
\concept{props}
