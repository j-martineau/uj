% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cmp_mmm.R
\encoding{UTF-8}
\name{cmp_mmm_PROPS}
\alias{cmp_mmm_PROPS}
\alias{cmp_mmm}
\alias{cmp_mmm_funs}
\alias{cmp_atm}
\alias{cmp_ch1}
\alias{cmp_ch3}
\alias{cmp_chr}
\alias{cmp_clr}
\alias{cmp_evn}
\alias{cmp_fac}
\alias{cmp_frc}
\alias{cmp_ind}
\alias{cmp_lgl}
\alias{cmp_neg}
\alias{cmp_ngw}
\alias{cmp_nng}
\alias{cmp_nnw}
\alias{cmp_nps}
\alias{cmp_npw}
\alias{cmp_nst}
\alias{cmp_num}
\alias{cmp_odd}
\alias{cmp_ord}
\alias{cmp_pct}
\alias{cmp_pos}
\alias{cmp_psw}
\alias{cmp_srt}
\alias{cmp_str}
\alias{cmp_uno}
\alias{cmp_whl}
\title{Combined Completeness Plus Extended Mode Properties}
\usage{
cmp_mmm_PROPS()

cmp_mmm(x, mmm, ...)

cmp_mmm_funs()

cmp_atm(x, ...)

cmp_ch1(x, ...)

cmp_ch3(x, ...)

cmp_chr(x, ...)

cmp_clr(x, ...)

cmp_evn(x, ...)

cmp_fac(x, ...)

cmp_frc(x, ...)

cmp_ind(x, ...)

cmp_lgl(x, ...)

cmp_neg(x, ...)

cmp_ngw(x, ...)

cmp_nng(x, ...)

cmp_nnw(x, ...)

cmp_nps(x, ...)

cmp_npw(x, ...)

cmp_nst(x, ...)

cmp_num(x, ...)

cmp_odd(x, ...)

cmp_ord(x, ...)

cmp_pct(x, ...)

cmp_pos(x, ...)

cmp_psw(x, ...)

cmp_srt(x, ...)

cmp_str(x, ...)

cmp_uno(x, ...)

cmp_whl(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{mmm}{A character scalar extended mode property from \code{mmm_props()}.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\description{
Check for combination of \link[=CMP]{completeness} and \link[=mmm]{extended mode}.
}
\section{Functions}{
\itemize{
\item \code{cmp_mmm()}: Check \code{x} for completeness and for the extended mode in \code{mmm} subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_mmm_funs()}: Lists completeness plus extended mode property checking functions. Returns a character vector.

\item \code{cmp_atm()}: Checks for completeness and atomic-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_ch1()}: Checks for completeness and onechar-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_ch3()}: Checks for completeness and threechar-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_chr()}: Checks for completeness and character-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_clr()}: Checks for completeness and color-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_evn()}: Checks for completeness and whole-number-even-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_fac()}: Checks for completeness and factor-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_frc()}: Checks for completeness and fractional-numeric-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_ind()}: Checks for completeness and indexer-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_lgl()}: Checks for completeness and logical-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_neg()}: Checks for completeness and negative-numeric-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_ngw()}: Checks for completeness and negative-whole-number-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_nng()}: Checks for completeness and non-negative-numeric-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_nnw()}: Checks for completeness and non-negative-whole-number-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_nps()}: Checks for completeness and non-positive-numeric-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_npw()}: Checks for completeness and non-positive-whole-number-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_nst()}: Checks for completeness and non-sortable-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_num()}: Checks for completeness and numeric-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_odd()}: Checks for completeness and whole-numer-odd-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_ord()}: Checks for completeness and ordered-factor-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_pct()}: Checks for completeness and percent-valued-numeric-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_pos()}: Checks for completeness and positive-numeric-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_psw()}: Checks for completeness and positive-whole-number-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_srt()}: Checks for completeness and sortable-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_str()}: Checks for completeness and string-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_uno()}: Checks for completeness and unordered-factor-ness subject to any count or value restrictions in .... Returns a logical scalar.

\item \code{cmp_whl()}: Checks for completeness and whole-number-ness subject to any count or value restrictions in .... Returns a logical scalar.

}}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{ll}{  \verb{.max, .maxr, .maxc}   \tab Scalar maximum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.min, .minr, .minc}   \tab Scalar minimum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.lt, .le, .ge, .gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively. \cr   \tab   \cr
  \verb{.n, .nr, .nc}         \tab A vector of valid numbers of elements, rows, and columns, respectively.                                                                    \cr   \tab   \cr
  \code{.vals}                \tab A vector of valid values.                                                                                                                                 }
}

\examples{
cmp_mmm_funs()
cmp_mmm(letters, "ch1")
cmp_mmm(c("abc", "def"), "ch3")
cmp_psw(0:10)
cmp_ord(factor(letters, ordered = T))
}
