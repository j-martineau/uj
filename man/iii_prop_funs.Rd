% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iii_prop_funs.R
\encoding{UTF-8}
\name{iii_prop_funs}
\alias{iii_prop_funs}
\alias{iii}
\alias{iii_funs}
\alias{iii_props}
\alias{is_iii_spec}
\alias{III}
\alias{CMP}
\alias{MSS}
\alias{NA0}
\alias{OK0}
\alias{PRT}
\alias{DUP}
\alias{UNQ}
\title{Integrity properties}
\usage{
iii_prop_funs()

iii(x)

iii_funs()

iii_props()

is_iii_spec(spec)

III(x, spec, ...)

CMP(x, ...)

MSS(x, ...)

NA0(x, ...)

OK0(x, ...)

PRT(x, ...)

DUP(x, ...)

UNQ(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{spec}{\code{NULL} or a \link[=cmp_chr_scl]{complete character vec} containing one or more integrity properties (i.e., from \code{iii_props()}). Integrity properties may be pipe-delimited. If there are multiple properties in \code{spec}, \code{x} is inspected for a match to any of the specified properties.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\description{
Integrity properties are defined for \link[=POP]{populated} \link[=atm_dtf]{atomic data.frames}, populated \link[=atm_vls]{atomic vlists}, populated atomic vectors, and populated atomic arrays. For all others, all integrity properties are considered \code{FALSE}. The following table summarizes valid integrity properties.
\tabular{lll}{  \verb{'cmp', 'CMP'}   \tab complete      \tab Populated and atomic vectors, arrays, \link[=atm_dtf]{data.frames}, and \link[=atm_vls]{vlists} containing \emph{no} \code{NA} values. \cr   \tab   \cr
  \verb{'mss', 'MSS'}   \tab missing       \tab Populated and atomic vectors, arrays, data.frames, and vlists containing \emph{only} \code{NA} values.                                 \cr   \tab   \cr
  \verb{'prt', 'PRT'}   \tab partial       \tab Populated and atomic vectors, arrays, data.frames, and vlists containing \code{NA} \emph{and} non-\code{NA} values.                         \cr   \tab   \cr
  \verb{'dup', 'DUP'}   \tab duplicates    \tab Complete and containing duplicate values.                                                                                    \cr   \tab   \cr
  \verb{'unq', 'UNQ'}   \tab unique        \tab Complete and containing only unique values.                                                                                  \cr   \tab   \cr
  \verb{'nas', 'NA0'}   \tab \code{NA} scalar   \tab Atomic scalar \code{NA}.                                                                                                          \cr   \tab   \cr
  \verb{'oks', 'OK0'}   \tab \code{OK} scalar   \tab Non-\code{NA} atomic scalar.                                                                                                                     }
}
\section{Functions}{
\itemize{
\item \code{iii()}: Lists all integrity properties of \code{x}. Returns a sorted, lowercase, character vector.

\item \code{iii_funs()}: Lists all integrity property checking functions. Returns a sorted, uppercase, character vector.

\item \code{iii_props()}: Lists all integrity properties. Returns a sorted, lowercase, character vector.

\item \code{is_iii_spec()}: Checks whether \code{spec} is an integrity property spec. Returns a logical scalar. See \code{\link{ppp}} for a definition of a property spec.

\item \code{III()}: Checks \code{x} against the integrity property spec \code{spec}. Returns a logical scalar. See \code{\link{ppp}} for a definition of a property spec.

\item \code{CMP()}: Checks \code{x} for completeness subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{MSS()}: Checks \code{x} for missingness subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{NA0()}: Checks \code{x} for whether it is a missing-value scalar subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{OK0()}: Checks \code{x} for whether it is a non missing-value scalar subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{PRT()}: Checks \code{x} for partial completeness subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{DUP()}: Checks \code{x} for duplicatedness subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{UNQ()}: Checks \code{x} for uniqueness subject to any count or value restrictions in \code{...}. Returns a logical scalar.

}}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{ll}{  \verb{.max, .maxr, .maxc}   \tab Scalar maximum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.min, .minr, .minc}   \tab Scalar minimum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.lt, .le, .ge, .gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively. \cr   \tab   \cr
  \verb{.n, .nr, .nc}         \tab A vector of valid numbers of elements, rows, and columns, respectively.                                                                    \cr   \tab   \cr
  \code{.vals}                \tab A vector of valid values.                                                                                                                                 }
}

\examples{
iii_funs()
iii_props()
is_iii_spec("nas|mss")
CMP(NA)
CMP(NULL)
NA0(NA)
OK0(letters)
OK0(letters[1])
MSS(rep(NA, 10))
iii(NA)
iii(letters)
iii(letters[1])
}
\seealso{
Other properties: 
\code{\link{as_mmm}()},
\code{\link{cls}()},
\code{\link{compatible}()},
\code{\link{mmm_prop_funs}()},
\code{\link{sss_prop_funs}()}
}
\concept{properties}
