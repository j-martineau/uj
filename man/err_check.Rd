% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/errs.R
\name{err_check}
\alias{err_check}
\alias{bank_err}
\alias{bank_lgl}
\alias{bank_not}
\alias{bank_pop}
\alias{bank_funs}
\alias{bank_ppp}
\alias{bank_vals}
\alias{bank_dots}
\alias{bank_when}
\alias{bank_pats}
\alias{bank_fail}
\title{Error Management}
\usage{
err_check(gens. = 0)

bank_err(..., gens. = 0)

bank_lgl(..., nas. = F, extras. = NULL)

bank_not(...)

bank_pop(...)

bank_funs(funs., ...)

bank_ppp(ppp., ..., nas. = F)

bank_vals(...)

bank_dots(ppp., ..., named. = F)

bank_when(whens., values., ...)

bank_pats(pats., ...)

bank_fail(x)
}
\arguments{
\item{gens.}{A \link[cmp_nnw_scl]{Complete non-negative whole-number scalar}
indicating the number of generations back in the call stack in which to
bank and/or check for error messages.}

\item{...}{For \code{bank_err}: An arbitrary number of atomic arguments that when
collapsed into a character scalar form an error message.
\cr\cr
For \code{bank_lgl}, \code{bank_pop}, \code{bank_funs}, \code{bank_prop}, \code{bank_pats}: An
arbitrary number of named arguments to be error checked.
\cr\cr
For \code{bank_not}: An arbitrary number of named logical scalar arguments to be
checked for \code{TRUE}-ness plus an arbitrary number of unnamed atomic
arguments that when collapsed form an error message.
\cr\cr
For \code{bank_vals}: An arbitrary number of named atomic scalar arguments and
an arbitrary number of unnamed atomic arguments holding valid values of the
named arguments.
\cr\cr
For \code{bank_dots}: An arbitrary number of named or unnamed arguments to be
error checked.
\cr\cr
For \code{bank_when}: Two named atomic scalars to be error checked.}

\item{nas.}{A non-\code{NA} logical scalar indicating whether atomic scalar \code{NA}
values qualify.}

\item{named.}{A non-\code{NA} logical scalar indicating whether \code{...} arguments
must be uniquely named without using blank strings.}

\item{whens., values.}{\link[=ipop]{Populated atomic objects}.}

\item{pats.}{An \link[=ivls]{atomic vlist} containing multiple elements, each
of which must be a \link[=cmp_chr_mvc]{complete character multivec} of the
same length as the number of \code{...} arguments. Each element gives a pattern
of valid properties for the argument in \code{...} in the form of one property
specification per argument in \code{...} in the same order of those arguments.}

\item{x}{An R object.}

\item{extras}{\code{NUlL} or an \link[=icmp]{complete atomic object} containing
additional atomic values that qualify as valid.}

\item{funs}{\link[=cmp_chr_scl]{Complete character scalar} containing a
\link[=ppp_funs]{property function} name or multiple property function
names separated by pipes, which are used to check if named arguments in
\code{...} satisfy the property specification in any of the function names.}

\item{ppp}{A \link[=cmp_chr_scl]{complete character scalar} containing one or
more property combos (combos are created by separating one or more
\link[=all_props]{property values} with underscores. Multiple combos are
separated by pipes.}
}
\value{
\code{NULL}. Called for the side effect of banking and/or processing error
messages.
}
\description{
Bank error messages in the immediate environment of a function
to allow for exhaustive error checking before throwing an exception.
Results in a combined, multiple-error message to be reported at the
completion of all error checks.\tabular{ll}{
FUNCTION      \tab WHAT IT DOES                                       \cr
\code{err_check}   \tab \emph{Process any banked error messages}. Check for
banked error messages in the environment of the
function \code{gens} generations back in the call stack,
and if there are any, process them, stopping
execution. If there are none, take no action. To be
called after error checking is complete.           \cr
\code{bank_err}    \tab \emph{Bank an arbitrary error message}. Bank the
error message in \code{...} in the environment of the
function \code{gens} generations back in the call stack.
The error message is constructed by
\link[=av]{atomizing} and collapsing \code{...} into a
character scalar.                                  \cr
\code{bank_lgl}    \tab \emph{Check for logical scalar args}. Checks named
\code{...} arguments for whether they are scalar \code{TRUE} or
scalar \code{FALSE}. If \code{na = TRUE}, also allows atomic
scalar \code{NA}. If \code{extras} contains atomic values
(logical or not), also allows those values. For each
named argument that does not meet the requirements,
banks an error.                                   \cr
\code{bank_not}    \tab \emph{Bank errors for \code{FALSE} args}. For each scalar
\code{FALSE} named \code{...} argument, create an error message
by collapsing unnamed \code{...} arguments into a character
scalar message template, banking the error message for
that named argument. The location where the name of a
\code{FALSE} named argument should occur in the message is
indicated by the escape sequence \code{'{@}'}.         \cr
\code{bank_pop}    \tab \emph{Bank errors for non-populated args}. For each
named \code{...} argument that is either \code{NULL} or empty
(of length \code{0}), banks an error message.          \cr
\code{bank_funs}   \tab \emph{Bank errors for args not passing property
checking functions}. For each named \code{...} argument,
check whether it satisfies any of the property
functions named in \code{funs.}, and if not, bank an error
message. \verb{funs. must be a character scalar containing the names of one or more \link[ppp_funs]\{property functions\}, separated by pipes. An argument passes the test if calling any one of the functions results in a value of }TRUE\verb{.                                   \\cr }bank_ppp\verb{   \\tab \\emph\{Bank errors for args not passing arbitrary property checks\}. More flexible but less efficient than}bank_funs\verb{. For each named }...\verb{argument, bank an error message if it does satisfy the \link[ippp]\{property specification\} in}ppp\verb{. If }nas. = TRUE\verb{, arguments may also be atomic scalar }NA\code{values.}ppp.\verb{must be a character scalar containing one or more property combos. Property combos are created by separating multiple properties from \link[=all_props]\{all_props()\}. A property combo may be a single property. Multiple property combos are separated from each other using pipes. An argument satisfies the property specification if it satisfies any of the property combos.                        \\cr}bank_vals\verb{  \\tab \\emph\{Bank errors for args with out-of-bounds values\}. Bank errors if atomic scalar arguments do not have one of a list of values. For each named atomic scalar}...\verb{argument, check it against the remaining (unnamed) atomic}...\verb{arguments (which do not have to be of the same mode), and if the named argument's value does not match a value from any unnamed}...\verb{argument, bank an error message.                   \\cr}bank_dots\verb{  \\tab \\emph\{Bank errors for}...\verb{args\}. Bank errors if}...\verb{arguments do not satisfy a property specification, and optionally, if they are not named. Check if each}...\verb{argument satisfies the property specification in}prop.\verb{and if not, bank an error message. If}named. = TRUE\verb{, check whether all }...\verb{arguments are named, and if not banks an error message.                                           \\cr}bank_when\verb{  \\tab \\emph\{Bank errors for one arg conditional on the value of another\}. Bank errors conditionally on the value of two arguments. Banks an error if the first named atomic scalar}...\verb{argument has a value contained in}whens.\verb{and the second named atomic scalar}...\verb{argument does not contain a value from}values.\verb{.  \\cr }bank_pats\verb{  \\tab \\emph\{Bank errors for args not matching any patterns of properties\}. Bank errors conditionally on the pattern of properties of arguments in}...\verb{matching none of the specified patterns of associated properties in}pats.\verb{.                             \\cr }bank_fail`   \tab \emph{Bank errors for args producing an error when
evaluated}.                                          }
}
\seealso{
Other errs: 
\code{\link{failsafe}()}
}
\concept{errs}
