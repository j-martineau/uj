% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ppp_fast_funs.R
\name{ppp_fast_help}
\alias{ppp_fast_help}
\alias{.ATM}
\alias{.DEF}
\alias{.FUN}
\alias{.NIL}
\alias{.NLL}
\alias{.POP}
\alias{.RCR}
\alias{.ARR}
\alias{.DTF}
\alias{.GEN}
\alias{.MAT}
\alias{.MVC}
\alias{.SCL}
\alias{.VLS}
\alias{.VEC}
\alias{.D0D}
\alias{.D1D}
\alias{.D2D}
\alias{.DHD}
\alias{.EUD}
\alias{.E2D}
\alias{.EHD}
\alias{.E0D}
\alias{.E1D}
\alias{.NA0}
\alias{.OK0}
\alias{.DUP}
\alias{.UNQ}
\alias{.CMP}
\alias{.MSS}
\alias{.PRT}
\alias{.CH1}
\alias{.CH3}
\alias{.CHR}
\alias{.STR}
\alias{.CLR}
\alias{.FAC}
\alias{.ORD}
\alias{.UNO}
\alias{.IND}
\alias{.NST}
\alias{.SRT}
\alias{.LGL}
\alias{.NUM}
\alias{.WHL}
\alias{.ODD}
\alias{.EVN}
\alias{.NGW}
\alias{.NPW}
\alias{.POS}
\alias{.PSW}
\alias{.FRC}
\alias{.NEG}
\alias{.NNG}
\alias{.NNW}
\alias{.NPS}
\alias{.PCT}
\alias{.PPN}
\alias{.COR}
\alias{.COL}
\alias{.ROW}
\alias{.PNT}
\alias{.SLD}
\alias{.SQR}
\alias{.EMP}
\alias{.RCT}
\alias{.LIN}
\alias{.atm_dtf}
\alias{.atm_mat}
\alias{.atm_scl}
\alias{.atm_vec}
\alias{.atm_vls}
\alias{.chr_arr}
\alias{.chr_dtf}
\alias{.chr_vec}
\alias{.chr_vls}
\alias{.cmp_atm}
\alias{.cmp_chr}
\alias{.cmp_cor}
\alias{.cmp_num}
\alias{.cmp_scl}
\alias{.cmp_vec}
\alias{.lgl_scl}
\alias{.nnw_vec}
\alias{.pop_atm}
\alias{.pop_chr}
\alias{.pop_dtf}
\alias{.pop_mat}
\alias{.pop_srt}
\alias{.pop_vec}
\alias{.pop_vls}
\alias{.cmp_atm_vec}
\alias{.cmp_ch1_scl}
\alias{.cmp_ch1_vec}
\alias{.cmp_ch3_scl}
\alias{.cmp_ch3_vec}
\alias{.cmp_chr_arr}
\alias{.cmp_chr_dtf}
\alias{.cmp_chr_vec}
\alias{.cmp_chr_vls}
\alias{.cmp_cor_scl}
\alias{.cmp_cor_vec}
\alias{.cmp_cor_mvc}
\alias{.cmp_cor_sqr}
\alias{.cmp_chr_gen}
\alias{.cmp_chr_scl}
\alias{.cmp_clr_vec}
\alias{.cmp_lgl_scl}
\alias{.cmp_lgl_vec}
\alias{.cmp_nng_scl}
\alias{.cmp_nnw_scl}
\alias{.cmp_nnw_vec}
\alias{.cmp_num_scl}
\alias{.cmp_num_vec}
\alias{.cmp_pos_vec}
\alias{.cmp_ppn_scl}
\alias{.cmp_ppn_vec}
\alias{.cmp_psw_scl}
\alias{.cmp_psw_vec}
\alias{.cmp_srt_vec}
\alias{.cmp_str_scl}
\alias{.cmp_str_vec}
\alias{.cmp_whl_scl}
\alias{.cmp_atm_mvc}
\alias{.unq_atm_mvc}
\alias{.unq_atm_vec}
\alias{.unq_ch1_vec}
\alias{.unq_ch3_vec}
\alias{.unq_chr_vec}
\alias{.unq_nnw_vec}
\alias{.unq_num_vec}
\alias{.unq_psw_vec}
\alias{.unq_str_vec}
\alias{.atm_rct_dtf}
\alias{.atmrctdtf}
\title{Fast Property Checking for Common Checks with Optional valid Values}
\usage{
ppp_fast_help()

.ATM(x, valid = NULL)

.DEF(x, valid = NULL)

.FUN(x, valid = NULL)

.NIL(x)

.NLL(x)

.POP(x, valid = NULL)

.RCR(x)

.ARR(x, valid = NULL)

.DTF(x)

.GEN(x)

.MAT(x, valid = NULL)

.MVC(x, valid = NULL)

.SCL(x, valid = NULL)

.VLS(x)

.VEC(x, valid = NULL)

.D0D(x)

.D1D(x, valid = NULL)

.D2D(x, valid = NULL)

.DHD(x, valid = NULL)

.EUD(x)

.E2D(x, valid = NULL)

.EHD(x, valid = NULL)

.E0D(x, valid = NULL)

.E1D(x, valid = NULL)

.NA0(x)

.OK0(x, valid = NULL)

.DUP(x, valid = NULL)

.UNQ(x, valid = NULL)

.CMP(x, valid = NULL)

.MSS(x)

.PRT(x, valid = NULL)

.CH1(x, valid = NULL)

.CH3(x, valid = NULL)

.CHR(x, valid = NULL)

.STR(x, valid = NULL)

.CLR(x, valid = NULL)

.FAC(x, valid = NULL)

.ORD(x, valid = NULL)

.UNO(x, valid = NULL)

.IND(x, valid = NULL)

.NST(x, valid = NULL)

.SRT(x, valid = NULL)

.LGL(x, valid = NULL)

.NUM(x, valid = NULL)

.WHL(x, valid = NULL)

.ODD(x, valid = NULL)

.EVN(x, valid = NULL)

.NGW(x, valid = NULL)

.NPW(x, valid = NULL)

.POS(x, valid = NULL)

.PSW(x, valid = NULL)

.FRC(x, valid = NULL)

.NEG(x, valid = NULL)

.POS(x, valid = NULL)

.NNG(x, valid = NULL)

.NNW(x, valid = NULL)

.NPS(x, valid = NULL)

.PCT(x, valid = NULL)

.PPN(x, valid = NULL)

.COR(x, valid = NULL)

.COL(x, valid = NULL)

.ROW(x, valid = NULL)

.PNT(x, valid = NULL)

.SLD(x, valid = NULL)

.SQR(x, valid = NULL)

.EMP(x)

.RCT(x, valid = NULL)

.LIN(x, valid = NULL)

.atm_dtf(x, valid = NULL)

.atm_mat(x, valid = NULL)

.atm_scl(x, valid = NULL)

.atm_vec(x, valid = NULL)

.atm_vls(x, valid = NULL)

.chr_arr(x, valid = NULL)

.chr_dtf(x, valid = NULL)

.chr_vec(x, valid = NULL)

.chr_vls(x, valid = NULL)

.cmp_atm(x, valid = NULL)

.cmp_chr(x, valid = NULL)

.cmp_cor(x, valid = NULL)

.cmp_num(x, valid = NULL)

.cmp_scl(x, valid = NULL)

.cmp_vec(x, valid = NULL)

.lgl_scl(x, valid = NULL)

.nnw_vec(x, valid = NULL)

.pop_atm(x, valid = NULL)

.pop_chr(x, valid = NULL)

.pop_dtf(x, valid = NULL)

.pop_mat(x, valid = NULL)

.pop_srt(x, valid = NULL)

.pop_vec(x, valid = NULL)

.pop_vls(x, valid = NULL)

.cmp_atm_vec(x, valid = NULL)

.cmp_ch1_scl(x, valid = NULL)

.cmp_ch1_vec(x, valid = NULL)

.cmp_ch3_scl(x, valid = NULL)

.cmp_ch3_vec(x, valid = NULL)

.cmp_chr_arr(x, valid = NULL)

.cmp_chr_dtf(x, valid = NULL)

.cmp_chr_vec(x, valid = NULL)

.cmp_chr_vls(x, valid = NULL)

.cmp_cor_scl(x, valid = NULL)

.cmp_cor_vec(x, valid = NULL)

.cmp_cor_mvc(x, valid = NULL)

.cmp_cor_sqr(x, valid = NULL)

.cmp_chr_gen(x, valid = NULL)

.cmp_chr_scl(x, valid = NULL)

.cmp_clr_vec(x, valid = NULL)

.cmp_lgl_scl(x, valid = NULL)

.cmp_lgl_vec(x, valid = NULL)

.cmp_nng_scl(x, valid = NULL)

.cmp_nnw_scl(x, valid = NULL)

.cmp_nnw_vec(x, valid = NULL)

.cmp_num_scl(x, valid = NULL)

.cmp_num_vec(x, valid = NULL)

.cmp_pos_vec(x, valid = NULL)

.cmp_ppn_scl(x, valid = NULL)

.cmp_ppn_vec(x, valid = NULL)

.cmp_psw_scl(x, valid = NULL)

.cmp_psw_vec(x, valid = NULL)

.cmp_srt_vec(x, valid = NULL)

.cmp_str_scl(x, valid = NULL)

.cmp_str_vec(x, valid = NULL)

.cmp_whl_scl(x, valid = NULL)

.cmp_atm_mvc(x, valid = NULL)

.unq_atm_mvc(x, valid = NULL)

.unq_atm_vec(x, valid = NULL)

.unq_ch1_vec(x, valid = NULL)

.unq_ch3_vec(x, valid = NULL)

.unq_chr_vec(x, valid = NULL)

.unq_nnw_vec(x, valid = NULL)

.unq_num_vec(x, valid = NULL)

.unq_psw_vec(x, valid = NULL)

.unq_str_vec(x, valid = NULL)

.atm_rct_dtf(x, valid = NULL)

.atmrctdtf(x)
}
\arguments{
\item{x}{Any object. See \emph{details}.}

\item{valid}{An optional object containing valid atomic values to check against atomic values in \code{x}. See \emph{details}.}
}
\value{
A logical scalar.
}
\description{
Fast property checking for \code{\link{ppp}} functions without the dot prefix (e.g., \code{.ATM(x)} is a faster version of \code{ATM(x)} because it uses only base functions to conduct property checking).
}
\details{
When \code{valid} is supplied, both \code{x} and \code{valid} are \link[=av]{atomized} before checking whether all atomic elements of \code{x} are contained in the atomic elements of \code{valid}.
}
\section{Functions}{
\itemize{
\item \code{.ATM()}: Checks for atomic-ness subject to any value restrictions in \code{valid}.

\item \code{.DEF()}: Checks for defined-ness (non-\code{NULL}-ness) subject to any value restrictions in \code{valid}.

\item \code{.FUN()}: Checks for function-ness (function object or function name) subject to any value restrictions in \code{valid}.

\item \code{.NIL()}: Checks for nil-ness (length 0-ness).

\item \code{.NLL()}: Checks for NULL-ness.

\item \code{.POP()}: Checks for populated-ness subject to any value restrictions in \code{valid}.

\item \code{.RCR()}: Checks for recursiveness.

\item \code{.ARR()}: Checks for array-ness subject to any value restrictions in \code{valid}.

\item \code{.DTF()}: Checks for data.frame-ness subject to any value restrictions in \code{valid}.

\item \code{.GEN()}: Checks for generic-ness (array-ness or vector-ness).

\item \code{.MAT()}: Checks for matrix-ness subject to any value restrictions in \code{valid}.

\item \code{.MVC()}: Checks for multivec-ness subject to any value restrictions in \code{valid}.

\item \code{.SCL()}: Checks for scalar-ness subject to any value restrictions in \code{valid}.

\item \code{.VLS()}: Checks for vector-list-ness.

\item \code{.VEC()}: Checks for vec-ness (scalar or vector) subject to any value restrictions in \code{valid}.

\item \code{.D0D()}: Checks for zero defined dimensions.

\item \code{.D1D()}: Checks for a single defined dimension subject to any value restrictions in \code{valid}.

\item \code{.D2D()}: Checks for two defined dimensions subject to any value restrictions in \code{valid}.

\item \code{.DHD()}: Checks for hyper-defined dimension-ness subject to any value restrictions in \code{valid}.

\item \code{.EUD()}: Checks for undefined effective dimensionality.

\item \code{.E2D()}: Checks for effective bi-dimensionality subject to any value restrictions in \code{valid}.

\item \code{.EHD()}: Checks for effective hyper-dimensionality subject to any value restrictions in \code{valid}.

\item \code{.E0D()}: Checks for effective zero-dimensionality subject to any value restrictions in \code{valid}.

\item \code{.E1D()}: Checks for effective unidimensionality subject to any value restrictions in \code{valid}.

\item \code{.NA0()}: Checks for scalar \code{NA}-ness.

\item \code{.OK0()}: Checks for atomic, non-\code{NA} scalar-ness subject to any value restrictions in \code{valid}.

\item \code{.DUP()}: Checks for atomic duplicated-ness subject to any value restrictions in \code{valid}.

\item \code{.UNQ()}: Checks for atomic uniqueness subject to any value restrictions in \code{valid}.

\item \code{.CMP()}: Checks for atomic completeness (non-\code{NA}-ness) subject to any value restrictions in \code{valid}.

\item \code{.MSS()}: Checks for atomic fully-missing-ness.

\item \code{.PRT()}: Checks for atomic partial completeness subject to any value restrictions in \code{valid}.

\item \code{.CH1()}: Checks for atomic one-char-ness subject to any value restrictions in \code{valid}.

\item \code{.CH3()}: Checks for atomic three-char-ness subject to any value restrictions in \code{valid}.

\item \code{.CHR()}: Checks for atomic character-ness subject to any value restrictions in \code{valid}.

\item \code{.STR()}: Checks for atomic string-ness (non-blank and character) subject to any value restrictions in \code{valid}.

\item \code{.CLR()}: Checks for atomic color-ness subject to any value restrictions in \code{valid}.

\item \code{.FAC()}: Checks for factor-ness subject to any value restrictions in \code{valid}.

\item \code{.ORD()}: Checks for ordered factor-ness subject to any value restrictions in \code{valid}.

\item \code{.UNO()}: Checks for unordered factor-ness subject to any value restrictions in \code{valid}.

\item \code{.IND()}: Checks for indexer-ness (positive whole number or logical) subject to any value restrictions in \code{valid}.

\item \code{.NST()}: Checks for non-sortableness subject to any value restrictions in \code{valid}.

\item \code{.SRT()}: Checks for sortable-ness subject to any value restrictions in \code{valid}.

\item \code{.LGL()}: Checks for logical-ness subject to any value restrictions in \code{valid}.

\item \code{.NUM()}: Checks for numeric-ness subject to any value restrictions in \code{valid}.

\item \code{.WHL()}: Checks for whole-number-ness subject to any value restrictions in \code{valid}.

\item \code{.ODD()}: Checks for odd-valued-ness subject to any value restrictions in \code{valid}.

\item \code{.EVN()}: Checks for even-valued-ness subject to any value restrictions in \code{valid}.

\item \code{.NGW()}: Checks for negative whole-numbered-ness subject to any value restrictions in \code{valid}.

\item \code{.NPW()}: Checks for non-positive whole-numbered-ness subject to any value restrictions in \code{valid}.

\item \code{.POS()}: Checks for positive numeric-ness subject to any value restrictions in \code{valid}.

\item \code{.PSW()}: Checks for positive whole-numbered-ness subject to any value restrictions in \code{valid}.

\item \code{.FRC()}: Checks for numeric fractional-ness subject to any value restrictions in \code{valid}.

\item \code{.NEG()}: Checks for negative numeric-ness subject to any value restrictions in \code{valid}.

\item \code{.POS()}: Checks for positive numeric-ness subject to any value restrictions in \code{valid}.

\item \code{.NNG()}: Checks for non-negative numeric-ness subject to any value restrictions in \code{valid}.

\item \code{.NNW()}: Checks for non-negative whole-numbered-ness subject to any value restrictions in \code{valid}.

\item \code{.NPS()}: Checks for non-positive numeric-ness subject to any value restrictions in \code{valid}.

\item \code{.PCT()}: Checks for percentage-valued-ness subject to any value restrictions in \code{valid}.

\item \code{.PPN()}: Checks for proportion-valued-ness subject to any value restrictions in \code{valid}.

\item \code{.COR()}: Checks for correlation-valued-ness subjec to any value restrictions in \code{valid}.

\item \code{.COL()}: Checks for column-ness subject to any value restrictions in \code{valid}.

\item \code{.ROW()}: Checks for row-ness subject to any value restrictions in \code{valid}.

\item \code{.PNT()}: Checks for point-ness subject to any value restrictions in \code{valid}.

\item \code{.SLD()}: Checks for solid-ness subject to any value restrictions in \code{valid}.

\item \code{.SQR()}: Checks for square matrix-ness subject to any value restrictions in \code{valid}.

\item \code{.EMP()}: Checks for emptiness (length \code{0} but not \code{NULL}).

\item \code{.RCT()}: Checks for rectangularness (\code{nrow > 1} and \code{ncol > 1}) subject to any value restrictions in \code{valid}.

\item \code{.LIN()}: Checks for linearness subject to any value restrictions in \code{valid}.

\item \code{.atm_dtf()}: Checks for atomic data.frame-ness subject to any value restrictions in \code{valid}.

\item \code{.atm_mat()}: Checks for atomic matrix-ness subject to any value restrictions in \code{valid}.

\item \code{.atm_scl()}: Checks for atomic scalar-ness subject to any value restrictions in \code{valid}.

\item \code{.atm_vec()}: Checks for atomic vec-ness subject to any value restrictions in \code{valid}.

\item \code{.atm_vls()}: Checks for atomic vector-list-ness subject to any value restrictions in \code{valid}.

\item \code{.chr_arr()}: Checks for character array-ness subject to any value restrictions in \code{valid}.

\item \code{.chr_dtf()}: Checks for character data.frame-ness subject to any value restrictions in \code{valid}.

\item \code{.chr_vec()}: Checks for character vec-ness subject to any value restrictions in \code{valid}.

\item \code{.chr_vls()}: Checks for character vector-list-ness subject to any value restrictions in \code{valid}.

\item \code{.cmp_atm()}: Checks for atomic completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_chr()}: Checks for character completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_cor()}: Checks for correlation-valued completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_num()}: Checks for numeric completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_scl()}: Checks for scalar completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_vec()}: Checks for vec completeness subject to any value restrictions in \code{valid}.

\item \code{.lgl_scl()}: Checks for logical scalar-ness subject to any value restrictions in \code{valid}.

\item \code{.nnw_vec()}: Checks for non-negative whole-numbered vec-ness subject to any value restrictions in \code{valid}.

\item \code{.pop_atm()}: Checks for populated atomic-ness subject to any value restrictions in \code{valid}.

\item \code{.pop_chr()}: Checks for populated character-ness subject to any value restrictions in \code{valid}.

\item \code{.pop_dtf()}: Checks for populated data.frame-ness subject to any value restrictions in \code{valid}.

\item \code{.pop_mat()}: Checks for populated matrix-ness subject to any value restrictions in \code{valid}.

\item \code{.pop_srt()}: Checks for populated sortableness subject to any value restrictions in \code{valid}.

\item \code{.pop_vec()}: Checks for populated vec-ness subject to any value restrictions in \code{valid}.

\item \code{.pop_vls()}: Checks for populated vector-list-ness subject to any value restrictions in \code{valid}.

\item \code{.cmp_atm_vec()}: Checks for atomic vector completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_ch1_scl()}: Checks for one-char scalar completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_ch1_vec()}: Checks for one-char vec completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_ch3_scl()}: Checks for three-char scalar completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_ch3_vec()}: Checks for three-char vec completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_chr_arr()}: Checks for character array completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_chr_dtf()}: Checks for character data-frame completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_chr_vec()}: Checks for character vec completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_chr_vls()}: Checks for character vector-list completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_cor_scl()}: Checks for correlation-valued scalar completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_cor_vec()}: Checks for correlation-valued vec completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_cor_mvc()}: Checks for correlation-valued multivec completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_cor_sqr()}: Checks for correlation-valued square matrix completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_chr_gen()}: Checks for character generic completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_chr_scl()}: Checks for character scalar completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_clr_vec()}: Checks for color vec completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_lgl_scl()}: Checks for logical scalar completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_lgl_vec()}: Checks for logical vec completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_nng_scl()}: Checks for non-negative numeric scalar completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_nnw_scl()}: Checks for non-negative whole-numbered scalar completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_nnw_vec()}: Checks for non-negative whole-numbered vec completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_num_scl()}: Checks for numeric scalar completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_num_vec()}: Checks for numeric vec completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_pos_vec()}: Checks for positive numeric vec completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_ppn_scl()}: Checks for proportion-valued scalar completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_ppn_vec()}: Checks for proportion-value vec completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_psw_scl()}: Checks for positive whole-numbered scalar completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_psw_vec()}: Checks for positive whole-numbered vec completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_srt_vec()}: Checks for sortable vec completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_str_scl()}: Checks for string scalar completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_str_vec()}: Checks for string vec completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_whl_scl()}: Checks for whole-numbered scalar completeness subject to any value restrictions in \code{valid}.

\item \code{.cmp_atm_mvc()}: Checks for atomic multivec completeness subject to any value restrictions in \code{valid}.

\item \code{.unq_atm_mvc()}: Checks for atomic multivec non-\code{NA} uniqueness subject to any value restrictions in \code{valid}.

\item \code{.unq_atm_vec()}: Checks for atomic vec non-\code{NA} uniqueness subject to any value restrictions in \code{valid}.

\item \code{.unq_ch1_vec()}: Checks for one-char vec non-\code{NA} uniqueness subject to any value restrictions in \code{valid}.

\item \code{.unq_ch3_vec()}: Checks for three-char vec non-\code{NA} uniqueness subject to any value restrictions in \code{valid}.

\item \code{.unq_chr_vec()}: Checks for character vec non-\code{NA} uniqueness subject to any value restrictions in \code{valid}.

\item \code{.unq_nnw_vec()}: Checks for non-negative whole-numbered non-\code{NA} uniqueness subject to any value restrictions in \code{valid}.

\item \code{.unq_num_vec()}: Checks for numeric vec non-\code{NA} uniqueness subject to any value restrictions in \code{valid}.

\item \code{.unq_psw_vec()}: Checks for positive whole-numbered vec non-\code{NA} uniqueness subject to any value restrictions in \code{valid}.

\item \code{.unq_str_vec()}: Checks for string vec non-\code{NA} uniqueness subject to any value restrictions in \code{valid}.

\item \code{.atm_rct_dtf()}: Checks for atomic rectangular data-frame-ness subject to any value restrictions in \code{valid}.

\item \code{.atmrctdtf()}: Super-fast check of whether an object is a data frame that has 2+ rows, has 2+ columns, and contains only atomic elements.

}}
\seealso{
Other properties: 
\code{\link{as_mmm}()},
\code{\link{bbb_ccc_help}()},
\code{\link{bbb_help}()},
\code{\link{bbb_mmm_prop_funs}()},
\code{\link{ccc_help}()},
\code{\link{cls}()},
\code{\link{cmp_ccc_help}()},
\code{\link{cmp_mmm_ccc_help}()},
\code{\link{cmp_mmm_help}()},
\code{\link{compatible}()},
\code{\link{ddd_prop_funs}()},
\code{\link{eee_help}()},
\code{\link{iii_help}()},
\code{\link{meets}()},
\code{\link{mmm_ccc_help}()},
\code{\link{mmm_help}()},
\code{\link{ppp_help}()},
\code{\link{sss_ccc_help}()},
\code{\link{sss_prop_funs}()},
\code{\link{unq_ccc_prop_funs}()},
\code{\link{unq_mmm_ccc_help}()},
\code{\link{unq_mmm_help}()}
}
\concept{properties}
