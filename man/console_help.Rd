% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/say.R
\encoding{UTF-8}
\name{console_help}
\alias{console_help}
\alias{say}
\alias{cat0}
\alias{continue}
\alias{xcon}
\title{User updates and interaction via the console in default color and style}
\usage{
console_help()

say(..., lev = 0, sub = 0, clear = FALSE)

cat0(..., clear = FALSE)

continue(clear = FALSE)

xcon()
}
\arguments{
\item{...}{An arbitrary number of atomic arguments to be atomized collapsed into a character scalar message to the user. If no values are supplied and \code{lev = NA} or \code{lev = 6}, prints a single dot (\code{.}) immediately following the current contents of the console.}

\item{lev}{Either \code{NA} to print the message in \code{...} immediately following the current contents of the console or a value from \code{1:6} to use the console for up to \code{6} levels of user updates. See function \code{say} below.}

\item{sub}{Either \code{0}, \code{1}, or \code{2}. See function \code{say} below.}

\item{clear}{Either \code{TRUE} or \code{FALSE} indicating whether to clear the console before printing a message to it.}
}
\value{
\code{NULL}.
}
\description{
User updates and interaction via the console in default color and style
}
\section{Functions}{
\itemize{
\item \code{say()}: Flattens \code{...} to a character scalar message and either (a) prints it to the console or (b) structures it as an update and prints it to the console. When \code{...} is empty, the message defaults to a single dot (\code{"."}). Allows for structuring user update messages at hierarchical levels as explained in the following table:
\tabular{ll}{  VALUE      \tab PREFIX OF MESSAGE          \cr
  OF \code{lev}   \tab POSTED TO CONSOLE          \cr
  \code{0}        \tab < none >                   \cr
  \code{1}        \tab < newline >                \cr
  \code{2}        \tab < newline > + \code{'| '}       \cr
  \code{3}        \tab < newline > + \code{'| > '}     \cr
  \code{4}        \tab < newline > + \code{'| | > '}   \cr
  \code{5}        \tab < newline > + \code{'| | | > '} \cr
  \code{...}      \tab \code{...}                        }

\item \code{cat0()}: Flattens \code{...} into a character scalar and prints it to the console preceded and succeeded by a new line.

\item \code{continue()}: Prints \code{"Hit [enter] or [return] to continue"} to the console and pause execution until the user hits the enter or return key.

\item \code{xcon()}: Clears the console.

}}
\examples{
xcon()
cat0("msg on its own line")
chat. <- function() {
  say("msg 1A", lev = 1)
  say("msg 2A", lev = 2)
  say("msg 2B", lev = 2)
  say("msg 3A", lev = 3)
  say("msg 3B", lev = 3)
  say()
  say()
  say()
  say("msg 3C", lev = 3)
  say("msg 4A", lev = 4)
  say("msg 4B", lev = 4)
  say("msg 5A", lev = 5)
  say(lev = 6)
  say(lev = 6)
  say("msg 5B", lev = 5)
  say("msg 3D", lev = 3)
  say()
  say()
  say("msg 1B", lev = 1)
  say(" + a_random_mssg")
}
chat.()
\dontrun{continue()}
}
\seealso{
Other meta: 
\code{\link{callers}()},
\code{\link{dot_args}()},
\code{\link{pause}()},
\code{\link{ply_help}()},
\code{\link{purge_help}()},
\code{\link{recycling_help}()},
\code{\link{run}()}

Other console: 
\code{\link{alert_utils}()}
}
\concept{console}
\concept{meta}
