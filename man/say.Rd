% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/console..R
\name{say}
\alias{say}
\alias{cat0}
\alias{continue}
\title{User updates and interaction via the console}
\usage{
say(..., lev = NA)

cat0(...)

continue()
}
\arguments{
\item{...}{An arbitrary number of atomic arguments to be atomized collapsed into a character scalar message to the user. If no values are supplied and \code{lev = NA} or \code{lev = 6}, prints a single dot (\code{.}) immediately following the current contents of the console.}

\item{lev}{Either \code{NA} to print the message in \code{...} immediately following the current contents of the console or a value from \code{1:6} to use the console for up to \code{6} levels of user updates. See details.}
}
\value{
\code{NULL}.
}
\description{
\tabular{rl}{
\code{continue}   \tab Prints \code{"Hit [enter] or [return] to continue"} to the console and pausse execution until the user hits the enter or return key.
\cr          \tab  
\cr \code{cat0}   \tab Collapses \code{...} to a character scalar message prefixed and suffixed with newlines and prints it to the console (ensures the message occurs on its own line of the console).
\cr          \tab  
\cr  \code{say}   \tab Collapses the message in \code{...} to a character scalar and either (a) prints it to the console or (b) structures it as a certain level of update and then prints it to the console. See details.
}
}
\details{
The function \code{say} allows for structuring user update messages at six hierarchical levels as explained in the following table where \verb{___} is a placeholder for the character scalar message created when collapsing \code{...}:
\tabular{rcl}{
MESSAGE    \tab    VALUE     \tab    UPDATE
\cr  SUPPLIED    \tab OF THE \code{lev} \tab    PRINTED
\cr IN \code{...}?    \tab   ARGUMENT   \tab    TO CONSOLE
\cr       yes    \tab     \code{NA}     \tab    \code{'___'}
\cr       yes    \tab     \code{1}      \tab    newline + \code{'___'}
\cr       yes    \tab     \code{2}      \tab    newline + \code{'| ___'}
\cr       yes    \tab     \code{3}      \tab    newline + \code{'| > ___'}
\cr       yes    \tab     \code{4}      \tab    \code{' > ___'}
\cr       yes    \tab     \code{5}      \tab    \code{'..(___)'}
\cr        no    \tab     \code{6}      \tab    \code{'.'}
\cr        no    \tab     \code{NA}     \tab    \code{'.'}
}
Other combinations not represented in the table above will result in an error.
}
\examples{
cat0("msg on its own line")
chat. <- function() {
  say("msg 1A", lev = 1)
  say("msg 2A", lev = 2)
  say("msg 2B", lev = 2)
  say("msg 3A", lev = 3)
  say("msg 3B", lev = 3)
  say()
  say()
  say()
  say("msg 3C", lev = 3)
  say("msg 4A", lev = 4)
  say("msg 4B", lev = 4)
  say("msg 5A", lev = 5)
  say(lev = 6)
  say(lev = 6)
  say("msg 5B", lev = 5)
  say("msg 3D", lev = 3)
  say()
  say()
  say("msg 1B", lev = 1)
  say(" + a_random_message")
}
chat.()
\dontrun{continue()}
}
