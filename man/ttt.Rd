% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ttt.R
\name{ttt}
\alias{ttt}
\alias{iatm}
\alias{idef}
\alias{ifun}
\alias{inil}
\alias{inll}
\alias{ipop}
\alias{ircr}
\alias{ttt_vals}
\alias{ittt}
\title{Fundamental Type (ttt) Property Family}
\usage{
ttt(x.)

iatm(x.)

idef(x.)

ifun(x.)

inil(x.)

inll(x.)

ipop(x.)

ircr(x.)

ttt_vals()

ittt(x., xxx., ...)
}
\arguments{
\item{x.}{An object.}

\item{xxx.}{A character scalar containing one or more values from
\code{ttt_vals()} separated by pipes and/or underscores ("."). Combinations
of fundamental types can be specified by separating them with underscores.
Separating fundamental types or combinations of fundamental types with
pipes will result in a value of \code{TRUE} if any of them applies to
\code{x.}.}

\item{...}{Additional arguments to \code{\link{meets}} containing value and
element/row/column count restrictions.}
}
\value{
\code{ttt_vals} and \code{ttt} return a character scalar or
vector. All others return either \code{TRUE} or \code{FALSE}.
}
\description{
Get a character vector of all fundamental type properties
applicable to \code{x.}.
}
\details{
An object's fundamental type (ttt) is defined by its most
basic structural properties as described in the following table:
\tabular{lll}{
FUNDAMENTAL \tab FUNDAMENTAL \tab CHARACTERISTICS OF                  \cr
TYPE VALUE  \tab TYPE NAME   \tab QUALIFYING OBJECTS                  \cr
\code{'nll'}\tab null        \tab \code{NULL}                         \cr
\code{'def'}\tab defined     \tab not \code{NULL}                     \cr
\code{'nil'}\tab nil-length  \tab length is 0 (includes \code{NULL})  \cr
\code{'pop'}\tab populated   \tab length is > 0                       \cr
\code{'fun'}\tab function ref\tab function object or character scalar
containing a function name.         \cr
\code{'atm'}\tab atomic      \tab atomic                              \cr
\code{'rcr'}\tab recursive   \tab list-like (tibble, lists, or objects
containing an element that is not an
atomic scalar)                        }
}
\section{Functions}{
\itemize{
\item \code{iatm}: Is \code{x.} atomic (regardless of length)?

\item \code{idef}: Is \code{x.} defined (non-\code{NULL})?

\item \code{ifun}: Is \code{x.} a function or a function name?

\item \code{inil}: Is \code{x.} nil (of length 0)?

\item \code{inll}: Is \code{x.} \code{NULL}

\item \code{ipop}: Is \code{x.} populated (of length > 0)?

\item \code{ircr}: Is \code{x.} recursive?

\item \code{ttt_vals}: Get a character vector of all possible fundamental type
property values.

\item \code{ittt}: Determine whether \code{x.} is of the fundamental type(s)
contained in \code{xxx.} subject to the additional specifications in
\code{...}.
}}

\section{Additional Arguments in \code{...}}{

Submitting additional arguments to \code{is_ttt} via \code{...} allows
for checking not just the fundamental but whether length, number of rows,
number of columns, and element values meet flexible criteria.
}

\seealso{
Other props: 
\code{\link{ccc}()},
\code{\link{cmp_mmm_agn}},
\code{\link{cmp_mmm_arr}},
\code{\link{cmp_mmm_atb}},
\code{\link{cmp_mmm_avl}},
\code{\link{cmp_mmm_avt}},
\code{\link{cmp_mmm_gen}},
\code{\link{cmp_mmm_mat}},
\code{\link{cmp_mmm_mvc}},
\code{\link{cmp_mmm_scl}},
\code{\link{cmp_mmm_vec}},
\code{\link{cmp_mmm}},
\code{\link{comparable}()},
\code{\link{compatible}()},
\code{\link{ddd}()},
\code{\link{eee}()},
\code{\link{fff}()},
\code{\link{is_failsafe}},
\code{\link{is_xxx}},
\code{\link{meets}()},
\code{\link{mmm_agn}},
\code{\link{mmm_arr}},
\code{\link{mmm_atb}},
\code{\link{mmm_avl}},
\code{\link{mmm_avt}},
\code{\link{mmm_mat}},
\code{\link{mmm_mvc}},
\code{\link{mmm_scl}},
\code{\link{mmm_vec}},
\code{\link{mmm}()},
\code{\link{sss}()},
\code{\link{xxx}()}
}
\concept{props}
