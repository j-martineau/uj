% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ccc.R
\name{ccc.}
\alias{ccc.}
\alias{iarr}
\alias{idtf}
\alias{igen}
\alias{imat}
\alias{imvc}
\alias{iscl}
\alias{ivec}
\alias{ivls}
\alias{ccc_vals}
\alias{ccc}
\alias{iccc}
\title{Extended class properties}
\usage{
ccc.()

iarr(x)

idtf(x)

igen(x)

imat(x)

imvc(x)

iscl(x)

ivec(x)

ivls(x)

ccc_vals()

ccc(x)

iccc(x, ccc, ...)
}
\arguments{
\item{x}{An object.}

\item{ccc}{\code{NULL} or \link[cmp_chr_scl]{complete character scalar}
containing one or more values from \code{ccc_vals()} separated by pipes
and/or underscores. Combinations of extended classes can be specified by
separating them with underscores. Separating extended classes or
combinations of extended classes with pipes will result in a value of
\code{TRUE} if any of them applies to \code{x}.}

\item{...}{Additional arguments to \code{\link{meets}} containing value and
element/row/column count restrictions.}
}
\value{
\code{ccc_vals} returns a character vector containing all valid
extended class property values. \code{ccc} returns a character scalar
or vector containing all extended class properties from
\code{ccc_vals()} applicable to \code{x}. All others return either
\code{TRUE} or \code{FALSE}.
}
\description{
Extended classes are not formally defined, but are dynamically
evaluated. Extended classes come in two varieties: universal and atomic. The
following two tables define each extended class in universal and atomic form,
respectively.:\tabular{lll}{
EXTENDED     \tab PROPERTY     \tab QUALIFYING                            \cr
CLASS        \tab VALUE        \tab OBJECTS                               \cr
vlist        \tab \code{'vls'} \tab Vector-list (i.e., not a data.frame). \cr
data.frame   \tab \code{'dtf'} \tab Data.frame.                           \cr
generic      \tab \code{'gen'} \tab Vector, array, or vlist.              \cr
matrix       \tab \code{'mat'} \tab Matrix.                               \cr
array+       \tab \code{'arr'} \tab Array or vector of any length.        \cr
scalar       \tab \code{'scl'} \tab Array or vector of any length.        \cr
vector+      \tab \code{'vec'} \tab Vector of length 1+ or array of length 1+
with multiple index positions in either 0
or 1 dimensions.                      \cr
multivec     \tab \code{'mvc'} \tab Vector of length 2+ or array of length 2+
with multiple index positions in exactly
1 dimension.                            }
Functions related to extended are described in the following
table:\tabular{ll}{
FUNCTION          \tab WHAT THE                                           \cr
FORMAT            \tab FUNCTION DOES                                      \cr
\code{i***}       \tab Evaluates whether an object is of the fundamental type
represented by \code{***}.                         \cr
\code{ccc}        \tab Gets a character vector containing all fundamental
type properties of an object.                      \cr
\code{iccc}       \tab Evaluates an object for a specific fundamental type
and any additional properties specified in
\code{...}.                                        \cr
\code{ccc_vals}   \tab Gets a character vector of all possible fundamental
type property values.                                }
}
\section{Functions}{
\itemize{
\item \code{iarr()}: Is \code{x} an array+?

\item \code{idtf()}: Is \code{x} a data.frame?

\item \code{igen()}: Is \code{x} a generic?

\item \code{imat()}: Is \code{x} a matrix?

\item \code{imvc()}: Is \code{x} a multivec?

\item \code{iscl()}: Is \code{x} a scalar?

\item \code{ivec()}: Is \code{x} a vector+?

\item \code{ivls()}: Is \code{x} a vlist?

\item \code{ccc_vals()}: Get a character vector of all possible atomic extended
classes.

\item \code{ccc()}: Gets a vector of properties from \code{ccc_vals()} that are
applicable to \code{x}.

\item \code{iccc()}: Evaluates whether any (combination) property in \code{ccc}
is an extended class property applicable to \code{x}.

}}
\section{Submitting additional arguments to \code{ccc} via \code{...}}{

Allows for checking not just the ccc but whether length, number of rows,
number of columns, and element values meet flexible criteria.
}

\seealso{
Other props: 
\code{\link{as_mmm.}()},
\code{\link{cmp_ccc.}()},
\code{\link{cmp_mmm.}()},
\code{\link{cmp_mmm_ccc.}()},
\code{\link{comparable.}()},
\code{\link{compatible.}()},
\code{\link{ddd.}()},
\code{\link{eee.}()},
\code{\link{fff.}()},
\code{\link{meets.}()},
\code{\link{mmm.}()},
\code{\link{mmm_ccc.}()},
\code{\link{ppp.}()},
\code{\link{sss.}()},
\code{\link{ttt.}()},
\code{\link{ttt_ccc.}()},
\code{\link{ttt_mmm.}()}
}
\concept{props}
