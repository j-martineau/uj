% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/logicals.R
\name{logicals.}
\alias{logicals.}
\alias{not}
\alias{and}
\alias{or}
\alias{one}
\alias{TEST}
\alias{ANY}
\alias{ALL}
\alias{NOR}
\alias{ONE}
\alias{TWO}
\alias{tests}
\alias{w}
\alias{nors}
\alias{anys}
\alias{alls}
\alias{ones}
\alias{twos}
\alias{is_in}
\alias{not_in}
\alias{has}
\alias{lacks}
\title{Extended, error-checked logicals}
\usage{
logicals.()

not(x, na = "err")

and(x, y, na = "err")

or(x, y, na = "err")

one(x, y, na = "err")

TEST(x, na = FALSE, err = NA)

ANY(..., err = NA)

ALL(..., err = NA)

NOR(..., err = NA)

ONE(..., err = NA)

TWO(..., err = NA)

tests(..., na = F, a = F, not = F, across = NA, within = NA)

w(..., not = F, na = F, a = F)

nors(..., na = F, a = F, across = T, within = F)

anys(..., na = F, a = F, across = T, within = F)

alls(..., na = F, a = F, across = T, within = F)

ones(..., na = F, a = F, across = T, within = F)

twos(..., na = F, a = F, across = T, within = F)

is_in(x, y, not = F, na = F, agg = NA)

not_in(x, y, na = F, agg = NA)

has(x, y, na = T, agg = NA)

lacks(x, y, na = T, agg = NA)
}
\arguments{
\item{x}{\link[is_lgl]{Logical object} for all functions other than
\code{is_in}, \code{not_in}, \code{has}, and \code{lacks}. Otherwise, an
atomic object.}

\item{na}{\link[cmp_lgl_scl]{Complete logical scalar} indicating what value
should replace \code{NA} values.}

\item{y}{\link[is_lgl]{Logical object} for all functions other than
\code{is_in}, \code{not_in}, \code{has}, and \code{lacks}. Otherwise, an
atomic object \link[compatible]{compatible} with \code{x}.}

\item{err}{\link[lgl_scl]{Logical scalar}. \code{err = TRUE}, indicates
\code{TRUE} should be substituted for non-logical values, \code{err =
  FALSE} indicates \code{FALSE} should be substituted for non-logical values,
\code{err = NA} indicates an error should be thrown if a non-logical value
is encountered.}

\item{...}{Arbitrary number of \link[lgl_vec]{logical vecs} to be processed.}

\item{a}{\link[cmp_lgl_scl]{Complete logical scalar} indicating whether to
atomize \code{...} before processing. This creates a single atomic vector
of all atomic elements contained in all arguments in \code{...} and
effectively changes the behavior of \code{or} to \code{any}, \code{and} to
\code{all}, \code{not} to \code{!any}, and \code{some} and \code{most} to
count the total number of \code{TRUE} values rather than the number of
\code{TRUE} values in the same location of recycled arguments from
\code{...} (but with error checking and flexible \code{NA} value handling.)}

\item{not}{\link[cmp_lgl_scl]{Complete logical scalar} indicating whether to
negate values in arguments supplied in \code{...} before processing.}

\item{across, within}{\link[cmp_chr_scl]{Complete character scalar} in
\code{c('', 'none', 'one', 'any', 'some', 'all')} indicating no aggregation}

\item{agg}{\link[cmp_chr_scl]{Completre character scalar} in \code{c('nor',
  'one', 'any', 'two', 'all')} used to specify, respectively, that 0, 1, any,
2 or more, and all arguments must be \code{TRUE}.}
}
\description{
Extended, error-checked logicals
}
\section{Functions}{
\itemize{
\item \code{not()}: Wrapper for \code{!x} with error checking.

\item \code{and()}: Wrapper for \code{x & y} with error checking.

\item \code{or()}: Wrapper for \code{x | y} with error checking.

\item \code{one()}: Returns \code{FALSE} as soon as a second \code{TRUE}
argument is encountered. Otherwise, after evaluating all arguments
evaluates whether the number of \code{TRUE} arguments is 1.

\item \code{TEST()}: Tests \code{x} and returns either \code{TRUE} or
\code{FALSE}. If \code{x} is not a logical scalar, throw an error if
\code{err = 'err'}; otherwise return the value of \code{err}. Returns the
value of \code{na} if the value of \code{x} is \code{NA}.

\item \code{ANY()}: Returns \code{TRUE} as soon as a \code{TRUE} argument
is encountered. If none are encountered, return \code{FALSE}.

\item \code{ALL()}: Returns \code{FALSE} as soon as a \code{FALSE}
argument is encountered. If none are encountered, return \code{TRUE}.

\item \code{NOR()}: Returns \code{FALSE} as soon as a \code{TRUE}
argument is encountered. If none are encountered, return \code{TRUE}.

\item \code{ONE()}: Generalized \code{xor} with error checking.

\item \code{TWO()}: Returns \code{TRUE} as soon as a second \code{TRUE}
argument is encountered. Otherwise, after evaluating all arguments, check
whether the number of \code{TRUE} arguments is 1.

\item \code{tests()}: Tests an arbitrary number of arguments with a wide
array of options

\item \code{w()}: Indexes \code{TRUE} or \code{FALSE} values.

\item \code{nors()}: Check for across and/or within argument counts of
\code{TRUE} or \code{FALSE} values equal to zero.

\item \code{anys()}: Check for across and/or within argument counts of
\code{TRUE} or \code{FALSE} values equal to one or more.

\item \code{alls()}: Check for across and/or within argument counts of
\code{TRUE} or \code{FALSE} values equal to the number of elements.

\item \code{ones()}: Check for across and/or within argument counts of
\code{TRUE} or \code{FALSE} values equal to one.

\item \code{twos()}: Check for across and/or within argument counts of
\code{TRUE} or \code{FALSE} values equal to two ore more.

\item \code{is_in()}: Whether elements of \code{x} are contained in
\code{y}.

\item \code{not_in()}: Whether elements of \code{x} are not contained in
\code{y}.

\item \code{has()}: Whether \code{x} has/contains elements of \code{y}.

\item \code{lacks()}: Whether \code{x} lacks elements of \code{y}.

}}
\seealso{
Other logicals: 
\code{\link{binfuns.}()},
\code{\link{is_failsafe.}()}

Other extensions: 
\code{\link{a.}()},
\code{\link{binfuns.}()},
\code{\link{callers.}()},
\code{\link{case.}()},
\code{\link{dots.}()},
\code{\link{ex.}()},
\code{\link{failsafe.}()},
\code{\link{files.}()},
\code{\link{fork.}()},
\code{\link{fsub.}()},
\code{\link{is_failsafe.}()},
\code{\link{is_unq.}()},
\code{\link{make.}()},
\code{\link{n_th.}()},
\code{\link{na.}()},
\code{\link{naming.}()},
\code{\link{nx.}()},
\code{\link{os.}()},
\code{\link{pause.}()},
\code{\link{ply.}()},
\code{\link{put.}()},
\code{\link{reclass.}()},
\code{\link{recycling.}()},
\code{\link{run.}()},
\code{\link{stats.}()},
\code{\link{swap.}()},
\code{\link{values.}()},
\code{\link{x.}()},
\code{\link{xb.}()}

Other logicals: 
\code{\link{binfuns.}()},
\code{\link{is_failsafe.}()}
}
\concept{extensions}
\concept{logicals}
