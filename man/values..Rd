% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/values.R
\name{values.}
\alias{values.}
\alias{exist}
\alias{vget}
\alias{vset}
\title{Objects in environments of calling functions}
\usage{
values.()

exist(name, err = T, gens = 1)

vget(name, err = T, gens = 1)

vset(name, val, gens = 1)
}
\arguments{
\item{name}{\link[cmp_chr_scl]{Complete character scalar} giving the name of
an object.}

\item{err}{\link[cmp_lgl_scl]{Complete logical scalar} indicating whether to
throw an error if the object specified by \code{name} does not exist (i.e.,
rather than returning \code{FALSE}).}

\item{gens}{\link[cmp_psw_scl]{Complete positive whole-number scalar} giving
the number of generations back in the function call stack to go.}

\item{val}{A value to place into the object specified by \code{name}.}
}
\value{
\code{exist} returns a logical scalar indicating whether an object
named \code{name} exists in the environment of the calling function
\code{gens} generations back. \code{vget} returns the value of an object
named \code{name} in the function \code{gens} generations back. \code{vset}
sets the value of an object named \code{name} in the function \code{gens}
generations back to the value \code{val}.
}
\description{
Objects in environments of calling functions
}
\section{Functions}{
\itemize{
\item \code{exist()}: Check for the existence of an object in the environment
of a specific calling function.

\item \code{vget()}: get the value of an object in the environment of a
specific calling function.

\item \code{vset()}: set the value of an object in the environment of a
specific calling function.

}}
\examples{
fun.a <- function() {A <- 0; fun.b()}
fun.b <- function() {B <- 1; fun.c()}
fun.c <- function() {
  cat("\n callstack(): " , paste0("'", callstack(), "'"))
  cat("\n caller(1)  : '", caller(1), "'")
  cat("\n caller(2)  : '", caller(2), "'")
  cat("\n exist('A', err = F, gens = 1): ", exist('A', err = F, gens = 1))
  cat("\n exist('A', err = F, gens = 2): ", exist('A', err = F, gens = 2))
  cat("\n exist('B', err = F, gens = 1): ", exist('B', err = F, gens = 1))
  cat("\n exist('B', err = F, gens = 2): ", exist('B', err = F, gens = 2))
  cat("\n vget('A', err = F, gens = 2) : ", vget('A', err = F, gens = 2))
  cat("\n vget('A', err = F, gens = 1) : ", vget('A', err = F, gens = 1))
  cat("\n vget('B', err = F, gens = 2) : ", vget('B', err = F, gens = 2))
  cat("\n vget('B', err = F, gens = 1) : ", vget('B', err = F, gens = 1))
  vSet('A', 'A', gens = 2)
  vSet('B', 'B', gens = 1)
  cat("\n vget('A', gens = 2) : ", vget('A', err = F, gens = 2))
  cat("\n vget('B', gens = 1) : ", vget('B', err = F, gens = 1))
}
fun.a()
}
\seealso{
Other extensions: 
\code{\link{a.}()},
\code{\link{binfuns.}()},
\code{\link{callers.}()},
\code{\link{case.}()},
\code{\link{dots.}()},
\code{\link{ex.}()},
\code{\link{failsafe.}()},
\code{\link{files.}()},
\code{\link{fork.}()},
\code{\link{fsub.}()},
\code{\link{is_failsafe.}()},
\code{\link{is_unq.}()},
\code{\link{logicals.}()},
\code{\link{make.}()},
\code{\link{n_th.}()},
\code{\link{na.}()},
\code{\link{naming.}()},
\code{\link{nx.}()},
\code{\link{os.}()},
\code{\link{pause.}()},
\code{\link{ply.}()},
\code{\link{put.}()},
\code{\link{reclass.}()},
\code{\link{recycling.}()},
\code{\link{run.}()},
\code{\link{stats.}()},
\code{\link{swap.}()},
\code{\link{x.}()},
\code{\link{xb.}()}

Other environments: 
\code{\link{callers.}()},
\code{\link{os.}()},
\code{\link{recycling.}()},
\code{\link{run.}()}
}
\concept{environments}
\concept{extensions}
