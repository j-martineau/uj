% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/is_failsafe.R
\name{is_failsafe.}
\alias{is_failsafe.}
\alias{isIN}
\alias{isID}
\alias{isEQ}
\alias{isT}
\alias{isF}
\alias{isNa}
\alias{isOk}
\alias{isTF}
\alias{isLG}
\alias{isBL}
\alias{notIN}
\alias{notID}
\alias{notEQ}
\alias{notBL}
\alias{norIN}
\alias{norID}
\alias{norEQ}
\alias{norT}
\alias{norF}
\alias{norNa}
\alias{norOk}
\alias{norTF}
\alias{norLG}
\alias{norBL}
\alias{anyIN}
\alias{anyID}
\alias{anyEQ}
\alias{anyT}
\alias{anyF}
\alias{anyNa}
\alias{anyOk}
\alias{anyTF}
\alias{anyLG}
\alias{anyBL}
\alias{allIN}
\alias{allID}
\alias{allEQ}
\alias{allT}
\alias{allF}
\alias{allNa}
\alias{allOk}
\alias{allTF}
\alias{allLG}
\alias{allBL}
\alias{oneIN}
\alias{oneID}
\alias{oneEQ}
\alias{oneT}
\alias{oneF}
\alias{oneNa}
\alias{oneOk}
\alias{oneTF}
\alias{oneLG}
\alias{oneBL}
\alias{twoIN}
\alias{twoID}
\alias{twoEQ}
\alias{twoT}
\alias{twoF}
\alias{twoNa}
\alias{twoOk}
\alias{twoTF}
\alias{twoLG}
\alias{twoBL}
\title{Failsafe \code{is} functions}
\usage{
is_failsafe.()

isIN(x, ...)

isID(x, y)

isEQ(x, y)

isT(x)

isF(x)

isNa(x)

isOk(x)

isTF(x)

isLG(x)

isBL(x)

notIN(x, ...)

notID(x, y)

notEQ(x, y)

notBL(x)

norIN(x, ...)

norID(x, y)

norEQ(x, y)

norT(x)

norF(x)

norNa(x)

norOk(x)

norTF(x)

norLG(x)

norBL(x)

anyIN(x, ...)

anyID(x, y)

anyEQ(x, y)

anyT(x)

anyF(x)

anyNa(x)

anyOk(x)

anyTF(x)

anyLG(x)

anyBL(x)

allIN(x, ...)

allID(x, y)

allEQ(x, y)

allT(x)

allF(x)

allNa(x)

allOk(x)

allTF(x)

allLG(x)

allBL(x)

oneIN(x, ...)

oneID(x, y)

oneEQ(x, y)

oneT(x)

oneF(x)

oneNa(x)

oneOk(x)

oneTF(x)

oneLG(x)

oneBL(x)

twoIN(x, ...)

twoID(x, y)

twoEQ(x, y)

twoT(x)

twoF(x)

twoNa(x)

twoOk(x)

twoTF(x)

twoLG(x)

twoBL(x)
}
\arguments{
\item{x, y}{Any object.}

\item{...}{Objects to check for containing \code{x}.}
}
\value{
\code{TRUE} or \code{FALSE}.
}
\description{
Failsafe \code{is} functions
}
\details{
Functions that produce a \code{TRUE} or \code{FALSE} result as long
as identity-evaluating their arguments (i.e., \code{identity(arg_name)})
does not itself produce an error.
}
\section{Functions}{
\itemize{
\item \code{isIN()}: Is \code{x} in the collective set of atomized values
from \code{...}?

\item \code{isID()}: Are \code{x} and \code{y} identical?

\item \code{isEQ()}: Are \code{x} and \code{y} atomic and setequal?

\item \code{isT()}: Is \code{x} scalar \code{TRUE}?

\item \code{isF()}: Is \code{x} scalar \code{FALSE}?

\item \code{isNa()}: Is \code{x} scalar \code{NA}?

\item \code{isOk()}: Is \code{x} atomic, scalar, and non-\code{NA}?

\item \code{isTF()}: Is \code{x} either scalar \code{TRUE} or scalar
\code{FALSE}?

\item \code{isLG()}: Is \code{x} scalar logical (\code{TRUE},
\code{FALSE} or \code{NA})?

\item \code{isBL()}: Is \code{x} a scalar blank string?

\item \code{notIN()}: Is \code{x} atomic, of length 1, and not contained
in any argument in \code{...}?

\item \code{notID()}: Thin wrapper for \code{!identical}.

\item \code{notEQ()}: Is \code{x} not atomic, \code{y} not atomic, or
are they not setequal?

\item \code{notBL()}: Is \code{x} not a scalar blank string?

\item \code{norIN()}: Are no elements of \code{x} in the collective
atomized values from \code{...}?

\item \code{norID()}: Are no elements of \code{x} identical to \code{y}?

\item \code{norEQ()}: Are no elements of \code{x} identical to \code{y}?

\item \code{norT()}: Are no elements of \code{x} scalar \code{TRUE}?

\item \code{norF()}: Are no elements of \code{x} scalar \code{FALSE}?

\item \code{norNa()}: Are no elements of \code{x} scalar \code{NA}?

\item \code{norOk()}: Are no elements of \code{x} scalar non-\code{NA}?

\item \code{norTF()}: Are no elements of \code{x} either scalar
\code{TRUE} or scalar \code{FALSE}?

\item \code{norLG()}: Are no elements of \code{x} scalar logical
(\code{NA}, \code{TRUE}, or \code{FALSE})?

\item \code{norBL()}: Are no elements of \code{x} blank string scalars?

\item \code{anyIN()}: Are any elements of \code{x} in the collective
atomized values from \code{...}?

\item \code{anyID()}: Are any elements of \code{x} identical to
\code{y}?

\item \code{anyEQ()}: Are any elements of \code{x} set-equal to
\code{y}?

\item \code{anyT()}: Are any elements of \code{x} scalar \code{TRUE}?

\item \code{anyF()}: Are any elements of \code{x} scalar \code{FALSE}?

\item \code{anyNa()}: Are any elements of \code{x} scalar, atomic, and
\code{NA}?

\item \code{anyOk()}: Are any elements of \code{x} scalar, atomic, and
non-\code{NA}?

\item \code{anyTF()}: Are no elements of \code{x} scalar \code{TRUE} or
scalar \code{FALSE}?

\item \code{anyLG()}: Are any elements of \code{x} scalar logical
(\code{TRUE}, \code{FALSE}, or \code{NA})?

\item \code{anyBL()}: Are any elements of \code{x} scalar blank strings?

\item \code{allIN()}: Are all elements of \code{x} in the collective set
of atomized values from \code{...}?

\item \code{allID()}: Are all elements of \code{x} identical to
\code{y}?

\item \code{allEQ()}: Are all elements of \code{x} set-equal to
\code{y}?

\item \code{allT()}: Are all elements of \code{x} scalar \code{TRUE}?

\item \code{allF()}: Are all elements of \code{x} scalar \code{FALSE}?

\item \code{allNa()}: Are all elements of \code{x} scalar \code{NA}?

\item \code{allOk()}: Are all elements of \code{x} scalar, atomic, and
non-\code{NA}?

\item \code{allTF()}: Are all elements of \code{x} scalar \code{TRUE}
or scalar \code{FALSE}?

\item \code{allLG()}: Are all elements of \code{x} scalar logical
(\code{TRUE}, \code{FALSE}, or \code{NA})?

\item \code{allBL()}: Are all elements of \code{x} scalar blank strings?

\item \code{oneIN()}: Is exactly one element of \code{x} in the
collective set of atomized values from \code{...}?

\item \code{oneID()}: Is exactly one element of \code{x} identical to
\code{y}?

\item \code{oneEQ()}: Is exactly one element of \code{x} set-equal to
\code{y}?

\item \code{oneT()}: Is exactly one element of \code{x} scalar
\code{TRUE}?

\item \code{oneF()}: Is exactly one element of \code{x} scalar
\code{FALSE}?

\item \code{oneNa()}: Is exactly one element of \code{x} scalar
\code{NA}?

\item \code{oneOk()}: Is exactly one element of \code{x} scalar, atomic,
and non-\code{NA}?

\item \code{oneTF()}: Is exactly one element of \code{x} scalar
\code{TRUE} or scalar \code{FALSE}?

\item \code{oneLG()}: Is exactly one element of \code{x} scalar logical
(\code{TRUE}, \code{FALSE}, or \code{NA})?

\item \code{oneBL()}: Is exactly one element of \code{x} a scalar blank
string?

\item \code{twoIN()}: Are two or more elements of \code{x} in the
collective set of atomized values from \code{...}?

\item \code{twoID()}: Are two or more elements of \code{x} identical to
\code{y}?

\item \code{twoEQ()}: Are two or more elements of \code{x} set-equal to
\code{y}?

\item \code{twoT()}: Are two or more elements of \code{x} scalar
\code{TRUE}?

\item \code{twoF()}: Are two or more elements of \code{x} scalar
\code{FALSE}?

\item \code{twoNa()}: Are two or more elements of \code{x} scalar
\code{NA}?

\item \code{twoOk()}: Are two or more elements of \code{x} scalar,
atomic, and non-\code{NA}?

\item \code{twoTF()}: Are two or more elements of \code{x} scalar
\code{TRUE} or scalar \code{FALSE}?

\item \code{twoLG()}: Are two or more elements of \code{x} scalar logical
(\code{TRUE}, \code{FALSE} or \code{NA})?

\item \code{twoBL()}: Are two or more elements of \code{x} scalar blank
strings?

}}
\seealso{
Other extensions: 
\code{\link{a.}()},
\code{\link{binfuns.}()},
\code{\link{callers.}()},
\code{\link{case.}()},
\code{\link{dots.}()},
\code{\link{ex.}()},
\code{\link{failsafe.}()},
\code{\link{files.}()},
\code{\link{fork.}()},
\code{\link{fsub.}()},
\code{\link{is_unq.}()},
\code{\link{logicals.}()},
\code{\link{make.}()},
\code{\link{n_th.}()},
\code{\link{na.}()},
\code{\link{naming.}()},
\code{\link{nx.}()},
\code{\link{os.}()},
\code{\link{pause.}()},
\code{\link{ply.}()},
\code{\link{put.}()},
\code{\link{reclass.}()},
\code{\link{recycling.}()},
\code{\link{run.}()},
\code{\link{stats.}()},
\code{\link{swap.}()},
\code{\link{values.}()},
\code{\link{x.}()},
\code{\link{xb.}()}

Other failsafe: 
\code{\link{failsafe.}()}

Other logicals: 
\code{\link{binfuns.}()},
\code{\link{logicals.}()}
}
\concept{extensions}
\concept{failsafe}
\concept{logicals}
