% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bbb_mmm.R
\encoding{UTF-8}
\name{bbb_mmm_PROPS}
\alias{bbb_mmm_PROPS}
\alias{bbb_mmm}
\alias{bbb_mmm_funs}
\alias{atm_ch1}
\alias{atm_ch3}
\alias{atm_chr}
\alias{atm_clr}
\alias{atm_evn}
\alias{atm_fac}
\alias{atm_frc}
\alias{atm_ind}
\alias{atm_lgl}
\alias{atm_neg}
\alias{atm_ngw}
\alias{atm_nng}
\alias{atm_nnw}
\alias{atm_nps}
\alias{atm_npw}
\alias{atm_nst}
\alias{atm_num}
\alias{atm_odd}
\alias{atm_ord}
\alias{atm_pct}
\alias{atm_pos}
\alias{atm_ppn}
\alias{atm_psw}
\alias{atm_srt}
\alias{atm_str}
\alias{atm_uno}
\alias{atm_whl}
\alias{pop_atm}
\alias{pop_ch1}
\alias{pop_ch3}
\alias{pop_chr}
\alias{pop_clr}
\alias{pop_evn}
\alias{pop_fac}
\alias{pop_frc}
\alias{pop_ind}
\alias{pop_lgl}
\alias{pop_neg}
\alias{pop_ngw}
\alias{pop_nng}
\alias{pop_nnw}
\alias{pop_nps}
\alias{pop_npw}
\alias{pop_nst}
\alias{pop_num}
\alias{pop_odd}
\alias{pop_ord}
\alias{pop_pct}
\alias{pop_pos}
\alias{pop_ppn}
\alias{pop_psw}
\alias{pop_srt}
\alias{pop_str}
\alias{pop_uno}
\alias{pop_whl}
\title{Combination Basic Plus Extended Mode Properties}
\usage{
bbb_mmm_PROPS()

bbb_mmm(x, bbb, mmm, ...)

bbb_mmm_funs()

atm_ch1(x, ...)

atm_ch3(x, ...)

atm_chr(x, ...)

atm_clr(x, ...)

atm_evn(x, ...)

atm_fac(x, ...)

atm_frc(x, ...)

atm_ind(x, ...)

atm_lgl(x, ...)

atm_neg(x, ...)

atm_ngw(x, ...)

atm_nng(x, ...)

atm_nnw(x, ...)

atm_nps(x, ...)

atm_npw(x, ...)

atm_nst(x, ...)

atm_num(x, ...)

atm_odd(x, ...)

atm_ord(x, ...)

atm_pct(x, ...)

atm_pos(x, ...)

atm_ppn(x, ...)

atm_psw(x, ...)

atm_srt(x, ...)

atm_str(x, ...)

atm_uno(x, ...)

atm_whl(x, ...)

pop_atm(x, ...)

pop_ch1(x, ...)

pop_ch3(x, ...)

pop_chr(x, ...)

pop_clr(x, ...)

pop_evn(x, ...)

pop_fac(x, ...)

pop_frc(x, ...)

pop_ind(x, ...)

pop_lgl(x, ...)

pop_neg(x, ...)

pop_ngw(x, ...)

pop_nng(x, ...)

pop_nnw(x, ...)

pop_nps(x, ...)

pop_npw(x, ...)

pop_nst(x, ...)

pop_num(x, ...)

pop_odd(x, ...)

pop_ord(x, ...)

pop_pct(x, ...)

pop_pos(x, ...)

pop_ppn(x, ...)

pop_psw(x, ...)

pop_srt(x, ...)

pop_str(x, ...)

pop_uno(x, ...)

pop_whl(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{bbb}{A character scalar single basic property from \code{c('atm', 'pop')}.}

\item{mmm}{A character scalar single extended mode property from \code{\link{mmm_props}()}.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\description{
Check for combinations of \link[=bbb]{basic} and \link[=mmm]{extended mode} properties.
}
\section{Functions}{
\itemize{
\item \code{bbb_mmm()}: Checks \code{x} against the basic property in \code{bbb} and the extended mode property in \code{mmm } subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{bbb_mmm_funs()}: Lists all combo basic plus extended mode property checking functions. Returns a character vector.

\item \code{atm_ch1()}: Checks \code{x} for atomic-ness and onechar-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_ch3()}: Checks \code{x} for atomic-ness and threechar-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_chr()}: Checks \code{x} for atomic-ness and character-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_clr()}: Checks \code{x} for atomic-ness and color-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_evn()}: Checks \code{x} for atomic-ness and even-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_fac()}: Checks \code{x} for atomic-ness and factor-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_frc()}: Checks \code{x} for atomic-ness and fractional-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_ind()}: Checks \code{x} for atomic-ness and indexer-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_lgl()}: Checks \code{x} for atomic-ness and logical-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_neg()}: Checks \code{x} for atomic-ness and negative-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_ngw()}: Checks \code{x} for atomic-ness and negative-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_nng()}: Checks \code{x} for atomic-ness and non-negative-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_nnw()}: Checks \code{x} for atomic-ness and non-negative-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_nps()}: Checks \code{x} for atomic-ness and non-positive-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_npw()}: Checks \code{x} for atomic-ness and non-positive-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_nst()}: Checks \code{x} for atomic-ness and non-sortable-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_num()}: Checks \code{x} for atomic-ness and numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_odd()}: Checks \code{x} for atomic-ness and odd-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_ord()}: Checks \code{x} for atomic-ness and ordered-factor-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_pct()}: Checks \code{x} for atomic-ness and percent-valued-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_pos()}: Checks \code{x} for atomic-ness and positive-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_ppn()}: Checks \code{x} for atomic-ness and proportion-valued-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_psw()}: Checks \code{x} for atomic-ness and positive-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_srt()}: Checks \code{x} for atomic-ness and sortable-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_str()}: Checks \code{x} for atomic-ness and string-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_uno()}: Checks \code{x} for atomic-ness and unordered-factor-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_whl()}: Checks \code{x} for atomic-ness and whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_atm()}: Checks \code{x} for populated-ness and atomic-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_ch1()}: Checks \code{x} for populated-ness and onechar-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_ch3()}: Checks \code{x} for populated-ness and threechar-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_chr()}: Checks \code{x} for populated-ness and character-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_clr()}: Checks \code{x} for populated-ness and color-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_evn()}: Checks \code{x} for populated-ness and even-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_fac()}: Checks \code{x} for populated-ness and factor-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_frc()}: Checks \code{x} for populated-ness and fractional-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_ind()}: Checks \code{x} for populated-ness and indexer-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_lgl()}: Checks \code{x} for populated-ness and logical-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_neg()}: Checks \code{x} for populated-ness and negative-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_ngw()}: Checks \code{x} for populated-ness and negative-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_nng()}: Checks \code{x} for populated-ness and non-negative-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_nnw()}: Checks \code{x} for populated-ness and non-negative-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_nps()}: Checks \code{x} for populated-ness and non-positive-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_npw()}: Checks \code{x} for populated-ness and non-positive-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_nst()}: Checks \code{x} for populated-ness and non-sortable-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_num()}: Checks \code{x} for populated-ness and numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_odd()}: Checks \code{x} for populated-ness and odd-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_ord()}: Checks \code{x} for populated-ness and ordered-factor-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_pct()}: Checks \code{x} for populated-ness and percent-valued-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_pos()}: Checks \code{x} for populated-ness and positive-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_ppn()}: Checks \code{x} for populated-ness and proportion-valued-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_psw()}: Checks \code{x} for populated-ness and positive-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_srt()}: Checks \code{x} for populated-ness and sortable-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_str()}: Checks \code{x} for populated-ness and string-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_uno()}: Checks \code{x} for populated-ness and unordered-factor-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_whl()}: Checks \code{x} for populated-ness and whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

}}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{ll}{  \verb{.max, .maxr, .maxc}   \tab Scalar maximum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.min, .minr, .minc}   \tab Scalar minimum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.lt, .le, .ge, .gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively. \cr   \tab   \cr
  \verb{.n, .nr, .nc}         \tab A vector of valid numbers of elements, rows, and columns, respectively.                                                                    \cr   \tab   \cr
  \code{.vals}                \tab A vector of valid values.                                                                                                                                 }
}

\examples{
bbb_mmm_funs()
bbb_mmm_PROPS()
bbb_mmm(letters, "atm", "ch1")
atm_ch1(letters)
pop_psw(1:10)
pop_psw(0:10)
}
