% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unq_mmm.R
\encoding{UTF-8}
\name{unq_mmm_PROPS}
\alias{unq_mmm_PROPS}
\alias{unq_mmm}
\alias{unq_mmm_funs}
\alias{unq_atm}
\alias{unq_ch1}
\alias{unq_ch3}
\alias{unq_chr}
\alias{unq_clr}
\alias{unq_evn}
\alias{unq_fac}
\alias{unq_frc}
\alias{unq_ind}
\alias{unq_lgl}
\alias{unq_neg}
\alias{unq_ngw}
\alias{unq_nng}
\alias{unq_nnw}
\alias{unq_nps}
\alias{unq_npw}
\alias{unq_nst}
\alias{unq_odd}
\alias{unq_ord}
\alias{unq_pct}
\alias{unq_pos}
\alias{unq_ppn}
\alias{unq_psw}
\alias{unq_srt}
\alias{unq_str}
\alias{unq_uno}
\alias{unq_whl}
\title{Combo Uniqueness and Extended Mode Properties}
\usage{
unq_mmm_PROPS()

unq_mmm(x, mmm, ...)

unq_mmm_funs()

unq_atm(x, ...)

unq_ch1(x, ...)

unq_ch3(x, ...)

unq_chr(x, ...)

unq_clr(x, ...)

unq_evn(x, ...)

unq_fac(x, ...)

unq_frc(x, ...)

unq_ind(x, ...)

unq_lgl(x, ...)

unq_neg(x, ...)

unq_ngw(x, ...)

unq_nng(x, ...)

unq_nnw(x, ...)

unq_nps(x, ...)

unq_npw(x, ...)

unq_nst(x, ...)

unq_odd(x, ...)

unq_ord(x, ...)

unq_pct(x, ...)

unq_pos(x, ...)

unq_ppn(x, ...)

unq_psw(x, ...)

unq_srt(x, ...)

unq_str(x, ...)

unq_uno(x, ...)

unq_whl(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{mmm}{A character scalar extended mode property from \code{\link{mmm_props}()}`.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\description{
Functions for checking combinations of \link[=UNQ]{uniqueness} and \link[=mmm]{extended mode} subject to any count or value restrictions in \code{...}.
}
\section{Functions}{
\itemize{
\item \code{unq_mmm()}: Checks \code{x} for completened and against the extended mode in \code{mmm} subject to any count and/or value restrictions in \code{mmm}. Returns a logical scalar.

\item \code{unq_mmm_funs()}: Lists all combo uniqueness plus extended mode property checking functions. Returns a character vector.

\item \code{unq_atm()}: Checks \code{x} for uniqueness and for atomic-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_ch1()}: Checks \code{x} for uniqueness and for onechar-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_ch3()}: Checks \code{x} for uniqueness and for threechar-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_chr()}: Checks \code{x} for uniqueness and for character-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_clr()}: Checks \code{x} for uniqueness and for color-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_evn()}: Checks \code{x} for uniqueness and for even-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_fac()}: Checks \code{x} for uniqueness and for factor-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_frc()}: Checks \code{x} for uniqueness and for fractional-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_ind()}: Checks \code{x} for uniqueness and for indexer-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_lgl()}: Checks \code{x} for uniqueness and for logical-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_neg()}: Checks \code{x} for uniqueness and for negative-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_ngw()}: Checks \code{x} for uniqueness and for negative-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_nng()}: Checks \code{x} for uniqueness and for non-negative-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_nnw()}: Checks \code{x} for uniqueness and for non-negative-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_nps()}: Checks \code{x} for uniqueness and for non-positive-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_npw()}: Checks \code{x} for uniqueness and for non-positive-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_nst()}: Checks \code{x} for uniqueness and for non-sortable-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_odd()}: Checks \code{x} for uniqueness and for odd-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_ord()}: Checks \code{x} for uniqueness and for ordered-factor-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_pct()}: Checks \code{x} for uniqueness and for percent-valued-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_pos()}: Checks \code{x} for uniqueness and for positive-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_ppn()}: Checks \code{x} for uniqueness and for proportion-value-numeric-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_psw()}: Checks \code{x} for uniqueness and for positive-whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_srt()}: Checks \code{x} for uniqueness and for sortable-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_str()}: Checks \code{x} for uniqueness and for string-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_uno()}: Checks \code{x} for uniqueness and for unordered-factor-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{unq_whl()}: Checks \code{x} for uniqueness and for whole-number-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

}}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{ll}{  \verb{.max, .maxr, .maxc}   \tab Scalar maximum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.min, .minr, .minc}   \tab Scalar minimum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.lt, .le, .ge, .gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively. \cr   \tab   \cr
  \verb{.n, .nr, .nc}         \tab A vector of valid numbers of elements, rows, and columns, respectively.                                                                    \cr   \tab   \cr
  \code{.vals}                \tab A vector of valid values.                                                                                                                                 }
}

\examples{
UnqClr <- c("red", "blue", "#FFFFFF")
UnqCh3 <- c("atm", "ch1", "ch3")
UnqCh1 <- c("a", "b", "c")
UnqAtm <- c("", "8", "a")
UnqChr <- c("", " ", "a")
UnqFac <- factor(UnqAtm)
UnqPct <- c(0, 50, 100)
UnqEvn <- c(-2, 0, 2)
UnqWhl <- c(-1, 0, 1)
UnqIn1 <- c(T, F)
UnqPsw <- 1:3
UnqNnw <- 0:2

UnqLgl <-  UnqIn1
UnqIn2 <-  UnqPsw
UnqSrt <-  UnqNum
UnqStr <-  UnqCh1
UnqOdd <-  UnqEvn + 1
UnqPos <-  UnqPsw / 2
UnqNum <-  UnqOdd / 2
UnqNeg <- -UnqPsw / 2
UnqPsw <- -UnqNnw
UnqNst <-  factor(UnqEvn, ordered = F)
UnqUno <-  factor(UnqEvn, ordered = T)

unq_mm_funs()
unq_mmm(UnqAtm, "atm")
unq_mmm(UnqWhl, "ch1")
c(unq_atm(UnqAtm), unq_atm(NULL))
c(unq_ch1(UnqCh1), unq_ch1(UnqCh3), unq_ch1(c(UnqCh1, UnqCh1))
c(unq_ch3(UnqCh3), unq_ch3(UnqCh1), unq_ch3(c(UnqCh3, UnqCh3))
c(unq_chr(UnqChr), unq_chr(UnqNum), unq_chr(c(UnqChr, UnqChr))
c(unq_clr(UnqClr), unq_clr(UnqCh1), unq_clr(c(UnqClr, UnqClr))
c(unq_evn(UnqEvn), unq_evn(UnqOdd), unq_evn(c(UnqEvn, UnqEvn))
c(unq_fac(UnqFac), unq_fac(UnqStr), unq_fac(c(UnqFac, UnqFac))
c(unq_frc(UnqFrc), unq_frc(UnqWhl), unq_frc(c(UnqFrc, UnqFrc))
c(unq_ind(UnqIn1), unq_ind(UnqNum), unq_ind(c(UnqIn1, UnqIn1))
c(unq_ind(UnqIn2), unq_ind(UnqFrc), unq_ind(c(UnqIn2, UnqIn2))
c(unq_lgl(UnqLgl), unq_lgl(UnqCh1), unq_lgl(c(UnqLgl, UnqLgl))
c(unq_neg(UnqNeg), unq_neg(UnqNps), unq_neg(c(UnqNeg, UnqNeg))
c(unq_neg(UnqNgw), unq_ngw(UnqNeg), unq_ngw(c(UnqNgw, UnqNgw))
c(unq_nng(UnqNng), unq_nng(UnqNps), unq_nng(c(UnqNng, UnqNng))
c(unq_nnw(UnqNnw), unq_nnw(UnqNng), unq_nnw(c(UnqNnw, UnqNnw))
c(unq_nps(UnqNps), unq_nps(UnqNeg), unq_npw(c(UnqNps, UnqNps))
c(unq_npw(UnqNpw), unq_npw(UnqNps), unq_npw(c(UnqNpw, UnqNpw))
c(unq_nst(UnqNst), unq_nst(UnqSrt), unq_nst(c(UnqNst, UnqNst))
c(unq_num(UnqNum), unq_num(UnqCh1), unq_num(c(UnqNum, UnqNum))
c(unq_odd(UnqOdd), unq_odd(UnqEvn), unq_odd(c(UnqOdd, UnqOdd))
c(unq_ord(UnqOrd), unq_ord(UnqUno), unq_ord(c(UnqOrd, UnqOrd))
c(unq_pct(UnqPct), unq_pct(UnqNeg), unq_pct(c(UnqPct, UnqPct))
c(unq_pos(UnqPos), unq_pos(UnqNng), unq_pos(c(UnqPos, UnqPos))
c(unq_ppn(UnqPpn), unq_ppn(UnqPct), unq_ppn(c(UnqPpn, UnqPpn))
c(unq_psw(UnqPsw), unq_psw(UnqPos), unq_psw(c(UnqPsw, UnqPsw))
c(unq_srt(UnqSrt), unq_srt(UnqNst), unq_srt(c(UnqSrt, UnqSrt))
c(unq_str(UnqStr), unq_str(UnqChr), unq_str(c(UnqStr, UnqStr))
c(unq_uno(UnqUno), unq_uno(UnqOrd), unq_uno(c(UnqUno, UnqUno))
c(unq_whl(UnqWhl), unq_whl(UnqNum), unq_whl(c(UnqWhl, UnqWhl))
}
