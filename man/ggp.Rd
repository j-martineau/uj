% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggp.R
\encoding{UTF-8}
\name{ggp}
\alias{ggp}
\alias{ggaes}
\alias{ggdot}
\alias{ggelin}
\alias{ggemd}
\alias{ggenull}
\alias{ggerct}
\alias{ggetxt}
\alias{ggexp}
\alias{gggrid}
\alias{gghln}
\alias{gglab}
\alias{gglabs}
\alias{gglin}
\alias{ggmar}
\alias{ggsac}
\alias{ggscm}
\alias{ggsdm}
\alias{ggslm}
\alias{ggsv}
\alias{ggsxc}
\alias{ggsyc}
\alias{ggthm}
\alias{ggtmin}
\alias{ggtxt}
\alias{ggunit}
\alias{ggvars}
\alias{ggvln}
\alias{ggwrap}
\alias{ggxlab}
\alias{ggylab}
\title{Thin wrappers of \code{ggplot2} and \code{ggtext} functions}
\usage{
ggp(
  data = NULL,
  mapping = ggplot2::aes(),
  ...,
  environment = base::parent.frame()
)

ggaes(x, y, ...)

ggdot(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

ggelin(
  colour = NULL,
  size = NULL,
  linetype = NULL,
  lineend = NULL,
  color = NULL,
  arrow = NULL,
  inherit.blank = FALSE
)

ggemd(
  family = NULL,
  face = NULL,
  size = NULL,
  colour = NULL,
  fill = NULL,
  box.colour = NULL,
  linetype = NULL,
  linewidth = NULL,
  hjust = NULL,
  vjust = NULL,
  halign = NULL,
  valign = NULL,
  angle = NULL,
  lineheight = NULL,
  margin = NULL,
  padding = NULL,
  r = NULL,
  color = NULL,
  box.color = NULL,
  align_widths = NULL,
  align_heights = NULL,
  rotate_margins = NULL,
  debug = FALSE,
  inherit.blank = FALSE
)

ggenull()

ggerct(
  fill = NULL,
  colour = NULL,
  size = NULL,
  linetype = NULL,
  color = NULL,
  inherit.blank = FALSE
)

ggetxt(
  family = NULL,
  face = NULL,
  colour = NULL,
  size = NULL,
  hjust = NULL,
  vjust = NULL,
  angle = NULL,
  lineheight = NULL,
  color = NULL,
  margin = NULL,
  debug = NULL,
  inherit.blank = FALSE
)

ggexp(mult = 0, add = 0)

gggrid(
  rows = NULL,
  cols = NULL,
  scales = "fixed",
  space = "fixed",
  shrink = TRUE,
  labeller = "label_value",
  as.table = TRUE,
  switch = NULL,
  drop = TRUE,
  margins = FALSE,
  facets = NULL
)

gghln(
  mapping = NULL,
  data = NULL,
  ...,
  yintercept,
  na.rm = FALSE,
  show.legend = NA
)

gglab(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  ...,
  parse = FALSE,
  nudge_x = 0,
  nudge_y = 0,
  label.padding = ggplot2::unit(0.25, "lines"),
  label.r = ggplot2::unit(0.15, "lines"),
  label.size = 0.25,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

gglabs(
  ...,
  title = ggplot2::waiver(),
  subtitle = ggplot2::waiver(),
  caption = ggplot2::waiver(),
  tag = ggplot2::waiver(),
  alt = ggplot2::waiver(),
  alt_insight = ggplot2::waiver()
)

gglin(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  orientation = NA,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)

ggmar(t = 0, r = 0, b = 0, l = 0, unit = "pt")

ggsac(..., range = c(0.1, 1))

ggscm(
  ...,
  values,
  aesthetics = "colour",
  breaks = ggplot2::waiver(),
  na.value = "grey50"
)

ggsdm(..., values, breaks = ggplot2::waiver(), na.value = NA)

ggslm(..., values, breaks = ggplot2::waiver(), na.value = "blank")

ggsv(
  filename,
  plot = ggplot2::last_plot(),
  device = NULL,
  path = NULL,
  scale = 1,
  width = NA,
  height = NA,
  units = c("in", "cm", "mm", "px"),
  dpi = 300,
  limitsize = TRUE,
  bg = NULL,
  ...
)

ggsxc(
  name = ggplot2::waiver(),
  breaks = ggplot2::waiver(),
  minor_breaks = ggplot2::waiver(),
  n.breaks = NULL,
  labels = ggplot2::waiver(),
  limits = NULL,
  expand = ggplot2::waiver(),
  oob = scales::censor,
  na.value = NA_real_,
  trans = "identity",
  guide = ggplot2::waiver(),
  position = "bottom",
  sec.axis = ggplot2::waiver()
)

ggsyc(
  name = ggplot2::waiver(),
  breaks = ggplot2::waiver(),
  minor_breaks = ggplot2::waiver(),
  n.breaks = NULL,
  labels = ggplot2::waiver(),
  limits = NULL,
  expand = ggplot2::waiver(),
  oob = scales::censor,
  na.value = NA_real_,
  trans = "identity",
  guide = ggplot2::waiver(),
  position = "left",
  sec.axis = ggplot2::waiver()
)

ggthm(...)

ggtmin(
  base_size = 11,
  base_family = "",
  base_line_size = base_size/22,
  base_rect_size = base_size/22
)

ggtxt(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  ...,
  parse = FALSE,
  nudge_x = 0,
  nudge_y = 0,
  check_overlap = FALSE,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)

ggunit(x, units, data = NULL)

ggvars(...)

ggvln(
  mapping = NULL,
  data = NULL,
  ...,
  xintercept,
  na.rm = FALSE,
  show.legend = NA
)

ggwrap(
  facets,
  nrow = NULL,
  ncol = NULL,
  scales = "fixed",
  shrink = TRUE,
  labeller = "label_value",
  as.table = TRUE,
  switch = NULL,
  drop = TRUE,
  dir = "h",
  strip.position = "top"
)

ggxlab(label)

ggylab(label)
}
\arguments{
\item{data}{Default dataset to use for plot. If not already a data.frame,
will be converted to one by \code{\link[ggplot2:fortify]{fortify()}}. If not specified,
must be supplied in each layer added to the plot.}

\item{mapping}{Default list of aesthetic mappings to use for plot.
If not specified, must be supplied in each layer added to the plot.}

\item{...}{Other arguments passed on to methods. Not currently used.}

\item{environment}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} Used prior to tidy
evaluation.}

\item{x}{A single number specifying size relative to parent element.}

\item{stat}{The statistical transformation to use on the data for this
layer, either as a \code{ggproto} \code{Geom} subclass or as a string naming the
stat stripped of the \code{stat_} prefix (e.g. \code{"count"} rather than
\code{"stat_count"})}

\item{position}{Position adjustment, either as a string naming the adjustment
(e.g. \code{"jitter"} to use \code{position_jitter}), or the result of a call to a
position adjustment function. Use the latter if you need to change the
settings of the adjustment.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{colour, color}{Line/border colour. Color is an alias for colour.}

\item{size}{text size in pts.}

\item{linetype}{Line type. An integer (0:8), a name (blank, solid,
dashed, dotted, dotdash, longdash, twodash), or a string with
an even number (up to eight) of hexadecimal digits which give the
lengths in consecutive positions in the string.}

\item{lineend}{Line end Line end style (round, butt, square)}

\item{arrow}{Arrow specification, as created by \code{\link[grid:arrow]{grid::arrow()}}}

\item{inherit.blank}{Should this element inherit the existence of an
\code{element_blank} among its parents? If \code{TRUE} the existence of
a blank element among its parents will cause this element to be blank as
well. If \code{FALSE} any blank parent element will be ignored when
calculating final element state.}

\item{family}{Font family}

\item{face}{Font face ("plain", "italic", "bold", "bold.italic")}

\item{fill}{Fill colour.}

\item{box.colour, box.color}{Line color of the enclosing box (if different from the text color)}

\item{linewidth}{Line/border size in mm.}

\item{hjust}{Horizontal justification (in \eqn{[0, 1]})}

\item{vjust}{Vertical justification (in \eqn{[0, 1]})}

\item{halign}{Horizontal justification}

\item{valign}{Vertical justification}

\item{angle}{Angle (in \eqn{[0, 360]})}

\item{lineheight}{Line height}

\item{margin}{Margins around the text. See \code{\link[ggplot2:margin]{margin()}} for more
details. When creating a theme, the margins should be placed on the
side of the text facing towards the center of the plot.}

\item{align_widths, align_heights}{Should multiple elements be aligned by their
widths or height? See \code{\link[gridtext:richtext_grob]{gridtext::richtext_grob()}} for details.}

\item{rotate_margins}{Should margins get rotated in frame with rotated text?
If \code{TRUE}, the margins are applied relative to the text direction. If \code{FALSE},
the margins are applied relative to the plot direction, i.e., the top margin,
for example, is always placed above the text label, regardless of the direction
in which the text runs. The default is \code{FALSE}, which mimics the behavior of
\code{element_text()}.}

\item{debug}{If \code{TRUE}, aids visual debugging by drawing a solid
rectangle behind the complete text area, and a point where each label
is anchored.}

\item{mult}{vector of multiplicative range expansion factors.
If length 1, both the lower and upper limits of the scale
are expanded outwards by \code{mult}. If length 2, the lower limit
is expanded by \code{mult[1]} and the upper limit by \code{mult[2]}.}

\item{add}{vector of additive range expansion constants.
If length 1, both the lower and upper limits of the scale
are expanded outwards by \code{add} units. If length 2, the
lower limit is expanded by \code{add[1]} and the upper
limit by \code{add[2]}.}

\item{rows, cols}{A set of variables or expressions quoted by
\code{\link[ggplot2:vars]{vars()}} and defining faceting groups on the rows or columns
dimension. The variables can be named (the names are passed to
\code{labeller}).

For compatibility with the classic interface, \code{rows} can also be
a formula with the rows (of the tabular display) on the LHS and
the columns (of the tabular display) on the RHS; the dot in the
formula is used to indicate there should be no faceting on this
dimension (either row or column).}

\item{scales}{Are scales shared across all facets (the default,
\code{"fixed"}), or do they vary across rows (\code{"free_x"}),
columns (\code{"free_y"}), or both rows and columns (\code{"free"})?}

\item{space}{If \code{"fixed"}, the default, all panels have the same size.
If \code{"free_y"} their height will be proportional to the length of the
y scale; if \code{"free_x"} their width will be proportional to the
length of the x scale; or if \code{"free"} both height and width will
vary.  This setting has no effect unless the appropriate scales also vary.}

\item{shrink}{If \code{TRUE}, will shrink scales to fit output of
statistics, not raw data. If \code{FALSE}, will be range of raw data
before statistical summary.}

\item{labeller}{A function that takes one data frame of labels and
returns a list or data frame of character vectors. Each input
column corresponds to one factor. Thus there will be more than
one with \code{vars(cyl, am)}. Each output
column gets displayed as one separate line in the strip
label. This function should inherit from the "labeller" S3 class
for compatibility with \code{\link[ggplot2:labeller]{labeller()}}. You can use different labeling
functions for different kind of labels, for example use \code{\link[ggplot2:label_parsed]{label_parsed()}} for
formatting facet labels. \code{\link[ggplot2:label_value]{label_value()}} is used by default,
check it for more details and pointers to other options.}

\item{as.table}{If \code{TRUE}, the default, the facets are laid out like
a table with highest values at the bottom-right. If \code{FALSE}, the
facets are laid out like a plot with the highest value at the top-right.}

\item{switch}{By default, the labels are displayed on the top and
right of the plot. If \code{"x"}, the top labels will be
displayed to the bottom. If \code{"y"}, the right-hand side
labels will be displayed to the left. Can also be set to
\code{"both"}.}

\item{drop}{If \code{TRUE}, the default, all factor levels not used in the
data will automatically be dropped. If \code{FALSE}, all factor levels
will be shown, regardless of whether or not they appear in the data.}

\item{margins}{Either a logical value or a character
vector. Margins are additional facets which contain all the data
for each of the possible values of the faceting variables. If
\code{FALSE}, no additional facets are included (the
default). If \code{TRUE}, margins are included for all faceting
variables. If specified as a character vector, it is the names of
variables for which margins are to be created.}

\item{facets}{This argument is soft-deprecated, please use \code{rows}
and \code{cols} instead.}

\item{parse}{If \code{TRUE}, the labels will be parsed into expressions and
displayed as described in \code{?plotmath}.}

\item{nudge_x, nudge_y}{Horizontal and vertical adjustment to nudge labels by.
Useful for offsetting text from points, particularly on discrete scales.
Cannot be jointly specified with \code{position}.}

\item{label.padding}{Amount of padding around label. Defaults to 0.25 lines.}

\item{label.r}{Radius of rounded corners. Defaults to 0.15 lines.}

\item{label.size}{Size of label border, in mm.}

\item{title}{The text for the title.}

\item{subtitle}{The text for the subtitle for the plot which will be
displayed below the title.}

\item{caption}{The text for the caption which will be displayed in the
bottom-right of the plot by default.}

\item{tag}{The text for the tag label which will be displayed at the
top-left of the plot by default.}

\item{alt, alt_insight}{Text used for the generation of alt-text for the plot.
See \link[ggplot2]{get_alt_text} for examples.}

\item{orientation}{The orientation of the layer. The default (\code{NA})
automatically determines the orientation from the aesthetic mapping. In the
rare event that this fails it can be given explicitly by setting \code{orientation}
to either \code{"x"} or \code{"y"}. See the \emph{Orientation} section for more detail.}

\item{t, r, b, l}{Dimensions of each margin. (To remember order, think trouble).}

\item{unit}{Default units of dimensions. Defaults to "pt" so it
can be most easily scaled with the text.}

\item{range}{Output range of alpha values. Must lie between 0 and 1.}

\item{values}{a set of aesthetic values to map data values to. The values
will be matched in order (usually alphabetical) with the limits of the
scale, or with \code{breaks} if provided. If this is a named vector, then the
values will be matched based on the names instead. Data values that don't
match will be given \code{na.value}.}

\item{aesthetics}{Character string or vector of character strings listing the
name(s) of the aesthetic(s) that this scale works with. This can be useful, for
example, to apply colour settings to the \code{colour} and \code{fill} aesthetics at the
same time, via \code{aesthetics = c("colour", "fill")}.}

\item{breaks}{One of:
\itemize{
\item \code{NULL} for no breaks
\item \code{waiver()} for the default breaks (the scale limits)
\item A character vector of breaks
\item A function that takes the limits as input and returns breaks
as output
}}

\item{na.value}{The aesthetic value to use for missing (\code{NA}) values}

\item{filename}{File name to create on disk.}

\item{plot}{Plot to save, defaults to last plot displayed.}

\item{device}{Device to use. Can either be a device function
(e.g. \link{png}), or one of "eps", "ps", "tex" (pictex),
"pdf", "jpeg", "tiff", "png", "bmp", "svg" or "wmf" (windows only).}

\item{path}{Path of the directory to save plot to: \code{path} and \code{filename}
are combined to create the fully qualified file name. Defaults to the
working directory.}

\item{scale}{Multiplicative scaling factor.}

\item{width, height, units}{Plot size in \code{units} ("in", "cm", "mm", or "px").
If not supplied, uses the size of current graphics device.}

\item{dpi}{Plot resolution. Also accepts a string input: "retina" (320),
"print" (300), or "screen" (72). Applies only to raster output types.}

\item{limitsize}{When \code{TRUE} (the default), \code{ggsave()} will not
save images larger than 50x50 inches, to prevent the common error of
specifying dimensions in pixels.}

\item{bg}{Background colour. If \code{NULL}, uses the \code{plot.background} fill value
from the plot theme.}

\item{name}{The name of the scale. Used as the axis or legend title. If
\code{waiver()}, the default, the name of the scale is taken from the first
mapping used for that aesthetic. If \code{NULL}, the legend title will be
omitted.}

\item{minor_breaks}{One of:
\itemize{
\item \code{NULL} for no minor breaks
\item \code{waiver()} for the default breaks (one minor break between
each major break)
\item A numeric vector of positions
\item A function that given the limits returns a vector of minor breaks. Also
accepts rlang \link[rlang:as_function]{lambda} function notation.
}}

\item{n.breaks}{An integer guiding the number of major breaks. The algorithm
may choose a slightly different number to ensure nice break labels. Will
only have an effect if \code{breaks = waiver()}. Use \code{NULL} to use the default
number of breaks given by the transformation.}

\item{labels}{One of:
\itemize{
\item \code{NULL} for no labels
\item \code{waiver()} for the default labels computed by the
transformation object
\item A character vector giving labels (must be same length as \code{breaks})
\item An expression vector (must be the same length as breaks). See ?plotmath for details.
\item A function that takes the breaks as input and returns labels
as output. Also accepts rlang \link[rlang:as_function]{lambda} function
notation.
}}

\item{limits}{One of:
\itemize{
\item \code{NULL} to use the default scale range
\item A numeric vector of length two providing limits of the scale.
Use \code{NA} to refer to the existing minimum or maximum
\item A function that accepts the existing (automatic) limits and returns
new limits. Also accepts rlang \link[rlang:as_function]{lambda} function
notation.
Note that setting limits on positional scales will \strong{remove} data outside of the limits.
If the purpose is to zoom, use the limit argument in the coordinate system
(see \code{\link[ggplot2:coord_cartesian]{coord_cartesian()}}).
}}

\item{expand}{For position scales, a vector of range expansion constants used to add some
padding around the data to ensure that they are placed some distance
away from the axes. Use the convenience function \code{\link[ggplot2:expansion]{expansion()}}
to generate the values for the \code{expand} argument. The defaults are to
expand the scale by 5\% on each side for continuous variables, and by
0.6 units on each side for discrete variables.}

\item{oob}{One of:
\itemize{
\item Function that handles limits outside of the scale limits
(out of bounds). Also accepts rlang \link[rlang:as_function]{lambda}
function notation.
\item The default (\code{\link[scales:oob]{scales::censor()}}) replaces out of
bounds values with \code{NA}.
\item \code{\link[scales:oob]{scales::squish()}} for squishing out of bounds values into range.
\item \code{\link[scales:oob]{scales::squish_infinite()}} for squishing infinite values into range.
}}

\item{trans}{For continuous scales, the name of a transformation object
or the object itself. Built-in transformations include "asn", "atanh",
"boxcox", "date", "exp", "hms", "identity", "log", "log10", "log1p", "log2",
"logit", "modulus", "probability", "probit", "pseudo_log", "reciprocal",
"reverse", "sqrt" and "time".

A transformation object bundles together a transform, its inverse,
and methods for generating breaks and labels. Transformation objects
are defined in the scales package, and are called \verb{<name>_trans} (e.g.,
\code{\link[scales:boxcox_trans]{scales::boxcox_trans()}}). You can create your own
transformation with \code{\link[scales:trans_new]{scales::trans_new()}}.}

\item{guide}{A function used to create a guide or its name. See
\code{\link[ggplot2:guides]{guides()}} for more information.}

\item{sec.axis}{\code{\link[ggplot2:sec_axis]{sec_axis()}} is used to specify a secondary axis.}

\item{base_size}{base font size, given in pts.}

\item{base_family}{base font family}

\item{base_line_size}{base size for line elements}

\item{base_rect_size}{base size for rect elements}

\item{check_overlap}{If \code{TRUE}, text that overlaps previous text in the
same layer will not be plotted. \code{check_overlap} happens at draw time and in
the order of the data. Therefore data should be arranged by the label
column before calling \code{geom_text()}. Note that this argument is not
supported by \code{geom_label()}.}

\item{nrow, ncol}{Number of rows and columns.}

\item{dir}{Direction: either \code{"h"} for horizontal, the default, or \code{"v"},
for vertical.}

\item{strip.position}{By default, the labels are displayed on the top of
the plot. Using \code{strip.position} it is possible to place the labels on
either of the four sides by setting \code{strip.position = c("top",
  "bottom", "left", "right")}}

\item{label}{The title of the respective axis (for \code{xlab()} or \code{ylab()}) or
of the plot (for \code{ggtitle()}).}
}
\value{
A list with class \code{uneval}. Components of the list are either
quosures or constants.
}
\description{
These functions thinly wrap \code{ggplot2} functions unless otherwise noted:
\tabular{rl}{
\code{ggp}   \tab \code{\link[ggplot2]{ggplot}}
\cr      \code{ggsv}   \tab \code{\link[ggplot2]{ggsave}}
\cr               \tab  
\cr     \code{ggaes}   \tab \code{\link[ggplot2]{aes}}
\cr     \code{ggexp}   \tab \code{\link[ggplot2]{expansion}}
\cr     \code{ggmar}   \tab \code{\link[ggplot2]{margin}}
\cr    \code{ggunit}   \tab \code{\link[ggplot2]{unit}}
\cr    \code{ggvars}   \tab \code{\link[ggplot2]{vars}}
\cr               \tab  
\cr    \code{gglabs}   \tab \code{\link[ggplot2]{labs}}
\cr    \code{ggxlab}   \tab \code{\link[ggplot2]{xlab}}
\cr    \code{ggylab}   \tab \code{\link[ggplot2]{ylab}}
\cr               \tab  
\cr     \code{ggdot}   \tab \code{\link[ggplot2]{geom_point}}
\cr     \code{gghln}   \tab \code{\link[ggplot2]{geom_hline}}
\cr     \code{gglab}   \tab \code{\link[ggplot2]{geom_label}}
\cr     \code{gglin}   \tab \code{\link[ggplot2]{geom_line}}
\cr     \code{ggtxt}   \tab \code{\link[ggplot2]{geom_text}}
\cr     \code{ggvln}   \tab \code{\link[ggplot2]{geom_vline}}
\cr               \tab  
\cr    \code{gggrid}   \tab \code{\link[ggplot2]{facet_grid}}
\cr    \code{ggwrap}   \tab \code{\link[ggplot2]{facet_wrap}}
\cr               \tab  
\cr     \code{ggthm}   \tab \code{\link[ggplot2]{theme}}
\cr    \code{ggtmin}   \tab \code{\link[ggplot2]{theme_minimal}}
\cr               \tab  
\cr     \code{ggsac}   \tab \code{\link[ggplot2]{scale_alpha_continuous}}
\cr     \code{ggscm}   \tab \code{\link[ggplot2]{scale_color_manual}}
\cr     \code{ggsdm}   \tab \code{\link[ggplot2]{scale_shape_manual}}
\cr     \code{ggslm}   \tab \code{\link[ggplot2]{scale_linetype_manual}}
\cr     \code{ggsxc}   \tab \code{\link[ggplot2]{scale_x_continuous}}
\cr     \code{ggsyc}   \tab \code{\link[ggplot2]{scale_y_continuous}}
\cr               \tab  
\cr    \code{ggerct}   \tab \code{\link[ggplot2]{element_rect}}
\cr    \code{ggetxt}   \tab \code{\link[ggplot2]{element_text}}
\cr    \code{ggelin}   \tab \code{\link[ggplot2]{element_line}}
\cr   \code{ggenull}   \tab \code{\link[ggplot2]{element_blank}}
\cr               \tab  
\cr     \code{ggemd}   \tab \code{\link[ggtext]{element_markdown}}\eqn{^1}
}
\verb{ }\eqn{^{1.}} A \code{ggtext} function.
}
\details{
\code{ggplot()} is used to construct the initial plot object,
and is almost always followed by \code{+} to add component to the
plot. There are three common ways to invoke \code{ggplot()}:
\itemize{
\item \verb{ggplot(df, aes(x, y, other aesthetics))}
\item \code{ggplot(df)}
\item \code{ggplot()}
}

The first method is recommended if all layers use the same
data and the same set of aesthetics, although this method
can also be used to add a layer using data from another
data frame. See the first example below. The second
method specifies the default data frame to use for the plot,
but no aesthetics are defined up front. This is useful when
one data frame is used predominantly as layers are added,
but the aesthetics may vary from one layer to another. The
third method initializes a skeleton \code{ggplot} object which
is fleshed out as layers are added. This method is useful when
multiple data frames are used to produce different layers, as
is often the case in complex graphics.
}
\section{Quasiquotation}{



\code{aes()} is a \link[rlang:topic-defuse]{quoting function}. This means that
its inputs are quoted to be evaluated in the context of the
data. This makes it easy to work with variables from the data frame
because you can name those directly. The flip side is that you have
to use \link[rlang:topic-inject]{quasiquotation} to program with
\code{aes()}. See a tidy evaluation tutorial such as the \href{https://dplyr.tidyverse.org/articles/programming.html}{dplyr programming vignette}
to learn more about these techniques.

}

\section{Overplotting}{


The biggest potential problem with a scatterplot is overplotting: whenever
you have more than a few points, points may be plotted on top of one
another. This can severely distort the visual appearance of the plot.
There is no one solution to this problem, but there are some techniques
that can help. You can add additional information with
\code{\link[ggplot2:geom_smooth]{geom_smooth()}}, \code{\link[ggplot2:geom_quantile]{geom_quantile()}} or
\code{\link[ggplot2:geom_density_2d]{geom_density_2d()}}. If you have few unique \code{x} values,
\code{\link[ggplot2:geom_boxplot]{geom_boxplot()}} may also be useful.

Alternatively, you can
summarise the number of points at each location and display that in some
way, using \code{\link[ggplot2:geom_count]{geom_count()}}, \code{\link[ggplot2:geom_hex]{geom_hex()}}, or
\code{\link[ggplot2:geom_density2d]{geom_density2d()}}.

Another technique is to make the points transparent (e.g.
\code{geom_point(alpha = 0.05)}) or very small (e.g.
\code{geom_point(shape = ".")}).

}

\section{Aesthetics}{


\code{geom_point()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{x}}
\item \strong{\code{y}}
\item \code{alpha}
\item \code{colour}
\item \code{fill}
\item \code{group}
\item \code{shape}
\item \code{size}
\item \code{stroke}
}
Learn more about setting these aesthetics in \code{vignette("ggplot2-specs")}.




These geoms are drawn using \code{\link[ggplot2:geom_line]{geom_line()}} so they support the
same aesthetics: \code{alpha}, \code{colour}, \code{linetype} and
\code{linewidth}. They also each have aesthetics that control the position of
the line:
\itemize{
\item \code{geom_vline()}: \code{xintercept}
\item \code{geom_hline()}: \code{yintercept}
\item \code{geom_abline()}: \code{slope} and \code{intercept}
}




\code{geom_text()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{x}}
\item \strong{\code{y}}
\item \strong{\code{label}}
\item \code{alpha}
\item \code{angle}
\item \code{colour}
\item \code{family}
\item \code{fontface}
\item \code{group}
\item \code{hjust}
\item \code{lineheight}
\item \code{size}
\item \code{vjust}
}
Learn more about setting these aesthetics in \code{vignette("ggplot2-specs")}.




\code{geom_path()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{x}}
\item \strong{\code{y}}
\item \code{alpha}
\item \code{colour}
\item \code{group}
\item \code{linetype}
\item \code{linewidth}
}
Learn more about setting these aesthetics in \code{vignette("ggplot2-specs")}.




\code{geom_text()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{x}}
\item \strong{\code{y}}
\item \strong{\code{label}}
\item \code{alpha}
\item \code{angle}
\item \code{colour}
\item \code{family}
\item \code{fontface}
\item \code{group}
\item \code{hjust}
\item \code{lineheight}
\item \code{size}
\item \code{vjust}
}
Learn more about setting these aesthetics in \code{vignette("ggplot2-specs")}.




These geoms are drawn using \code{\link[ggplot2:geom_line]{geom_line()}} so they support the
same aesthetics: \code{alpha}, \code{colour}, \code{linetype} and
\code{linewidth}. They also each have aesthetics that control the position of
the line:
\itemize{
\item \code{geom_vline()}: \code{xintercept}
\item \code{geom_hline()}: \code{yintercept}
\item \code{geom_abline()}: \code{slope} and \code{intercept}
}

}

\section{\code{geom_label()}}{


Currently \code{geom_label()} does not support the \code{check_overlap} argument
or the \code{angle} aesthetic. Also, it is considerably slower than \code{geom_text()}.
The \code{fill} aesthetic controls the background colour of the label.




Currently \code{geom_label()} does not support the \code{check_overlap} argument
or the \code{angle} aesthetic. Also, it is considerably slower than \code{geom_text()}.
The \code{fill} aesthetic controls the background colour of the label.

}

\section{Alignment}{


You can modify text alignment with the \code{vjust} and \code{hjust}
aesthetics. These can either be a number between 0 (right/bottom) and
1 (top/left) or a character (\code{"left"}, \code{"middle"}, \code{"right"}, \code{"bottom"},
\code{"center"}, \code{"top"}). There are two special alignments: \code{"inward"} and
\code{"outward"}. Inward always aligns text towards the center, and outward
aligns it away from the center.




You can modify text alignment with the \code{vjust} and \code{hjust}
aesthetics. These can either be a number between 0 (right/bottom) and
1 (top/left) or a character (\code{"left"}, \code{"middle"}, \code{"right"}, \code{"bottom"},
\code{"center"}, \code{"top"}). There are two special alignments: \code{"inward"} and
\code{"outward"}. Inward always aligns text towards the center, and outward
aligns it away from the center.

}

\section{Orientation}{


This geom treats each axis differently and, thus, can thus have two orientations. Often the orientation is easy to deduce from a combination of the given mappings and the types of positional scales in use. Thus, ggplot2 will by default try to guess which orientation the layer should have. Under rare circumstances, the orientation is ambiguous and guessing may fail. In that case the orientation can be specified directly using the \code{orientation} parameter, which can be either \code{"x"} or \code{"y"}. The value gives the axis that the geom should run along, \code{"x"} being the default orientation you would expect for the geom.

}

\section{Missing value handling}{


\code{geom_path()}, \code{geom_line()}, and \code{geom_step()} handle \code{NA} as follows:
\itemize{
\item If an \code{NA} occurs in the middle of a line, it breaks the line. No warning
is shown, regardless of whether \code{na.rm} is \code{TRUE} or \code{FALSE}.
\item If an \code{NA} occurs at the start or the end of the line and \code{na.rm} is \code{FALSE}
(default), the \code{NA} is removed with a warning.
\item If an \code{NA} occurs at the start or the end of the line and \code{na.rm} is \code{TRUE},
the \code{NA} is removed silently, without warning.
}

}

\section{Color Blindness}{


Many color palettes derived from RGB combinations (like the "rainbow" color
palette) are not suitable to support all viewers, especially those with
color vision deficiencies. Using \code{viridis} type, which is perceptually
uniform in both colour and black-and-white display is an easy option to
ensure good perceptive properties of your visulizations.
The colorspace package offers functionalities
\itemize{
\item to generate color palettes with good perceptive properties,
\item to analyse a given color palette, like emulating color blindness,
\item and to modify a given color palette for better perceptivity.
}

For more information on color vision deficiencies and suitable color choices
see the \href{https://arxiv.org/abs/1903.06490}{paper on the colorspace package}
and references therein.




Many color palettes derived from RGB combinations (like the "rainbow" color
palette) are not suitable to support all viewers, especially those with
color vision deficiencies. Using \code{viridis} type, which is perceptually
uniform in both colour and black-and-white display is an easy option to
ensure good perceptive properties of your visulizations.
The colorspace package offers functionalities
\itemize{
\item to generate color palettes with good perceptive properties,
\item to analyse a given color palette, like emulating color blindness,
\item and to modify a given color palette for better perceptivity.
}

For more information on color vision deficiencies and suitable color choices
see the \href{https://arxiv.org/abs/1903.06490}{paper on the colorspace package}
and references therein.




Many color palettes derived from RGB combinations (like the "rainbow" color
palette) are not suitable to support all viewers, especially those with
color vision deficiencies. Using \code{viridis} type, which is perceptually
uniform in both colour and black-and-white display is an easy option to
ensure good perceptive properties of your visulizations.
The colorspace package offers functionalities
\itemize{
\item to generate color palettes with good perceptive properties,
\item to analyse a given color palette, like emulating color blindness,
\item and to modify a given color palette for better perceptivity.
}

For more information on color vision deficiencies and suitable color choices
see the \href{https://arxiv.org/abs/1903.06490}{paper on the colorspace package}
and references therein.

}

\section{Saving images without ggsave()}{



In most cases \code{ggsave()} is the simplest way to save your plot, but
sometimes you may wish to save the plot by writing directly to a
graphics device. To do this, you can open a regular R graphics
device such as \code{png()} or \code{pdf()}, print the plot, and then close
the device using \code{dev.off()}. This technique is illustrated in the
examples section.

}

\section{Theme inheritance}{


Theme elements inherit properties from other theme elements hierarchically.
For example, \code{axis.title.x.bottom} inherits from \code{axis.title.x} which inherits
from \code{axis.title}, which in turn inherits from \code{text}. All text elements inherit
directly or indirectly from \code{text}; all lines inherit from
\code{line}, and all rectangular objects inherit from \code{rect}.
This means that you can modify the appearance of multiple elements by
setting a single high-level component.

Learn more about setting these aesthetics in \code{vignette("ggplot2-specs")}.

}

\examples{
# Generate some sample data, then compute mean and standard deviation
# in each group
set.seed(1)
df <- data.frame(
  gp = factor(rep(letters[1:3], each = 10)),
  y = rnorm(30)
)
ds <- do.call(rbind, lapply(split(df, df$gp), function(d) {
  data.frame(mean = mean(d$y), sd = sd(d$y), gp = d$gp)
}))

# The summary data frame ds is used to plot larger red points on top
# of the raw data. Note that we don't need to supply `data` or `mapping`
# in each layer because the defaults from ggplot() are used.
ggplot(df, aes(gp, y)) +
  geom_point() +
  geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)

# Same plot as above, declaring only the data frame in ggplot().
# Note how the x and y aesthetics must now be declared in
# each geom_point() layer.
ggplot(df) +
  geom_point(aes(gp, y)) +
  geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3)

# Alternatively we can fully specify the plot in each layer. This
# is not useful here, but can be more clear when working with complex
# mult-dataset graphics
ggplot() +
  geom_point(data = df, aes(gp, y)) +
  geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3) +
  geom_errorbar(
    data = ds,
    aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
    colour = 'red',
    width = 0.4
  )
}
\seealso{
Other plots: 
\code{\link{color}},
\code{\link{gr}},
\code{\link{markdown}},
\code{\link{pals}},
\code{\link{sca}()},
\code{\link{u2u}()}

Other wraps: 
\code{\link{basics}},
\code{\link{dp}},
\code{\link{dt}()},
\code{\link{gr}},
\code{\link{rd}},
\code{\link{sca}()},
\code{\link{tb}()}
}
\concept{plots}
\concept{wraps}
