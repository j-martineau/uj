% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/is_failsafe.R
\name{is_failsafe}
\alias{is_failsafe}
\alias{isIN}
\alias{isID}
\alias{isEQ}
\alias{isT}
\alias{isF}
\alias{isNa}
\alias{isOk}
\alias{isTF}
\alias{isLG}
\alias{isBL}
\alias{notIN}
\alias{notID}
\alias{notEQ}
\alias{notT}
\alias{notF}
\alias{notNa}
\alias{notOk}
\alias{notBL}
\alias{norIN}
\alias{norID}
\alias{norEQ}
\alias{norT}
\alias{norF}
\alias{norNa}
\alias{norOk}
\alias{norTF}
\alias{norLG}
\alias{norBL}
\alias{anyIN}
\alias{anyID}
\alias{anyEQ}
\alias{anyT}
\alias{anyF}
\alias{anyNa}
\alias{anyOk}
\alias{anyTF}
\alias{anyLG}
\alias{anyBL}
\alias{allIN}
\alias{allID}
\alias{allEQ}
\alias{allT}
\alias{allF}
\alias{allNa}
\alias{allOk}
\alias{allTF}
\alias{allLG}
\alias{allBL}
\alias{oneIN}
\alias{oneID}
\alias{oneEQ}
\alias{oneT}
\alias{oneF}
\alias{oneNa}
\alias{oneOk}
\alias{oneTF}
\alias{oneLG}
\alias{oneBL}
\alias{twoIN}
\alias{twoID}
\alias{twoEQ}
\alias{twoT}
\alias{twoF}
\alias{twoNa}
\alias{twoOk}
\alias{twoTF}
\alias{twoLG}
\alias{twoBL}
\title{Failsafe \code{is} functions}
\usage{
isIN(x, ...)

isID(x, y)

isEQ(x, y)

isT(x)

isF(x)

isNa(x)

isOk(x)

isTF(x)

isLG(x)

isBL(x)

notIN(x, ...)

notID(x, y)

notEQ(x, y)

notT(x)

notF(x)

notNa(x)

notOk(x)

notBL(x)

norIN(x, ...)

norID(x, y)

norEQ(x, y)

norT(x)

norF(x)

norNa(x)

norOk(x)

norTF(x)

norLG(x)

norBL(x)

anyIN(x, ...)

anyID(x, y)

anyEQ(x, y)

anyT(x)

anyF(x)

anyNa(x)

anyOk(x)

anyTF(x)

anyLG(x)

anyBL(x)

allIN(x, ...)

allID(x, y)

allEQ(x, y)

allT(x)

allF(x)

allNa(x)

allOk(x)

allTF(x)

allLG(x)

allBL(x)

oneIN(x, ...)

oneID(x, y)

oneEQ(x, y)

oneT(x)

oneF(x)

oneNa(x)

oneOk(x)

oneTF(x)

oneLG(x)

oneBL(x)

twoIN(x, ...)

twoID(x, y)

twoEQ(x, y)

twoT(x)

twoF(x)

twoNa(x)

twoOk(x)

twoTF(x)

twoLG(x)

twoBL(x)
}
\arguments{
\item{x, y}{Any R object.}

\item{...}{Objects to check \code{x} against for functions with the suffix \code{IN}.}
}
\value{
\code{TRUE} or \code{FALSE}.
}
\description{
These functions \strong{always} produce a \code{TRUE} or \code{FALSE} result unless identity-evaluating arguments (e.g., \code{identity(x)}) produce an error.
\cr\cr
Function names are constructed of prefixes and suffixes, where the suffix specifies what kind of check is conducted and the prefix specifies how the check is modified or applying the check to multiple values and sweeping across the results.
\cr\cr
\strong{Available suffixes} check for the following:
\itemize{
\item \strong{\code{IN}}: checks whether \code{x} is in the collective set of atomic values contained by all \code{...} arguments.
\item \strong{\code{ID}}: checks whether \code{x} is identical to \code{y}.
\item \strong{\code{EQ}}: checks whether \code{x} is set-equal to \code{y}
\item \strong{\code{T}} : checks for scalar \code{TRUE}.
\item \strong{\code{F}} : checks for scalar \code{FALSE}.
\item \strong{\code{NA}}: checks for scalar \code{NA}.
\item \strong{\code{Ok}}: checks for scalar non-\code{NA}.
\item \strong{\code{TF}}: checks for scalar \code{TRUE} or \code{FALSE}.
\item \strong{\code{LG}}: checks for scalar logical, including \code{NA}.
\item \strong{\code{BL}}: checks for scalar \code{""} (blank string).
}
\strong{Available prefixes} for modifying the result are
\itemize{
\item \strong{\code{is}}: identity.
\item \strong{\code{not}}: negation.
}
\strong{Available prefixes} for applying to multiple values and sweeping across the results are
\itemize{
\item \strong{\code{nor}}: No resulting value is \code{TRUE}.
\item \strong{\code{any}}: Any resulting value is \code{TRUE}.
\item \strong{\code{all}}: Every resulting value is \code{TRUE}.
\item \strong{\code{one}}: Exactly 1 resulting value is \code{TRUE}.
\item \strong{\code{two}}: 2+ resulting values are \code{TRUE}.
}
\strong{Combining prefixes and suffix}: All prefixes combine with all suffixes to create function names.
}
\seealso{
Other failsafe: 
\code{\link{binary_failsafe}},
\code{\link{failsafe}()}

Other logicals: 
\code{\link{binary_failsafe}},
\code{\link{uj_logicals}}

Other extensions: 
\code{\link{atomize}},
\code{\link{binary_failsafe}},
\code{\link{callers}()},
\code{\link{case}()},
\code{\link{dots_uj}},
\code{\link{envir_vals}},
\code{\link{ex}()},
\code{\link{failsafe}()},
\code{\link{fork}()},
\code{\link{fsub}()},
\code{\link{is_unq}()},
\code{\link{make_uj}},
\code{\link{n_is}()},
\code{\link{n_th}()},
\code{\link{naming}},
\code{\link{na}()},
\code{\link{os}()},
\code{\link{paths}},
\code{\link{pause}()},
\code{\link{ply}()},
\code{\link{put}()},
\code{\link{reclass}()},
\code{\link{recycling}},
\code{\link{removal}},
\code{\link{run}()},
\code{\link{r}()},
\code{\link{stats0}},
\code{\link{swap}()},
\code{\link{uj_logicals}},
\code{\link{xb}()}
}
\concept{extensions}
\concept{failsafe}
\concept{logicals}
