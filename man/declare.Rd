% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/declare.R
\name{declare}
\alias{declare}
\alias{dtf}
\alias{dtf.}
\alias{dtf0}
\alias{dtf_na}
\alias{mat}
\alias{matd}
\alias{vec}
\alias{vec.}
\alias{vec_na}
\alias{vls}
\alias{vls.}
\title{Declare basic R objects with extended functionality}
\usage{
dtf(..., cn. = NULL)

dtf.(...)

dtf0(cn)

dtf_na(cn, nr)

mat(..., r = 1, nr = NULL, nc = NULL, br = F, rn = NULL, cn = NULL)

matd(x = 1, r = 1)

vec(..., r. = 1, en. = NULL)

vec.(...)

vec_na(r)

vls(..., en. = NULL)

vls.(...)
}
\arguments{
\item{...}{Objects to placed in an atomic vec, atomic matrix, atomic data.frame, vlist, or square atomic diagonal matrix. \link[=a]{Atomized} for vec and matrix creation.}

\item{cn.}{A possibly pipe-delimited complete character vec of column names (respectively) for a data.frame.}

\item{nr, nc}{Complete positive whole-number scalars giving number of rows and columns, respectively.}

\item{r}{A non-\code{NA} numeric scalar number of replications.}

\item{br}{A non-\code{NA} logical scalar indicating whether to fill matrices by row.}

\item{rn, cn}{Possibly pipe-delimited complete character vecs of row and column names (respectively) for a matrix.}

\item{x}{A non-empty vector of mode \code{'numeric'}, \code{'character'}, or \code{'logical'}.}

\item{en.}{A possibly pipe-delimited, \link[=cmp_chr_vec]{complete character vec} of names to apply to vector or list elements}
}
\value{
\tabular{rl}{
\code{dtf_na} \tab   An atomic data.frame
\cr \code{vec_na} \tab   An atomic vector.
\cr   \code{dmat} \tab   A square matrix.
\cr   \code{dtf0} \tab   An atomic data.frame
\cr   \code{dtf.} \tab   An atomic data.frame
\cr   \code{vec.} \tab   An atomic vector.
\cr   \code{vls.} \tab   A \link[=ivls]{vlist}.
\cr    \code{dtf} \tab   An atomic data.frame
\cr    \code{mat} \tab   A matrix.
\cr    \code{vec} \tab   An atomic vector.
\cr    \code{vls} \tab   A \link[=ivls]{vlist}.
}
}
\description{
This family of functions enforces the restrictions that names must (a) contain only ASCII letters, numerals, \code{'.'}, and \code{'_'}; (b) begin with a letter or \code{'.'} followed by a letter; and (c) end with a letter or numeral.
\cr
\cr Functions declaring \link[=atm_dtf]{atomic data.frames}:\tabular{rl}{
\code{dtf} \tab   Declares a data.frame.
\cr   \code{dtf.} \tab   Declares a data.frame concisely\eqn{^a}.
\cr   \code{dtf0} \tab   Declares a \code{0}-row data.frame.
\cr \code{dtf_na} \tab   Declares a data.frame of \code{NA} values.
}
Functions declaring matrices:\tabular{rl}{
\code{mat} \tab   Declares a matrix.
\cr \code{matd} \tab   Declares a square diagonal matrix\eqn{^b}.
}
Functions declaring atomic vectors:\tabular{rl}{
\code{vec} \tab   Declares a vector.
\cr   \code{vec.} \tab   Declares a named atomic vector concisely\eqn{^c}.
\cr \code{vec_na} \tab   Declares a vector of \code{NA} values.
}
Functions declaring \link[=ivls]{vlists}:\tabular{rl}{
\code{vls} \tab   Declares a \link[=ivls]{vlist}.
\cr \code{vls.} \tab   Declares a named \link[=ivls]{vlist} concisely\eqn{^d}.
}
\eqn{^{a.}} \code{dtf.(a, b)} is identical to \code{data.frame(a = a, b = b, stringsAsFactors = F)}.
\cr \eqn{^{b.}} Off-diags are \code{0}, \code{FALSE}, \code{""} for \code{x} of mode \code{'numeric'}, \code{'logical'}, \code{'character'}, respectively.
\cr \eqn{^{c.}} \code{vec.(a, b)} is identical to \code{c(a = a, b = b)}.
\cr \eqn{^{d.}} \code{vls.(a, b)} is identical to \code{list(a = a, b = b)}.
}
\examples{
a <- "a"
b <- "b"
c <- "c"
na <- NA
abc <- c(a, b, c)
nums <- 0:9
NUMS <- 1:9
labs1 <- c("abc", "nums", "na")
labs2 <- c("abc", "NUMS", "na")

vec(a, b, c)
vec(a, b, c, en. = abc)
vec(a = a, b = b, c = c)
vec(a, b, c, en. = "a|b|c")
vec.(a, b, c)

mat(1:9)
mat(1:9, nr = 3)
mat(1:9, nc = 3)
mat(1:9, nr = 3, rn = "a|b|c", cn = abc, br = TRUE)

vls(abc, nums, na)
vls(abc, nums, na, en. = labs1)
vls(abc = abc, nums = nums, na = na)
vls(abc, nums, na, en. = "abc|nums|na")
vls.(abc, nums, na)

dtf(abc, NUMS, na, cn. = labs2)
dtf(abc = abc, NUMS = NUMS, na = na)
dtf(abc, NUMS, na, cn. = "abc|NUMS|na")
dtf.(abc, NUMS, na)

vec_na(3)

dmat(abc)
dmat(1, 3)
dmat(TRUE, 3)

dtf0(abc)
dtf0("a|b|c")
dtf_na(abc, 3)
}
