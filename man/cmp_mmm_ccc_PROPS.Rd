% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cmp_mmm_ccc.R
\encoding{UTF-8}
\name{cmp_mmm_ccc_PROPS}
\alias{cmp_mmm_ccc_PROPS}
\alias{cmp_mmm_ccc}
\alias{cmp_mmm_ccc_funs}
\alias{cmp_atm_arr}
\alias{cmp_atm_dtf}
\alias{cmp_atm_gen}
\alias{cmp_atm_mat}
\alias{cmp_atm_mvc}
\alias{cmp_atm_scl}
\alias{cmp_atm_vec}
\alias{cmp_atm_vls}
\alias{cmp_ch1_arr}
\alias{cmp_ch1_dtf}
\alias{cmp_ch1_gen}
\alias{cmp_ch1_mat}
\alias{cmp_ch1_mvc}
\alias{cmp_ch1_scl}
\alias{cmp_ch1_vec}
\alias{cmp_ch1_vls}
\alias{cmp_ch3_arr}
\alias{cmp_ch3_dtf}
\alias{cmp_ch3_gen}
\alias{cmp_ch3_mat}
\alias{cmp_ch3_mvc}
\alias{cmp_ch3_scl}
\alias{cmp_ch3_vec}
\alias{cmp_ch3_vls}
\alias{cmp_chr_arr}
\alias{cmp_chr_dtf}
\alias{cmp_chr_gen}
\alias{cmp_chr_mat}
\alias{cmp_chr_mvc}
\alias{cmp_chr_scl}
\alias{cmp_chr_vec}
\alias{cmp_chr_vls}
\alias{cmp_clr_arr}
\alias{cmp_clr_dtf}
\alias{cmp_clr_gen}
\alias{cmp_clr_mat}
\alias{cmp_clr_mvc}
\alias{cmp_clr_scl}
\alias{cmp_clr_vec}
\alias{cmp_clr_vls}
\alias{cmp_evn_arr}
\alias{cmp_evn_dtf}
\alias{cmp_evn_gen}
\alias{cmp_evn_mat}
\alias{cmp_evn_mvc}
\alias{cmp_evn_scl}
\alias{cmp_evn_vec}
\alias{cmp_evn_vls}
\alias{cmp_fac_arr}
\alias{cmp_fac_dtf}
\alias{cmp_fac_gen}
\alias{cmp_fac_mat}
\alias{cmp_fac_mvc}
\alias{cmp_fac_scl}
\alias{cmp_fac_vec}
\alias{cmp_fac_vls}
\alias{cmp_frc_arr}
\alias{cmp_frc_dtf}
\alias{cmp_frc_gen}
\alias{cmp_frc_mat}
\alias{cmp_frc_mvc}
\alias{cmp_frc_scl}
\alias{cmp_frc_vec}
\alias{cmp_frc_vls}
\alias{cmp_ind_arr}
\alias{cmp_ind_dtf}
\alias{cmp_ind_gen}
\alias{cmp_ind_mat}
\alias{cmp_ind_mvc}
\alias{cmp_ind_scl}
\alias{cmp_ind_vec}
\alias{cmp_ind_vls}
\alias{cmp_lgl_arr}
\alias{cmp_lgl_dtf}
\alias{cmp_lgl_gen}
\alias{cmp_lgl_mat}
\alias{cmp_lgl_mvc}
\alias{cmp_lgl_scl}
\alias{cmp_lgl_vec}
\alias{cmp_lgl_vls}
\alias{cmp_neg_arr}
\alias{cmp_neg_dtf}
\alias{cmp_neg_gen}
\alias{cmp_neg_mat}
\alias{cmp_neg_mvc}
\alias{cmp_neg_scl}
\alias{cmp_neg_vec}
\alias{cmp_neg_vls}
\alias{cmp_ngw_arr}
\alias{cmp_ngw_dtf}
\alias{cmp_ngw_gen}
\alias{cmp_ngw_mat}
\alias{cmp_ngw_mvc}
\alias{cmp_ngw_scl}
\alias{cmp_ngw_vec}
\alias{cmp_ngw_vls}
\alias{cmp_nng_arr}
\alias{cmp_nng_dtf}
\alias{cmp_nng_gen}
\alias{cmp_nng_mat}
\alias{cmp_nng_mvc}
\alias{cmp_nng_scl}
\alias{cmp_nng_vec}
\alias{cmp_nng_vls}
\alias{cmp_nnw_arr}
\alias{cmp_nnw_dtf}
\alias{cmp_nnw_gen}
\alias{cmp_nnw_mat}
\alias{cmp_nnw_mvc}
\alias{cmp_nnw_scl}
\alias{cmp_nnw_vec}
\alias{cmp_nnw_vls}
\alias{cmp_nps_arr}
\alias{cmp_nps_dtf}
\alias{cmp_nps_gen}
\alias{cmp_nps_mat}
\alias{cmp_nps_mvc}
\alias{cmp_nps_scl}
\alias{cmp_nps_vec}
\alias{cmp_nps_vls}
\alias{cmp_npw_arr}
\alias{cmp_npw_dtf}
\alias{cmp_npw_gen}
\alias{cmp_npw_mat}
\alias{cmp_npw_mvc}
\alias{cmp_npw_scl}
\alias{cmp_npw_vec}
\alias{cmp_npw_vls}
\alias{cmp_nst_arr}
\alias{cmp_nst_dtf}
\alias{cmp_nst_gen}
\alias{cmp_nst_mat}
\alias{cmp_nst_mvc}
\alias{cmp_nst_scl}
\alias{cmp_nst_vec}
\alias{cmp_nst_vls}
\alias{cmp_num_arr}
\alias{cmp_num_dtf}
\alias{cmp_num_gen}
\alias{cmp_num_mat}
\alias{cmp_num_mvc}
\alias{cmp_num_scl}
\alias{cmp_num_vec}
\alias{cmp_num_vls}
\alias{cmp_odd_arr}
\alias{cmp_odd_dtf}
\alias{cmp_odd_gen}
\alias{cmp_odd_mat}
\alias{cmp_odd_mvc}
\alias{cmp_odd_scl}
\alias{cmp_odd_vec}
\alias{cmp_odd_vls}
\alias{cmp_ord_arr}
\alias{cmp_ord_dtf}
\alias{cmp_ord_gen}
\alias{cmp_ord_mat}
\alias{cmp_ord_mvc}
\alias{cmp_ord_scl}
\alias{cmp_ord_vec}
\alias{cmp_ord_vls}
\alias{cmp_pct_arr}
\alias{cmp_pct_dtf}
\alias{cmp_pct_gen}
\alias{cmp_pct_mat}
\alias{cmp_pct_mvc}
\alias{cmp_pct_scl}
\alias{cmp_pct_vec}
\alias{cmp_pct_vls}
\alias{cmp_pos_arr}
\alias{cmp_pos_dtf}
\alias{cmp_pos_gen}
\alias{cmp_pos_mat}
\alias{cmp_pos_mvc}
\alias{cmp_pos_scl}
\alias{cmp_pos_vec}
\alias{cmp_pos_vls}
\alias{cmp_ppn_arr}
\alias{cmp_ppn_dtf}
\alias{cmp_ppn_gen}
\alias{cmp_ppn_mat}
\alias{cmp_ppn_mvc}
\alias{cmp_ppn_scl}
\alias{cmp_ppn_vec}
\alias{cmp_ppn_vls}
\alias{cmp_psw_arr}
\alias{cmp_psw_dtf}
\alias{cmp_psw_gen}
\alias{cmp_psw_mat}
\alias{cmp_psw_mvc}
\alias{cmp_psw_scl}
\alias{cmp_psw_vec}
\alias{cmp_psw_vls}
\alias{cmp_srt_arr}
\alias{cmp_srt_dtf}
\alias{cmp_srt_gen}
\alias{cmp_srt_mat}
\alias{cmp_srt_mvc}
\alias{cmp_srt_scl}
\alias{cmp_srt_vec}
\alias{cmp_srt_vls}
\alias{cmp_str_arr}
\alias{cmp_str_dtf}
\alias{cmp_str_gen}
\alias{cmp_str_mat}
\alias{cmp_str_mvc}
\alias{cmp_str_scl}
\alias{cmp_str_vec}
\alias{cmp_str_vls}
\alias{cmp_uno_arr}
\alias{cmp_uno_dtf}
\alias{cmp_uno_gen}
\alias{cmp_uno_mat}
\alias{cmp_uno_mvc}
\alias{cmp_uno_scl}
\alias{cmp_uno_vec}
\alias{cmp_uno_vls}
\alias{cmp_whl_arr}
\alias{cmp_whl_dtf}
\alias{cmp_whl_gen}
\alias{cmp_whl_mat}
\alias{cmp_whl_mvc}
\alias{cmp_whl_scl}
\alias{cmp_whl_vec}
\alias{cmp_whl_vls}
\title{Combo Completeness Plus Extended Mode Plus Extended Class Combination Properties}
\usage{
cmp_mmm_ccc_PROPS()

cmp_mmm_ccc(x, mmm, ccc, ...)

cmp_mmm_ccc_funs()

cmp_atm_arr(x, ...)

cmp_atm_dtf(x, ...)

cmp_atm_gen(x, ...)

cmp_atm_mat(x, ...)

cmp_atm_mvc(x, ...)

cmp_atm_scl(x, ...)

cmp_atm_vec(x, ...)

cmp_atm_vls(x, ...)

cmp_ch1_arr(x, ...)

cmp_ch1_dtf(x, ...)

cmp_ch1_gen(x, ...)

cmp_ch1_mat(x, ...)

cmp_ch1_mvc(x, ...)

cmp_ch1_scl(x, ...)

cmp_ch1_vec(x, ...)

cmp_ch1_vls(x, ...)

cmp_ch3_arr(x, ...)

cmp_ch3_dtf(x, ...)

cmp_ch3_gen(x, ...)

cmp_ch3_mat(x, ...)

cmp_ch3_mvc(x, ...)

cmp_ch3_scl(x, ...)

cmp_ch3_vec(x, ...)

cmp_ch3_vls(x, ...)

cmp_chr_arr(x, ...)

cmp_chr_dtf(x, ...)

cmp_chr_gen(x, ...)

cmp_chr_mat(x, ...)

cmp_chr_mvc(x, ...)

cmp_chr_scl(x, ...)

cmp_chr_vec(x, ...)

cmp_chr_vls(x, ...)

cmp_clr_arr(x, ...)

cmp_clr_dtf(x, ...)

cmp_clr_gen(x, ...)

cmp_clr_mat(x, ...)

cmp_clr_mvc(x, ...)

cmp_clr_scl(x, ...)

cmp_clr_vec(x, ...)

cmp_clr_vls(x, ...)

cmp_evn_arr(x, ...)

cmp_evn_dtf(x, ...)

cmp_evn_gen(x, ...)

cmp_evn_mat(x, ...)

cmp_evn_mvc(x, ...)

cmp_evn_scl(x, ...)

cmp_evn_vec(x, ...)

cmp_evn_vls(x, ...)

cmp_fac_arr(x, ...)

cmp_fac_dtf(x, ...)

cmp_fac_gen(x, ...)

cmp_fac_mat(x, ...)

cmp_fac_mvc(x, ...)

cmp_fac_scl(x, ...)

cmp_fac_vec(x, ...)

cmp_fac_vls(x, ...)

cmp_frc_arr(x, ...)

cmp_frc_dtf(x, ...)

cmp_frc_gen(x, ...)

cmp_frc_mat(x, ...)

cmp_frc_mvc(x, ...)

cmp_frc_scl(x, ...)

cmp_frc_vec(x, ...)

cmp_frc_vls(x, ...)

cmp_ind_arr(x, ...)

cmp_ind_dtf(x, ...)

cmp_ind_gen(x, ...)

cmp_ind_mat(x, ...)

cmp_ind_mvc(x, ...)

cmp_ind_scl(x, ...)

cmp_ind_vec(x, ...)

cmp_ind_vls(x, ...)

cmp_lgl_arr(x, ...)

cmp_lgl_dtf(x, ...)

cmp_lgl_gen(x, ...)

cmp_lgl_mat(x, ...)

cmp_lgl_mvc(x, ...)

cmp_lgl_scl(x, ...)

cmp_lgl_vec(x, ...)

cmp_lgl_vls(x, ...)

cmp_neg_arr(x, ...)

cmp_neg_dtf(x, ...)

cmp_neg_gen(x, ...)

cmp_neg_mat(x, ...)

cmp_neg_mvc(x, ...)

cmp_neg_scl(x, ...)

cmp_neg_vec(x, ...)

cmp_neg_vls(x, ...)

cmp_ngw_arr(x, ...)

cmp_ngw_dtf(x, ...)

cmp_ngw_gen(x, ...)

cmp_ngw_mat(x, ...)

cmp_ngw_mvc(x, ...)

cmp_ngw_scl(x, ...)

cmp_ngw_vec(x, ...)

cmp_ngw_vls(x, ...)

cmp_nng_arr(x, ...)

cmp_nng_dtf(x, ...)

cmp_nng_gen(x, ...)

cmp_nng_mat(x, ...)

cmp_nng_mvc(x, ...)

cmp_nng_scl(x, ...)

cmp_nng_vec(x, ...)

cmp_nng_vls(x, ...)

cmp_nnw_arr(x, ...)

cmp_nnw_dtf(x, ...)

cmp_nnw_gen(x, ...)

cmp_nnw_mat(x, ...)

cmp_nnw_mvc(x, ...)

cmp_nnw_scl(x, ...)

cmp_nnw_vec(x, ...)

cmp_nnw_vls(x, ...)

cmp_nps_arr(x, ...)

cmp_nps_dtf(x, ...)

cmp_nps_gen(x, ...)

cmp_nps_mat(x, ...)

cmp_nps_mvc(x, ...)

cmp_nps_scl(x, ...)

cmp_nps_vec(x, ...)

cmp_nps_vls(x, ...)

cmp_npw_arr(x, ...)

cmp_npw_dtf(x, ...)

cmp_npw_gen(x, ...)

cmp_npw_mat(x, ...)

cmp_npw_mvc(x, ...)

cmp_npw_scl(x, ...)

cmp_npw_vec(x, ...)

cmp_npw_vls(x, ...)

cmp_nst_arr(x, ...)

cmp_nst_dtf(x, ...)

cmp_nst_gen(x, ...)

cmp_nst_mat(x, ...)

cmp_nst_mvc(x, ...)

cmp_nst_scl(x, ...)

cmp_nst_vec(x, ...)

cmp_nst_vls(x, ...)

cmp_num_arr(x, ...)

cmp_num_dtf(x, ...)

cmp_num_gen(x, ...)

cmp_num_mat(x, ...)

cmp_num_mvc(x, ...)

cmp_num_scl(x, ...)

cmp_num_vec(x, ...)

cmp_num_vls(x, ...)

cmp_odd_arr(x, ...)

cmp_odd_dtf(x, ...)

cmp_odd_gen(x, ...)

cmp_odd_mat(x, ...)

cmp_odd_mvc(x, ...)

cmp_odd_scl(x, ...)

cmp_odd_vec(x, ...)

cmp_odd_vls(x, ...)

cmp_ord_arr(x, ...)

cmp_ord_dtf(x, ...)

cmp_ord_gen(x, ...)

cmp_ord_mat(x, ...)

cmp_ord_mvc(x, ...)

cmp_ord_scl(x, ...)

cmp_ord_vec(x, ...)

cmp_ord_vls(x, ...)

cmp_pct_arr(x, ...)

cmp_pct_dtf(x, ...)

cmp_pct_gen(x, ...)

cmp_pct_mat(x, ...)

cmp_pct_mvc(x, ...)

cmp_pct_scl(x, ...)

cmp_pct_vec(x, ...)

cmp_pct_vls(x, ...)

cmp_pos_arr(x, ...)

cmp_pos_dtf(x, ...)

cmp_pos_gen(x, ...)

cmp_pos_mat(x, ...)

cmp_pos_mvc(x, ...)

cmp_pos_scl(x, ...)

cmp_pos_vec(x, ...)

cmp_pos_vls(x, ...)

cmp_ppn_arr(x, ...)

cmp_ppn_dtf(x, ...)

cmp_ppn_gen(x, ...)

cmp_ppn_mat(x, ...)

cmp_ppn_mvc(x, ...)

cmp_ppn_scl(x, ...)

cmp_ppn_vec(x, ...)

cmp_ppn_vls(x, ...)

cmp_psw_arr(x, ...)

cmp_psw_dtf(x, ...)

cmp_psw_gen(x, ...)

cmp_psw_mat(x, ...)

cmp_psw_mvc(x, ...)

cmp_psw_scl(x, ...)

cmp_psw_vec(x, ...)

cmp_psw_vls(x, ...)

cmp_srt_arr(x, ...)

cmp_srt_dtf(x, ...)

cmp_srt_gen(x, ...)

cmp_srt_mat(x, ...)

cmp_srt_mvc(x, ...)

cmp_srt_scl(x, ...)

cmp_srt_vec(x, ...)

cmp_srt_vls(x, ...)

cmp_str_arr(x, ...)

cmp_str_dtf(x, ...)

cmp_str_gen(x, ...)

cmp_str_mat(x, ...)

cmp_str_mvc(x, ...)

cmp_str_scl(x, ...)

cmp_str_vec(x, ...)

cmp_str_vls(x, ...)

cmp_uno_arr(x, ...)

cmp_uno_dtf(x, ...)

cmp_uno_gen(x, ...)

cmp_uno_mat(x, ...)

cmp_uno_mvc(x, ...)

cmp_uno_scl(x, ...)

cmp_uno_vec(x, ...)

cmp_uno_vls(x, ...)

cmp_whl_arr(x, ...)

cmp_whl_dtf(x, ...)

cmp_whl_gen(x, ...)

cmp_whl_mat(x, ...)

cmp_whl_mvc(x, ...)

cmp_whl_scl(x, ...)

cmp_whl_vec(x, ...)

cmp_whl_vls(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{mmm}{A character scalar single extended mode property from \code{\link{mmm_props}()}.}

\item{ccc}{A character scalar single extended class property from \code{\link{ccc_props}()}.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\description{
Combo completeness plus extended mode plus extended class combination properties are the combination of \link[=UNQ]{completeness}, a single \link[=mmm]{extended mode} property, and a single \link[=ccc]{extended class} property.
}
\section{Functions}{
\itemize{
\item \code{cmp_mmm_ccc()}: Checks \code{x} for completeness, for extended mode \code{mmm}, and for extended class \code{ccc} subject to any count or value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_mmm_ccc_funs()}: Lists all combo completeness plus extended mode plus extended class property checking functions. Returns a character vector.

\item \code{cmp_atm_arr()}: Checks \code{x} for completeness, for atomicness-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_atm_dtf()}: Checks \code{x} for completeness, for atomicness-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_atm_gen()}: Checks \code{x} for completeness, for atomicness-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_atm_mat()}: Checks \code{x} for completeness, for atomicness-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_atm_mvc()}: Checks \code{x} for completeness, for atomicness-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_atm_scl()}: Checks \code{x} for completeness, for atomicness-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_atm_vec()}: Checks \code{x} for completeness, for atomicness-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_atm_vls()}: Checks \code{x} for completeness, for atomicness-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch1_arr()}: Checks \code{x} for completeness, for onechar-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch1_dtf()}: Checks \code{x} for completeness, for onechar-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch1_gen()}: Checks \code{x} for completeness, for onechar-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch1_mat()}: Checks \code{x} for completeness, for onechar-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch1_mvc()}: Checks \code{x} for completeness, for onechar-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch1_scl()}: Checks \code{x} for completeness, for onechar-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch1_vec()}: Checks \code{x} for completeness, for onechar-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch1_vls()}: Checks \code{x} for completeness, for onechar-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch3_arr()}: Checks \code{x} for completeness, for threechar-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch3_dtf()}: Checks \code{x} for completeness, for threechar-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch3_gen()}: Checks \code{x} for completeness, for threechar-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch3_mat()}: Checks \code{x} for completeness, for threechar-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch3_mvc()}: Checks \code{x} for completeness, for threechar-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch3_scl()}: Checks \code{x} for completeness, for threechar-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch3_vec()}: Checks \code{x} for completeness, for threechar-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ch3_vls()}: Checks \code{x} for completeness, for threechar-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_chr_arr()}: Checks \code{x} for completeness, for character-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_chr_dtf()}: Checks \code{x} for completeness, for character-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_chr_gen()}: Checks \code{x} for completeness, for character-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_chr_mat()}: Checks \code{x} for completeness, for character-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_chr_mvc()}: Checks \code{x} for completeness, for character-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_chr_scl()}: Checks \code{x} for completeness, for character-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_chr_vec()}: Checks \code{x} for completeness, for character-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_chr_vls()}: Checks \code{x} for completeness, for character-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_clr_arr()}: Checks \code{x} for completeness, for color-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_clr_dtf()}: Checks \code{x} for completeness, for color-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_clr_gen()}: Checks \code{x} for completeness, for color-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_clr_mat()}: Checks \code{x} for completeness, for color-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_clr_mvc()}: Checks \code{x} for completeness, for color-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_clr_scl()}: Checks \code{x} for completeness, for color-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_clr_vec()}: Checks \code{x} for completeness, for color-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_clr_vls()}: Checks \code{x} for completeness, for color-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_evn_arr()}: Checks \code{x} for completeness, for even-whole-number-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_evn_dtf()}: Checks \code{x} for completeness, for even-whole-number-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_evn_gen()}: Checks \code{x} for completeness, for even-whole-number-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_evn_mat()}: Checks \code{x} for completeness, for even-whole-number-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_evn_mvc()}: Checks \code{x} for completeness, for even-whole-number-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_evn_scl()}: Checks \code{x} for completeness, for even-whole-number-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_evn_vec()}: Checks \code{x} for completeness, for even-whole-number-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_evn_vls()}: Checks \code{x} for completeness, for even-whole-number-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_fac_arr()}: Checks \code{x} for completeness, for factor-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_fac_dtf()}: Checks \code{x} for completeness, for factor-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_fac_gen()}: Checks \code{x} for completeness, for factor-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_fac_mat()}: Checks \code{x} for completeness, for factor-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_fac_mvc()}: Checks \code{x} for completeness, for factor-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_fac_scl()}: Checks \code{x} for completeness, for factor-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_fac_vec()}: Checks \code{x} for completeness, for factor-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_fac_vls()}: Checks \code{x} for completeness, for factor-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_frc_arr()}: Checks \code{x} for completeness, for fractional-numeric-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_frc_dtf()}: Checks \code{x} for completeness, for fractional-numeric-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_frc_gen()}: Checks \code{x} for completeness, for fractional-numeric-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_frc_mat()}: Checks \code{x} for completeness, for fractional-numeric-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_frc_mvc()}: Checks \code{x} for completeness, for fractional-numeric-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_frc_scl()}: Checks \code{x} for completeness, for fractional-numeric-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_frc_vec()}: Checks \code{x} for completeness, for fractional-numeric-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_frc_vls()}: Checks \code{x} for completeness, for fractional-numeric-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ind_arr()}: Checks \code{x} for completeness, for indexer-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ind_dtf()}: Checks \code{x} for completeness, for indexer-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ind_gen()}: Checks \code{x} for completeness, for indexer-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ind_mat()}: Checks \code{x} for completeness, for indexer-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ind_mvc()}: Checks \code{x} for completeness, for indexer-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ind_scl()}: Checks \code{x} for completeness, for indexer-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ind_vec()}: Checks \code{x} for completeness, for indexer-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ind_vls()}: Checks \code{x} for completeness, for indexer-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_lgl_arr()}: Checks \code{x} for completeness, for logical-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_lgl_dtf()}: Checks \code{x} for completeness, for -logicalness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_lgl_gen()}: Checks \code{x} for completeness, for logical-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_lgl_mat()}: Checks \code{x} for completeness, for logical-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_lgl_mvc()}: Checks \code{x} for completeness, for logical-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_lgl_scl()}: Checks \code{x} for completeness, for logical-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_lgl_vec()}: Checks \code{x} for completeness, for logical-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_lgl_vls()}: Checks \code{x} for completeness, for logical-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_neg_arr()}: Checks \code{x} for completeness, for negative-numeric-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_neg_dtf()}: Checks \code{x} for completeness, for negative-numeric-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_neg_gen()}: Checks \code{x} for completeness, for negative-numeric-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_neg_mat()}: Checks \code{x} for completeness, for negative-numeric-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_neg_mvc()}: Checks \code{x} for completeness, for negative-numeric-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_neg_scl()}: Checks \code{x} for completeness, for negative-numeric-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_neg_vec()}: Checks \code{x} for completeness, for negative-numeric-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_neg_vls()}: Checks \code{x} for completeness, for negative-numeric-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ngw_arr()}: Checks \code{x} for completeness, for negative-whole-number-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ngw_dtf()}: Checks \code{x} for completeness, for negative-whole-number-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ngw_gen()}: Checks \code{x} for completeness, for negative-whole-number-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ngw_mat()}: Checks \code{x} for completeness, for negative-whole-number-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ngw_mvc()}: Checks \code{x} for completeness, for negative-whole-number-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ngw_scl()}: Checks \code{x} for completeness, for negative-whole-number-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ngw_vec()}: Checks \code{x} for completeness, for negative-whole-number-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ngw_vls()}: Checks \code{x} for completeness, for negative-whole-number-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nng_arr()}: Checks \code{x} for completeness, for non-negative-numeric-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nng_dtf()}: Checks \code{x} for completeness, for non-negative-numeric-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nng_gen()}: Checks \code{x} for completeness, for non-negative-numeric-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nng_mat()}: Checks \code{x} for completeness, for non-negative-numeric-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nng_mvc()}: Checks \code{x} for completeness, for non-negative-numeric-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nng_scl()}: Checks \code{x} for completeness, for non-negative-numeric-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nng_vec()}: Checks \code{x} for completeness, for non-negative-numeric-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nng_vls()}: Checks \code{x} for completeness, for non-negative-numeric-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nnw_arr()}: Checks \code{x} for completeness, for non-negative-whole-number-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nnw_dtf()}: Checks \code{x} for completeness, for non-negative-whole-number-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nnw_gen()}: Checks \code{x} for completeness, for non-negative-whole-number-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nnw_mat()}: Checks \code{x} for completeness, for non-negative-whole-number-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nnw_mvc()}: Checks \code{x} for completeness, for non-negative-whole-number-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nnw_scl()}: Checks \code{x} for completeness, for non-negative-whole-number-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nnw_vec()}: Checks \code{x} for completeness, for non-negative-whole-number-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nnw_vls()}: Checks \code{x} for completeness, for non-negative-whole-number-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nps_arr()}: Checks \code{x} for completeness, for non-positive-numeric-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nps_dtf()}: Checks \code{x} for completeness, for non-positive-numeric-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nps_gen()}: Checks \code{x} for completeness, for non-positive-numeric-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nps_mat()}: Checks \code{x} for completeness, for non-positive-numeric-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nps_mvc()}: Checks \code{x} for completeness, for non-positive-numeric-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nps_scl()}: Checks \code{x} for completeness, for non-positive-numeric-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nps_vec()}: Checks \code{x} for completeness, for non-positive-numeric-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nps_vls()}: Checks \code{x} for completeness, for non-positive-numeric-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_npw_arr()}: Checks \code{x} for completeness, for non-positive-whole-number-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_npw_dtf()}: Checks \code{x} for completeness, for non-positive-whole-number-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_npw_gen()}: Checks \code{x} for completeness, for non-positive-whole-number-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_npw_mat()}: Checks \code{x} for completeness, for non-positive-whole-number-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_npw_mvc()}: Checks \code{x} for completeness, for non-positive-whole-number-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_npw_scl()}: Checks \code{x} for completeness, for non-positive-whole-number-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_npw_vec()}: Checks \code{x} for completeness, for non-positive-whole-number-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_npw_vls()}: Checks \code{x} for completeness, for non-positive-whole-number-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nst_arr()}: Checks \code{x} for completeness, for nonsortable-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nst_dtf()}: Checks \code{x} for completeness, for nonsortable-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nst_gen()}: Checks \code{x} for completeness, for nonsortable-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nst_mat()}: Checks \code{x} for completeness, for nonsortable-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nst_mvc()}: Checks \code{x} for completeness, for nonsortable-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nst_scl()}: Checks \code{x} for completeness, for nonsortable-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nst_vec()}: Checks \code{x} for completeness, for nonsortable-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_nst_vls()}: Checks \code{x} for completeness, for nonsortable-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_num_arr()}: Checks \code{x} for completeness, for numeric-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_num_dtf()}: Checks \code{x} for completeness, for numeric-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_num_gen()}: Checks \code{x} for completeness, for numeric-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_num_mat()}: Checks \code{x} for completeness, for numeric-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_num_mvc()}: Checks \code{x} for completeness, for numeric-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_num_scl()}: Checks \code{x} for completeness, for numeric-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_num_vec()}: Checks \code{x} for completeness, for numeric-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_num_vls()}: Checks \code{x} for completeness, for numeric-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_odd_arr()}: Checks \code{x} for completeness, for odd-whole-number-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_odd_dtf()}: Checks \code{x} for completeness, for odd-whole-number-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_odd_gen()}: Checks \code{x} for completeness, for odd-whole-number-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_odd_mat()}: Checks \code{x} for completeness, for odd-whole-number-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_odd_mvc()}: Checks \code{x} for completeness, for odd-whole-number-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_odd_scl()}: Checks \code{x} for completeness, for odd-whole-number-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_odd_vec()}: Checks \code{x} for completeness, for odd-whole-number-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_odd_vls()}: Checks \code{x} for completeness, for odd-whole-number-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ord_arr()}: Checks \code{x} for completeness, for ordered-factor-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ord_dtf()}: Checks \code{x} for completeness, for ordered-factor-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ord_gen()}: Checks \code{x} for completeness, for ordered-factor-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ord_mat()}: Checks \code{x} for completeness, for ordered-factor-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ord_mvc()}: Checks \code{x} for completeness, for ordered-factor-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ord_scl()}: Checks \code{x} for completeness, for ordered-factor-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ord_vec()}: Checks \code{x} for completeness, for -ordered-factorness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ord_vls()}: Checks \code{x} for completeness, for ordered-factor-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pct_arr()}: Checks \code{x} for completeness, for percent-valued-numeric-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pct_dtf()}: Checks \code{x} for completeness, for percent-valued-numeric-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pct_gen()}: Checks \code{x} for completeness, for percent-valued-numeric-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pct_mat()}: Checks \code{x} for completeness, for percent-valued-numeric-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pct_mvc()}: Checks \code{x} for completeness, for percent-valued-numeric-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pct_scl()}: Checks \code{x} for completeness, for percent-valued-numeric-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pct_vec()}: Checks \code{x} for completeness, for percent-valued-numeric-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pct_vls()}: Checks \code{x} for completeness, for percent-valued-numeric-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pos_arr()}: Checks \code{x} for completeness, for positive-numeric-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pos_dtf()}: Checks \code{x} for completeness, for positive-numeric-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pos_gen()}: Checks \code{x} for completeness, for positive-numeric-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pos_mat()}: Checks \code{x} for completeness, for positive-numeric-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pos_mvc()}: Checks \code{x} for completeness, for positive-numeric-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pos_scl()}: Checks \code{x} for completeness, for positive-numeric-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pos_vec()}: Checks \code{x} for completeness, for positive-numeric-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_pos_vls()}: Checks \code{x} for completeness, for positive-numeric-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ppn_arr()}: Checks \code{x} for completeness, for proportion-valued-numeric-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ppn_dtf()}: Checks \code{x} for completeness, for proportion-valued-numeric-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ppn_gen()}: Checks \code{x} for completeness, for proportion-valued-numeric-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ppn_mat()}: Checks \code{x} for completeness, for proportion-valued-numeric-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ppn_mvc()}: Checks \code{x} for completeness, for proportion-valued-numeric-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ppn_scl()}: Checks \code{x} for completeness, for proportion-valued-numeric-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ppn_vec()}: Checks \code{x} for completeness, for proportion-valued-numeric-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_ppn_vls()}: Checks \code{x} for completeness, for proportion-valued-numeric-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_psw_arr()}: Checks \code{x} for completeness, for positive-whole-number-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_psw_dtf()}: Checks \code{x} for completeness, for positive-whole-number-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_psw_gen()}: Checks \code{x} for completeness, for positive-whole-number-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_psw_mat()}: Checks \code{x} for completeness, for positive-whole-number-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_psw_mvc()}: Checks \code{x} for completeness, for positive-whole-number-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_psw_scl()}: Checks \code{x} for completeness, for positive-whole-number-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_psw_vec()}: Checks \code{x} for completeness, for positive-whole-number-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_psw_vls()}: Checks \code{x} for completeness, for positive-whole-number-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_srt_arr()}: Checks \code{x} for completeness, for sortable-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_srt_dtf()}: Checks \code{x} for completeness, for sortable-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_srt_gen()}: Checks \code{x} for completeness, for sortable-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_srt_mat()}: Checks \code{x} for completeness, for sortable-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_srt_mvc()}: Checks \code{x} for completeness, for sortable-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_srt_scl()}: Checks \code{x} for completeness, for sortable-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_srt_vec()}: Checks \code{x} for completeness, for sortable-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_srt_vls()}: Checks \code{x} for completeness, for sortable-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_str_arr()}: Checks \code{x} for completeness, for string-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_str_dtf()}: Checks \code{x} for completeness, for string-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_str_gen()}: Checks \code{x} for completeness, for string-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_str_mat()}: Checks \code{x} for completeness, for string-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_str_mvc()}: Checks \code{x} for completeness, for string-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_str_scl()}: Checks \code{x} for completeness, for string-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_str_vec()}: Checks \code{x} for completeness, for string-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_str_vls()}: Checks \code{x} for completeness, for string-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_uno_arr()}: Checks \code{x} for completeness, for unordered-factor-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_uno_dtf()}: Checks \code{x} for completeness, for unordered-factor-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_uno_gen()}: Checks \code{x} for completeness, for unordered-factor-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_uno_mat()}: Checks \code{x} for completeness, for unordered-factor-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_uno_mvc()}: Checks \code{x} for completeness, for unordered-factor-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_uno_scl()}: Checks \code{x} for completeness, for unordered-factor-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_uno_vec()}: Checks \code{x} for completeness, for unordered-factor-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_uno_vls()}: Checks \code{x} for completeness, for unordered-factor-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_whl_arr()}: Checks \code{x} for completeness, for whole-number-ness, and for array-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_whl_dtf()}: Checks \code{x} for completeness, for whole-number-ness, and for data.frame-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_whl_gen()}: Checks \code{x} for completeness, for whole-number-ness, and for generic-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_whl_mat()}: Checks \code{x} for completeness, for whole-number-ness, and for matrix-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_whl_mvc()}: Checks \code{x} for completeness, for whole-number-ness, and for multivec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_whl_scl()}: Checks \code{x} for completeness, for whole-number-ness, and for scalar-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_whl_vec()}: Checks \code{x} for completeness, for whole-number-ness, and for vec-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

\item \code{cmp_whl_vls()}: Checks \code{x} for completeness, for whole-number-ness, and for vector-list-ness subject to any count/value restrictions in \code{...}. Returns a logical scalar.

}}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{ll}{  \verb{.max, .maxr, .maxc}   \tab Scalar maximum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.min, .minr, .minc}   \tab Scalar minimum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.lt, .le, .ge, .gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively. \cr   \tab   \cr
  \verb{.n, .nr, .nc}         \tab A vector of valid numbers of elements, rows, and columns, respectively.                                                                    \cr   \tab   \cr
  \code{.vals}                \tab A vector of valid values.                                                                                                                                 }
}

\examples{
cmp_mmm_ccc_funs()
cmp_mmm_ccc(letters, "ch1", "vec")
cmp_mmm_ccc(letters, "str", "scl")
cmp_ch1_vec(letters)
cmp_str_scl("a")
}
\seealso{
Other props: 
\code{\link{mmm_ccc_PROPS}()},
\code{\link{sss_ccc_PROPS}()},
\code{\link{unq_mmm_ccc_PROPS}()}
}
\concept{props}
