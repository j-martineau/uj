% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oxford.R
\name{Oxford}
\alias{Oxford}
\alias{ox}
\alias{ox_n}
\alias{ox_and}
\alias{ox_or}
\alias{ox_nor}
\alias{ox_either}
\alias{ox_neither}
\alias{ox_all}
\alias{ox_any}
\alias{ox_none}
\alias{ox_some}
\alias{ox_exactly}
\alias{ox_less}
\alias{ox_more}
\alias{ox_fewer}
\alias{ox_greater}
\alias{ox_atleast}
\alias{ox_atmost}
\alias{ox_nogreater}
\alias{ox_nofewer}
\alias{ox_nomore}
\alias{ox_noless}
\alias{ox_ormore}
\alias{ox_orgreater}
\alias{ox_orless}
\alias{ox_orfewer}
\title{Oxford comma separated lists.}
\usage{
ox(..., conj = "and", pref = "", quote = 0)

ox_n(..., conj = "and", comp = "", quote = 0, n = 1, comp.first = TRUE)

ox_and(..., pref = NULL)

ox_or(..., pref = NULL)

ox_nor(..., pref = "neither")

ox_either(...)

ox_neither(...)

ox_all(..., conj = "and")

ox_any(..., conj = "and")

ox_none(..., conj = "or")

ox_some(..., conj = "and")

ox_exactly(..., conj = "or", n = 1)

ox_less(..., conj = "and", n = 2)

ox_more(..., conj = "and", n = 1)

ox_fewer(..., conj = "and", n = 2)

ox_greater(..., conj = "and", n = 2)

ox_atleast(..., conj = "and", n = 1)

ox_atmost(..., conj = "and", n = 1)

ox_nogreater(..., conj = "and", n = 1)

ox_nofewer(..., conj = "and", n = 1)

ox_nomore(..., conj = "and", n = 1)

ox_noless(..., conj = "and", n = 1)

ox_ormore(..., conj = "and", n = 1)

ox_orgreater(..., conj = "and", n = 1)

ox_orless(..., conj = "and", n = 1)

ox_orfewer(..., conj = "and", n = 1)
}
\arguments{
\item{...}{Any number of arguments coerceable to mode character.}

\item{conj}{The conjunction to use between the next to last and last elements
of the list. See details.}

\item{pref}{A pref to prepend to the resulting character scalar. See the
\bold{Details} section for more information}

\item{comp}{A character scalar used for comparing to \code{n}, such as
\code{'at least'} or \code{'or fewer'}.}

\item{n}{A integer scalar.}

\item{comp.first}{A logical scalar used to determine whether \code{comp} is
placed in front of \code{n} rather than after \code{n}..}
}
\value{
A character scalar containing all atomic elements of \code{...}
formatted as an Oxford-comma separated list.
}
\description{
Create a variety of Oxford comma separated lists.
}
\details{
\strong{\code{ox}}
\cr Creates an Oxford separated list with \code{conj} as the conjunction
separating the next to last and last elements the list and preceded by the
prefix \code{pref}.
\cr \cr
\strong{\code{ox_and} and \code{ox_or}}
\cr Create \code{'and'} and \code{'or'} separated Oxford-comma lists,
respectively
\cr \cr
\strong{\code{ox_nor}}
\cr Creates a \code{'nor'} separated Oxford comma list with default (but
changeable) prefix of \code{'neither'}.
\cr \cr
\strong{\code{ox_either} and \code{ox_neither}}
\cr Create \code{'either'} and \code{'neither'} prefixed Oxford comma
lists, respectively, with default (but changeable) conjunction of \code{'or'}
and \code{'nor'}, respectively.
\cr \cr
\strong{\code{ox_all}, \code{ox_any}, \code{ox_none}, and \code{ox_some}}
\cr Create \code{'all of'}, \code{'any of'}, \code{'none of'}, and
\code{'some of'} prefixed Oxford comma lists, (respectively).
\cr\cr
\strong{\code{ox_n}}
\cr Creates Oxford comma lists specifying a number (\code{n}), a comparison
(\code{comp}), and whether that comparison comes before or after the list
(\code{comp.first}) to create a list of the form \code{'{n} {comp} of
  {list}'} or of the form \code{'{comp} {n} of {list}'} where \code{list} is
the Oxford comma list with the next to last and last elements separated by
\code{conj}.
\cr\cr
\strong{\code{ox_exactly}, \code{ox_less}, \code{ox_more}, \code{ox_fewer},
\code{ox_greater, ox_atleast}, \code{ox_atmost}, \code{ox_nogreater},
\code{ox_nofewer}, \code{ox_nomore}, and \code{ox_noless}}
\cr These functions call \code{ox_n} with \code{comp.first = TRUE} and,
respectively, \code{comp} equal to \code{'exactly'}, \code{'less than'},
\code{'more than'}, \code{'fewer than'}, \code{'greater than'}, \code{'at
  least'}, \code{'at most'}, \code{'no greater than'}, \code{'no fewer
  than'}, \code{'new more than'}, and \code{'no less than'}, respectively.
\cr\cr
\strong{\code{ox_ormore}, \code{ox_orgreater}, \code{ox_orless}, and
\code{ox_orfewer}}
\cr These functions call \code{ox_n} with \code{comp.first = FALSE} and,
respectively, \code{comp} equal to \code{'or more'}, \code{'or greater'},
\code{'or less'}, and \code{'or fewer'}, respectively.
}
\examples{
Fruits <- c("apples", "bananas", "oranges")

ox(Fruits)
ox("apples", "bananas", "orange")
ox_or(Fruits)
ox_or(Fruits, pref = "neither")
ox_nor(Fruits, pref = "")
ox_nor(Fruits, pref = NULL)

ox(Fruits)
ox(Fruits, conj = "or")
ox(Fruits, conj = "nor")

ox(Fruits, pref = "", conj = "nor")
ox(Fruits, pref = "either", conj = "or")
ox(Fruits, pref = "all of", conj = "and")

ox_either(Fruits)
ox_either("apples", "bananas", "oranges")

ox_neither(Fruits)
ox_neither("apples", "bananas", "oranges")

ox_all(Fruits)
ox_all("apples", "bananas", "oranges")

ox_none(Fruits)
ox_none("apples", "bananas", "oranges")

ox_n(Fruits, n = 1)
ox_n(Fruits, conj = "and", n = 2, comp = "from among")
ox_n(Fruits, conj = "and", n = 2, comp = "at least", comp.first = TRUE)

ox_exactly(Fruits, n = 2)
ox_less(Fruits, n = 2)
ox_more(Fruits, n = 2)
ox_fewer(Fruits, n = 2)
ox_greater(Fruits, n = 2)
ox_atleast(Fruits, n = 2)
ox_atmost(Fruits, n = 2)
ox_nogreater(Fruits, n = 2)
ox_nofewer(Fruits, n = 2)
ox_nomore(Fruits, n = 2)
ox_noless(Fruits, n = 2)
ox_ormore(Fruits, n = 2)
ox_orgreater(Fruits, n = 2)
ox_orless(Fruits, n = 2)
ox_orfewer(Fruits, n = 2)
}
\seealso{
Other strings: 
\code{\link{delim}},
\code{\link{ipat}()},
\code{\link{pgrid}()},
\code{\link{spacing}},
\code{\link{ss}()},
\code{\link{tocase}()},
\code{\link{weave}()}
}
\concept{strings}
