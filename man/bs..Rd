% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bs.R
\name{bs.}
\alias{bs.}
\alias{u}
\alias{up}
\alias{dn}
\alias{spf}
\alias{mid}
\alias{levs}
\title{Wraps of functions from package \code{base}.}
\usage{
bs.()

u(x)

up(x)

dn(x)

spf(fmt, ...)

mid(x, start, stop)

levs(x)
}
\arguments{
\item{x}{A numeric object (\code{up} and \code{down}), a character object
(\code{spf}), an unordered or ordered factor object (\code{levs}), or any object \code{u}}

\item{fmt}{a character vector of format strings, each of up to 8192 bytes.}

\item{...}{arguments to be passed to methods.}
}
\value{
A numeric object (\code{up} and \code{dn}) or a character object
(\code{spf}, \code{mid}, and \code{levs}).
}
\description{
The following table describes thin wraps in this group of
functions:\tabular{ll}{
WRAPPER       \tab FUNCTION                                             \cr
\code{up}     \tab \code{\link[base]{ceiling}}                          \cr
\code{dn}     \tab \code{\link[base]{floor}}                            \cr
\code{spf}    \tab \code{\link[base]{sprintf}}                          \cr
\code{mid}    \tab \code{\link[base]{substr}}                           \cr
\code{levs}   \tab \code{\link[base]{levels}}                             }
}
\details{
These are generic functions: methods can be defined for them
  individually or via the \code{\link[base:S3groupGeneric]{Math}} group
  generic.

  Note that for rounding off a 5, the IEC 60559 standard (see also
  \sQuote{IEEE 754}) is expected to be used, \sQuote{\emph{go to the even digit}}.
  Therefore \code{round(0.5)} is \code{0} and \code{round(-1.5)} is
  \code{-2}.  However, this is dependent on OS services and on
  representation error (since e.g.\ifelse{latex}{\out{~}}{ }{}\code{0.15} is not represented
  exactly, the rounding rule applies to the represented number and not
  to the printed number, and so \code{round(0.15, 1)} could be either
  \code{0.1} or \code{0.2}).

  Rounding to a negative number of digits means rounding to a power of
  ten, so for example \code{round(x, digits = -2)} rounds to the nearest
  hundred.

  For \code{signif} the recognized values of \code{digits} are
  \code{1...22}, and non-missing values are rounded to the nearest
  integer in that range.  Complex numbers are rounded to retain the
  specified number of digits in the larger of the components.  Each
  element of the vector is rounded individually, unlike printing.

  These are all primitive functions.
}
\section{Functions}{
\itemize{
\item \code{u()}: Thin wrapper for \code{\link[base]{unique}}. Differs from
\code{\link{uv}} in that \code{uv} takes an arbitrary number of parameters
and \link[a]{atomizes} them before getting unique atomic values.

\item \code{up()}: Round up to nearest integer.

\item \code{dn()}: Round down to nearest integer.

\item \code{spf()}: Format inlays into strings.

\item \code{mid()}: Extract substring(s).

\item \code{levs()}: Get levels of an unordered factor or ordered factor object.

}}
\note{
The S4 version of \code{substring<-} ignores \code{last}; this version
  does not.

  These functions are often used with \code{\link[base]{nchar}} to truncate a
  display.  That does not really work (you want to limit the width, not
  the number of characters, so it would be better to use
  \code{\link[base]{strtrim}}), but at least make sure you use the default
  \code{nchar(type = "c")}.
}
\section{S4 methods}{

  These are all (internally) S4 generic.

  \code{ceiling}, \code{floor} and \code{trunc} are members of the
  \code{\link[=S4groupGeneric]{Math}} group generic.  As an S4
  generic, \code{trunc} has only one argument.

  \code{round} and \code{signif} are members of the
  \code{\link[=S4groupGeneric]{Math2}} group generic.



  These are all (internally) S4 generic.

  \code{ceiling}, \code{floor} and \code{trunc} are members of the
  \code{\link[=S4groupGeneric]{Math}} group generic.  As an S4
  generic, \code{trunc} has only one argument.

  \code{round} and \code{signif} are members of the
  \code{\link[=S4groupGeneric]{Math2}} group generic.

}

\section{Warning}{

  The realities of computer arithmetic can cause unexpected results,
  especially with \code{floor} and \code{ceiling}.  For example, we
  \sQuote{know} that \code{floor(log(x, base = 8))} for \code{x = 8} is
  \code{1}, but \code{0} has been seen on an \R platform.  It is
  normally necessary to use a tolerance.

  Rounding to decimal digits in binary arithmetic is non-trivial (when
  \code{digits != 0}) and may be surprising.  Be aware that most decimal
  fractions are \emph{not} exactly representable in binary double precision.
  In \R 4.0.0, the algorithm for \code{round(x, d)}, for \eqn{d > 0}, has
  been improved to \emph{measure} and round \dQuote{to nearest even},
  contrary to earlier versions of \R (or also to \code{\link[base]{sprintf}()}
  or \code{\link[base]{format}()} based rounding).



  The realities of computer arithmetic can cause unexpected results,
  especially with \code{floor} and \code{ceiling}.  For example, we
  \sQuote{know} that \code{floor(log(x, base = 8))} for \code{x = 8} is
  \code{1}, but \code{0} has been seen on an \R platform.  It is
  normally necessary to use a tolerance.

  Rounding to decimal digits in binary arithmetic is non-trivial (when
  \code{digits != 0}) and may be surprising.  Be aware that most decimal
  fractions are \emph{not} exactly representable in binary double precision.
  In \R 4.0.0, the algorithm for \code{round(x, d)}, for \eqn{d > 0}, has
  been improved to \emph{measure} and round \dQuote{to nearest even},
  contrary to earlier versions of \R (or also to \code{\link[base]{sprintf}()}
  or \code{\link[base]{format}()} based rounding).



  The format string is passed down the OS's \code{sprintf} function, and
  incorrect formats can cause the latter to crash the \R process .  \R
  does perform sanity checks on the format, but not all possible user
  errors on all platforms have been tested, and some might be terminal.

  The behaviour on inputs not documented here is \sQuote{undefined},
  which means it is allowed to differ by platform.

}

\examples{
round(.5 + -2:4) # IEEE / IEC rounding: -2  0  0  2  2  4  4
## (this is *good* behaviour -- do *NOT* report it as bug !)

( x1 <- seq(-2, 4, by = .5) )
round(x1) #-- IEEE / IEC rounding !
x1[trunc(x1) != floor(x1)]
x1[round(x1) != floor(x1 + .5)]
(non.int <- ceiling(x1) != floor(x1))

x2 <- pi * 100^(-1:3)
round(x2, 3)
signif(x2, 3)
}
\references{
Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988)
  \emph{The New S Language}.  Wadsworth & Brooks/Cole.

  The ISO/IEC/IEEE 60559:2011 standard is available for money from
  \url{https://www.iso.org}.

  The IEEE 754:2008 standard is more openly documented, e.g, at
  \url{https://en.wikipedia.org/wiki/IEEE_754}.
}
\seealso{
Other wraps: 
\code{\link{dp.}()},
\code{\link{dt.}()},
\code{\link{ggx.}()},
\code{\link{rd.}()},
\code{\link{sc.}()},
\code{\link{tb.}()}
}
\author{
Original code by Jonathan Rougier.
}
\concept{wraps}
