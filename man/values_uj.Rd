% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/values.R
\name{values_uj}
\alias{values_uj}
\alias{exist}
\alias{vget}
\alias{vset}
\title{Objects in environments of calling functions}
\usage{
values_uj()

exist(name, err = T, gens = 1)

vget(name, err = T, gens = 1)

vset(name, val, gens = 1)
}
\arguments{
\item{name}{A character scalar giving the name of an object.}

\item{err}{A logical scalar whether to throw an error if the object specified
by \code{name} does not exist (i.e., rather than returning \code{FALSE}).}

\item{gens}{The number of generations back in the function call stack to go.}

\item{val}{A value to place into the object specified by \code{name}.}
}
\value{
\code{exist} returns a logical scalar indicating whether an object
named \code{name} exists in the environment of the calling function
\code{gens} generations back. \code{vget} returns the value of an object
named \code{name} in the function \code{gens} generations back. \code{vset}
sets the value of an object named \code{name} in the function \code{gens}
generations back to the value \code{val}.
}
\description{
Objects in environments of calling functions
}
\section{Functions}{
\itemize{
\item \code{exist}: Check for the existence of an object in the environment
of a specific calling function.

\item \code{vget}: get the value of an object in the environment of a
specific calling function.

\item \code{vset}: set the value of an object in the environment of a
specific calling function.
}}

\examples{
fun.a <- function() {A <- 0; fun.b()}
fun.b <- function() {B <- 1; fun.c()}
fun.c <- function() {
  cat("\n callstack(): " , paste0("'", callstack(), "'"))
  cat("\n caller(1)  : '", caller(1), "'")
  cat("\n caller(2)  : '", caller(2), "'")
  cat("\n exist('A', err = F, gens = 1): ", exist('A', err = F, gens = 1))
  cat("\n exist('A', err = F, gens = 2): ", exist('A', err = F, gens = 2))
  cat("\n exist('B', err = F, gens = 1): ", exist('B', err = F, gens = 1))
  cat("\n exist('B', err = F, gens = 2): ", exist('B', err = F, gens = 2))
  cat("\n vget('A', err = F, gens = 2) : ", vget('A', err = F, gens = 2))
  cat("\n vget('A', err = F, gens = 1) : ", vget('A', err = F, gens = 1))
  cat("\n vget('B', err = F, gens = 2) : ", vget('B', err = F, gens = 2))
  cat("\n vget('B', err = F, gens = 1) : ", vget('B', err = F, gens = 1))
  vSet('A', 'A', gens = 2)
  vSet('B', 'B', gens = 1)
  cat("\n vget('A', gens = 2) : ", vget('A', err = F, gens = 2))
  cat("\n vget('B', gens = 1) : ", vget('B', err = F, gens = 1))
}
fun.a()
}
\seealso{
Other meta: 
\code{\link{av_uj}()},
\code{\link{bin_uj}()},
\code{\link{callers_uj}()},
\code{\link{case_uj}()},
\code{\link{dots_uj}()},
\code{\link{ex_uj}()},
\code{\link{failsafe_uj}()},
\code{\link{fork_uj.}()},
\code{\link{fx_uj}()},
\code{\link{is_failsafe_uj}()},
\code{\link{is_unique_uj}()},
\code{\link{logicals_uj}()},
\code{\link{make_uj}()},
\code{\link{n_uj}},
\code{\link{na_vals_uj}()},
\code{\link{names_uj}()},
\code{\link{os_uj}()},
\code{\link{ply_uj}()},
\code{\link{put_uj}()},
\code{\link{reclass_uj}()},
\code{\link{recycling_uj}()},
\code{\link{reps_uj}()},
\code{\link{run_uj}()},
\code{\link{swap_uj}()},
\code{\link{x_uj}()},
\code{\link{xb_uj}()}
}
\concept{meta}
