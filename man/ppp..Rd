% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ppp.R
\name{ppp.}
\alias{ppp.}
\alias{ppp}
\alias{ippp}
\alias{ppp_all}
\alias{ppp_vals}
\alias{nll_or}
\alias{nas_or}
\alias{ppp_funs}
\alias{ppp_defs}
\alias{is_ppp_fun}
\alias{is_valid_ppp}
\alias{ppp_from_combo}
\alias{combos_from_ppp}
\alias{ppp_verbose}
\alias{ppp_concise}
\alias{alt_ppp_concise}
\title{All purpose property checking}
\usage{
ppp.()

ppp(x)

ippp(x, ppp, ...)

ppp_all(ppp, valid = ppp_vals())

ppp_vals(as.dtf = F)

nll_or(x, ppp, ...)

nas_or(x, ppp, ...)

ppp_funs(as.dtf = F)

ppp_defs()

is_ppp_fun(x)

is_valid_ppp(ppp)

ppp_from_combo(ppp, valid = ppp_vals())

combos_from_ppp(ppp, valid = ppp_vals())

ppp_verbose(ppp = NULL, print = TRUE)

ppp_concise(ppp)

alt_ppp_concise(ppp)
}
\arguments{
\item{x}{An R object.}

\item{ppp}{\link[chr_scl]{Character scalar} containing one or more values
from \code{ppp_vals()} separated by pipes and/or underscores. Combinations
of properties can be specified by separating them with underscores.
Separating properties or combinations of properties with pipes will result
in a value of \code{TRUE} if any of them applies to \code{x}.}

\item{...}{Additional arguments to \code{\link{meets}} containing value and
element/row/column count restrictions.}

\item{valid}{\link[chr_vec]{Character vec} containing all properties
considered valid.}

\item{as.dtf}{\link[cmp_lgl_scl]{Complete logical scalar} indicating whether
to return the result as a dtf with column 1 containing property values
and column 2 containing the property families.}

\item{print}{\link[lgl_scl]{Logical scalar} indicating whether to print the
property definition to the console.}
}
\value{
\code{ppp}, \code{ppp_all}, \code{ppp_vals}, \code{pop_funs},
\code{ppp_from_combo}, and \code{combos_from_ppp}, return a character
vector.
\cr\cr
\code{ppp_concise} and \code{alt_ppp_concise} return a character scalar.
\cr\cr
\code{ippp}, \code{nll_or}, \code{nas_or}, \code{is_ppp_fun}, and
\code{is_valid_ppp} return a logical scalar.

Logical scalar.
}
\description{
This set of functions provide utilities that bring together
these seven families of properties defined by this package:\tabular{ll}{
PROPERTY          \tab PROPERTY                                         \cr
FAMILY            \tab TYPE                                             \cr
\code{\link{ccc}} \tab Extended class                                   \cr
\code{\link{ddd}} \tab Defined dimensionality                           \cr
\code{\link{eee}} \tab Effective dimensionality                         \cr
\code{\link{fff}} \tab Form                                             \cr
\code{\link{mmm}} \tab Extended mode                                    \cr
\code{\link{sss}} \tab State of completeness                            \cr
\code{\link{ttt}} \tab Fundamental type                                   }
\strong{Individual Property Specifications}
\cr In this package, all individual property specifications are scalars
containing exactly 3 characters (e.g., \code{'ord'}, \code{'dtf'},
\code{'d1D'}, or \code{'rct'}).
\cr\cr
\strong{Combination/Conjunctive Property Specifications}
\cr Specifications for properties that must co-occur are constructed by
delimiting multiple individual properties with underscores (e.g., the
properties \code{'ord'}, \code{'dtf'}, \code{'d1D'}, and \code{'rct'} could
be specified to occur together using the combination/conjunctive property
specification \code{'ord_dtf_d1D_rct'} or an equivalent
underscore-delimited permutation.
\cr\cr
\strong{Alternative/Compensatory Property Specifications}
\cr Specifications for alternative/compensatory properties give a way to
indicate that if any one (individual or combination) property is satisfied
the entire specification is satisfied. They are constructed by
pipe-delimiting multiple individual or combination properties. For example,
the specification \code{'ord|dtf_d1D||dtf_rct'} would be satisfied by an
object with property \code{'ord'}, by an object with the combined property
\code{'dtf_d1D'}, or by an object with the combined property
\code{'dtf_rct'}.
\cr\cr
How functions are related to property families and property specifications
is explained in the sections entitled \strong{Universal Property
Functions}, \strong{Individual Property Functions}, and \strong{Combination
Property Functions}.
}
\section{Functions}{
\itemize{
\item \code{ppp()}: Get all single properties that apply to \code{x}.

\item \code{ippp()}: Evaluates whether any (combination) property in \code{ppp}
is applicable to \code{x}, subject to any additional restrictions in
\code{...}.

\item \code{ppp_all()}: Extract unique property values from \code{ppp} by splitting
along pipes (\code{"|"}) and underscores.

\item \code{ppp_vals()}: Get a vector of all possible single property values in all
property families.

\item \code{nll_or()}: Evaluate whether \code{x} is \code{NULL} or matches one
or more property (combos) specified in \code{ppp}.

\item \code{nas_or()}: Evaluate whether \code{x} is an atomic scalar \code{NA}
or matches one or more property (combos) specified in \code{ppp}.

\item \code{ppp_funs()}: List all valid property function names.

\item \code{ppp_defs()}: Get a dtf with 4 columns: property family (Family),
property value (Value), short property definition (Short), and long
property definition (Long).

\item \code{is_ppp_fun()}: Evaluate \code{x} to see if it the name of a property
function.

\item \code{is_valid_ppp()}: Evaluate whether \code{ppp} is a character scalar of
values from \code{ppp_vals} separated by pipes ('|') and/or underscores.
Always returns either \code{TRUE} or \code{FALSE}.

\item \code{ppp_from_combo()}: Extract each single property value from a single combination
property by splitting along underscores.

\item \code{combos_from_ppp()}: Extract each property combination from \code{ppp} by
splitting along pipes (\code{"|"}).

\item \code{ppp_verbose()}: Get the data.frame from \code{ppp_defs()}. If \code{ppp}
contains a single valid property value (no combination values), extracts
the associated row from the data.frame and creates a character scalar with
the property family, property value, short property definition, and long
property definition. If \code{print = TRUE}, prints the result (either the
data.frame itself or the extracted row) to the console, otherwise, returns
the result.

\item \code{ppp_concise()}: Take an individual or combination/conjunctive property
specification and expand it using plain, but concise, language. To get a
verbose definition of any individual property, use \code{ppp_verbose}.

\item \code{alt_ppp_concise()}: Take one or more property combos separated by pipes (each
combo may be a individual property) and expands each using plain, but
concise, language, separating the multiple expansions with \code{'OR'}. To
get a verbose definition of any individual property, use
\code{ppp_verbose}.

}}
\section{Universal Property Functions}{
 Property functions addressing
\emph{all} property families are the following: \tabular{ll}{
FUNCTION                 \tab WHAT THE                                \cr
NAME                     \tab FUNCTION DOES                           \cr
\code{ppp}               \tab Get all properties of all property families
applicable to an object.                \cr
\code{ippp}              \tab Evaluate whether an object satisfies the
property specification in \code{ppp}
subject to any additional restrictions
supplied in \code{...}.                 \cr
\code{nll_or}            \tab Evaluate whether an object is either
\code{NULL} or satisfies the property
specification in argument \code{ppp}
subject to any additional restrictions in
\code{...}.                             \cr
\code{nas_or}            \tab Evaluate whether an object is either scalar
\code{NA} or satisfies the property
specification in argument \code{ppp}
subject to any additional restrictions in
\code{...}.                             \cr
\code{ppp_vals}          \tab Get all
possible individual properties from all
property families and all possible
combination/conjunctive properties as
checked by combined property functions
(see the \emph{combined property functions}
section).                               \cr
\code{ppp_all}           \tab Get all constituent individual properties
from the property specification in argument
\code{ppp}.                             \cr
\code{ppp_funs}          \tab Gets the names of all property functions
that check for a single property or a
combined property without checking for any
additional restrictions.                \cr
\code{ppp_defs}          \tab Get a data frame defining all individual
properties of all property families.    \cr
\code{is_ppp_fun}        \tab Evaluates whether a character scalar is the
name of a property function (those listed
by \code{ppp_funs}).                    \cr
\code{is_valid_ppp}      \tab Evaluates a character scalar property
specification for validity (i.e., does it
contain only single properties, valid
combination properties, and/or valid
alternate properties).                  \cr
\code{ppp_from_combo}    \tab Extract each individual property value from
a combination/conjunctive property
specification. \cr
\code{combos_from_ppp}   \tab Extracts each individual or combination
property specification from an
alternative/compensatory property
specification.                          \cr
\code{ppp_verbose}       \tab Get a verbose definition of an individual
property specification.                 \cr
\code{ppp_concise}       \tab Get a plain-language, concise definition of
an individual or combination/conjunctive
property specification.                 \cr
\code{alt_ppp_concise}   \tab Get a plain-language, concise definition of
an alternative/compensatory property
specification.                            }
}

\section{Individual Property Functions}{
 Property functions associated with a
single property family take the following forms where \code{xxx} is a
placeholder for an individual property and \code{zzz} is a placeholder for
a property family: \tabular{ll}{
FUNCTION          \tab WHAT THE                                         \cr
NAME FORMAT       \tab FUNCTION DOES                                    \cr
\code{xxx}        \tab Get properties from the property family represented
by \code{xxx} applicable to an object.           \cr
\code{izzz}       \tab Evaluate whether an object has one or more specific
properties from the property family represented by
\code{zzz}, subject to any additional restrictions
supplied in \code{...}.                          \cr
\code{zzz_vals}   \tab Get all properties in the property family
represented by \code{zzz}.                         }
}

\section{Combination Property Functions}{
 Property functions associated with a
single property family take the following forms where \code{ccc},
\code{mmm}, and \code{ttt} are placeholders for properties from extended
class, extended mode, and fundamental type property families:\tabular{ll}{
FUNCTION      \tab WHAT THE                                             \cr
NAME FORMAT   \tab FUNCTION DOES                                        \cr
\code{\link[mmm_ccc.]{mmm_ccc}}
\tab Evaluate whether an object is of the extended mode represented by
\code{mmm} and of the extended class represented by \code{ccc}.  \cr
\code{\link[ttt_ccc.]{ttt_ccc}}
\tab Evaluate whether an object is of the fundamental type represented by
\code{ttt} and of the extended class represented by \code{ccc}.  \cr
\code{\link[ttt_mmm.]{ttt_mmm}}
\tab Evaluate whether an object is of the fundamental type represented by
\code{ttt} and of the extended mode represented by \code{mmm}.   \cr
\code{\link[cmp_ccc.]{cmp_ccc}}
\tab Evaluate whether an object is complete (non-empty, atomic,
containing no \code{NA} values). and is of the extended class
represented by \code{ccc}.                                       \cr
\code{\link[cmp_mmm.]{cmp_mmm}}
\tab Evaluate whether an object is complete (implying non-empty and
atomic) and is of the extended mode represented by \code{mmm}.   \cr
\code{\link[cmp_mmm_ccc.]{cmp_mmm_ccc}}
\tab Evaluate whether an object is complete (implying non-empty and
atomic), is of the extended mode represented by \code{mmm}, and is
of the extended class represented by \code{ccc}.                 \cr
\code{\link{mmm_ccc_vals}}
\tab Get all combined extended mode + extended class properties.      \cr
\code{\link{ttt_ccc_vals}}
\tab Get all combined fundamental type + extended class properties.   \cr
\code{\link{ttt_mmm_vals}}
\tab Get combined fundamental type and extended mode properties.      \cr
\code{\link{cmp_ccc_vals}}
\tab Get all combined completeness
and extended class properties.                                   \cr
\code{\link{cmp_mmm_vals}}
\tab Get all combined completeness + extended mode properties.        \cr
\code{\link{cmp_mmm_ccc_vals}}   
\tab Get all combined completeness + extended mode + extended class
properties.                                                        }
}

\section{Additional arguments in \code{...}}{
 Arguments in the following table
are optional. If used, they indicate additional property
restrictions:\tabular{ll}{
ARGUMENT    \tab USE AND MEANING                                      \cr
\code{n}    \tab Set of valid lengths/numbers of elements.            \cr
\code{nr}   \tab Set of valid numbers of rows.                        \cr
\code{nc}   \tab Set of valid numbers of columns.                     \cr
\code{min}  \tab Minimum valid length/number of elements.             \cr
\code{minr} \tab Minimum valid number of rows.                        \cr
\code{minc} \tab Minimum valid number of columns.                     \cr
\code{max}  \tab Maximum valid length/number of element.              \cr
\code{maxr} \tab Maximum valid number of rows.                        \cr
\code{maxc} \tab Maximum valid number of columns.                     \cr
\code{vals} \tab Set of valid values.                                 \cr
\code{lt}   \tab Exclusive upper bound (x <) on elements of \code{x}. \cr
\code{le}   \tab Inclusive upper bound (x ≤) on elements of \code{x}. \cr
\code{ge}   \tab Inclusive lower bound (x ≥) on elements of \code{x}. \cr
\code{gt}   \tab Exclusive lower bound (x >) on elements of \code{x}.   }
}

\seealso{
Other props: 
\code{\link{as_mmm.}()},
\code{\link{ccc.}()},
\code{\link{cmp_ccc.}()},
\code{\link{cmp_mmm.}()},
\code{\link{cmp_mmm_ccc.}()},
\code{\link{comparable.}()},
\code{\link{compatible.}()},
\code{\link{ddd.}()},
\code{\link{eee.}()},
\code{\link{fff.}()},
\code{\link{meets.}()},
\code{\link{mmm.}()},
\code{\link{mmm_ccc.}()},
\code{\link{sss.}()},
\code{\link{ttt.}()},
\code{\link{ttt_ccc.}()},
\code{\link{ttt_mmm.}()}
}
\concept{props}
