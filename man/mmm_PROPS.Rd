% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mmm.R
\encoding{UTF-8}
\name{mmm_PROPS}
\alias{mmm_PROPS}
\alias{mmm}
\alias{mmm_funs}
\alias{mmm_props}
\alias{is_mmm_spec}
\alias{MMM}
\alias{CH1}
\alias{CH3}
\alias{CHR}
\alias{CLR}
\alias{EVN}
\alias{FAC}
\alias{FRC}
\alias{IND}
\alias{LGL}
\alias{NEG}
\alias{NGW}
\alias{NNG}
\alias{NNW}
\alias{NPS}
\alias{NPW}
\alias{NST}
\alias{NUM}
\alias{ODD}
\alias{ORD}
\alias{PCT}
\alias{POS}
\alias{PPN}
\alias{PSW}
\alias{SRT}
\alias{STR}
\alias{UNO}
\alias{WHL}
\title{Extended Mode Properties}
\usage{
mmm_PROPS()

mmm(x)

mmm_funs()

mmm_props()

is_mmm_spec(spec)

MMM(x, spec, ...)

CH1(x, ...)

CH3(x, ...)

CHR(x, ...)

CLR(x, ...)

EVN(x, ...)

FAC(x, ...)

FRC(x, ...)

IND(x, ...)

LGL(x, ...)

NEG(x, ...)

NGW(x, ...)

NNG(x, ...)

NNW(x, ...)

NPS(x, ...)

NPW(x, ...)

NST(x, ...)

NUM(x, ...)

ODD(x, ...)

ORD(x, ...)

PCT(x, ...)

POS(x, ...)

PPN(x, ...)

PSW(x, ...)

SRT(x, ...)

STR(x, ...)

UNO(x, ...)

WHL(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{spec}{\code{NULL} or a \link[=cmp_chr_scl]{complete character vec} containing one or more extended mode properties from \code{mmm_props()}. extended mode specs may be pipe-delimited. If there are multiple properties in \code{spec}, \code{x} is inspected for a match to any of the specified properties.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\description{
Extended modes are defined for non-empty atomic objects. For all other objects, the extended mode is \code{NULL}. These are not formally defined modes, but are evaluated dynamically based on the current characteristics of an object.

Atomic objects that contain only \code{NA} values are of every extended mode (they can be coerced to any mode without introducing new \code{NA} values).
\subsection{Generic extended modes}{

\tabular{ll}{  \verb{'atm', 'ATM'}   \tab atomic (both a \code{\link[=bbb]{basic}} and an extended mode property).}
}

\subsection{Character extended modes}{

\tabular{ll}{  \verb{'chr', 'CHR'}   \tab character                          \cr
  \verb{'ch1', 'CH1'}   \tab onechar, or \code{all(nchar(x) == 1)}   \cr
  \verb{'ch3', 'CH3'}   \tab threechar, or \verb{all(nchar(x) == 3)} \cr
  \verb{'clr', 'CLR'}   \tab color (valid color values)         \cr
  \verb{'str', 'STR'}   \tab string (no blanks)                   }
}

\subsection{Categorical extended modes}{

\tabular{ll}{  \verb{'fac', 'FAC'}   \tab factor         \cr
  \verb{'lgl', 'LGL'}   \tab logical        \cr
  \verb{'ord', 'ORD'}   \tab ordered factor \cr
  \verb{'uno', 'UNO'}   \tab unordered factor }
}

\subsection{Basic numeric extended modes}{

\tabular{ll}{  \verb{'num', 'NUM'}   \tab numeric    \cr
  \verb{'frc', 'FRC'}   \tab fractional \cr
  \verb{'whl', 'WHL'}   \tab whole number }
}

\subsection{Value-restricted numeric extended modes}{

\tabular{ll}{  \verb{'pct', 'PCT'}   \tab percentage (\code{0} to \code{100}) \cr
  \verb{'ppn', 'PPN'}   \tab proportion (\code{0-1})        \cr
  \verb{'pos', 'POS'}   \tab positive                  \cr
  \verb{'neg', 'NEG'}   \tab negative                  \cr
  \verb{'nng', 'NNG'}   \tab non-negative              \cr
  \verb{'nps', 'NPS'}   \tab non-positive                }
}

\subsection{Whole-number value-restricted extended modes}{

\tabular{ll}{  \verb{'evn', 'EVN'}   \tab even               \cr
  \verb{'odd', 'ODD'}   \tab odd                \cr
  \verb{'ngw', 'NGW'}   \tab negative whole     \cr
  \verb{'psw', 'PSW'}   \tab positive whole     \cr
  \verb{'npw', 'NPW'}   \tab non-positive whole \cr
  \verb{'nnw', 'NNW'}   \tab non-negative whole   }
}

\subsection{Combination extended modes}{

\tabular{ll}{  \verb{'ind', 'IND'}   \tab indexer (see \code{'lgl'}, \code{'psw'})           \cr
  \verb{'srt', 'SRT'}   \tab sortable (see \code{'chr'}, \code{'num'}, \code{'ord'}) \cr
  \verb{'nst', 'NST'}   \tab non-sortable atomic                        }
}
}
\section{Functions}{
\itemize{
\item \code{mmm()}: Lists all extended mode properties possessed by \code{x}. Returns a character vector.

\item \code{mmm_funs()}: Lists all extended-mode checking functions. Returns a sorted, uppercase, character vector.

\item \code{mmm_props()}: Lists all extended-mode properties. Returns a sorted, lowercase, character vector.

\item \code{is_mmm_spec()}: Checks whether a \code{spec} is an extended-mode property spec. Returns a logical scalar. See \code{\link{ppp}} for a definition of a property spec.

\item \code{MMM()}: Checks whether the object \code{x} is a match to extended mode spec in \code{spec} subject to any count or value restriction arguments in \code{...}. Returns a logical scalar. See \code{\link{ppp}} for a definition of a property spec.

\item \code{CH1()}: Checks whether \code{x} is a onechar vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{CH3()}: Checks whether \code{x} is a threechar vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{CHR()}: Checks whether \code{x} is a character vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{CLR()}: Checks whether \code{x} is a color character vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{EVN()}: Checks whether \code{x} is an even, whole-number vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{FAC()}: Checks whether \code{x} is a factor vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{FRC()}: Checks whether \code{x} is a fractional numeric vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{IND()}: Checks whether \code{x} is an indexing vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{LGL()}: Checks whether \code{x} is a logical vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{NEG()}: Checks whether \code{x} is a negative numeric vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{NGW()}: Checks whether \code{x} is a negative whole-number vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{NNG()}: Checks whether \code{x} is a non-negative numeric vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{NNW()}: Checks whether \code{x} is a non-negative whole-number vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{NPS()}: Checks whether \code{x} is a non-positive numeric vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{NPW()}: Checks whether \code{x} is a non-positive whole-number vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{NST()}: Checks whether \code{x} is a non-sortable vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{NUM()}: Checks whether \code{x} is a numeric vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{ODD()}: Checks whether \code{x} is an odd, whole-number vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{ORD()}: Checks whether \code{x} is an ordered factor vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{PCT()}: Checks whether \code{x} is a percentage-valued numeric vector (i.e., in the range 0-100) subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{POS()}: Checks whether \code{x} is a positive numeric vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{PPN()}: Checks whether \code{x} is a proportion-valued numeric vector (i.e., in the range 0-1) subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{PSW()}: Checks whether \code{x} is a positive whole-number vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{SRT()}: Checks whether \code{x} is a sortable vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{STR()}: Checks whether \code{x} is a string vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{UNO()}: Checks whether \code{x} is an unordered factor vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

\item \code{WHL()}: Checks whether \code{x} is a whole-number vector subject to any count or value restriction arguments in \code{...}. Returns a logical scalar.

}}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{ll}{  \verb{.max, .maxr, .maxc}   \tab Scalar maximum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.min, .minr, .minc}   \tab Scalar minimum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.lt, .le, .ge, .gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively. \cr   \tab   \cr
  \verb{.n, .nr, .nc}         \tab A vector of valid numbers of elements, rows, and columns, respectively.                                                                    \cr   \tab   \cr
  \code{.vals}                \tab A vector of valid values.                                                                                                                                 }
}

\examples{
mmm_funs()
mmm_props()
mmm(letters)
mmm(1:10)
mmm(c(pi, log(10), exp(1)))
is_mmm_spec("invalid")
is_mmm_spec("psw|srt")
MMM(1:10, "psw|srt")
MMM(letters, "ch1")
MMM(letters, "srt")
MMM(1:10, "ch3")
CH1(letters)
SRT(letters)
CLR(1:10)
CLR("blue")
CLR("#1077ACFF")
}
\seealso{
Other properties: 
\code{\link{as_mmm}()},
\code{\link{cls}()},
\code{\link{comparable}()},
\code{\link{compatible}()},
\code{\link{iii_PROPS}()},
\code{\link{sss_PROPS}()}
}
\concept{properties}
