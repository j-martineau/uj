% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ccc.R
\name{ccc}
\alias{ccc}
\alias{ccc_props}
\alias{is_ccc_spec}
\alias{iccc}
\alias{iarr}
\alias{idtf}
\alias{igen}
\alias{imat}
\alias{imvc}
\alias{iscl}
\alias{ivec}
\alias{ivls}
\title{Extended class properties}
\usage{
ccc(x)

ccc_props()

is_ccc_spec(spec)

iccc(x, spec, ...)

iarr(x, ...)

idtf(x, ...)

igen(x, ...)

imat(x, ...)

imvc(x, ...)

iscl(x, ...)

ivec(x, ...)

ivls(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{spec}{\code{NULL} or a \link[=cmp_chr_scl]{complete character vec} containing one or more extended class properties (i.e., from \code{ccc_props()}). Extended class properties may be pipe-delimited. If there are multiple properties in \code{spec}, \code{x} is inspected for a match to any of the specified properties.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\value{
\itemize{
\item \strong{\code{ccc}}: a character scalar/vector.
\item \strong{\code{ccc_vals}}: a character vector.
\item \strong{\verb{iccc, ixxx, is_ccc_spec}}: a logical scalar.
}
}
\description{
Extended class properties are not formally defined, but are dynamically evaluated for properties as follows:
\itemize{
\item \strong{\code{arr}} (array): arrays.
\item \strong{\code{dtf}} (data.frame): data frames.
\item \strong{\code{vls}} (vlist): vector-lists (not data.frame lists).
\item \strong{\code{gen}} (generic): vectors, vlists, and arrays.
\item \strong{\code{mat}} (matrix): matrices.
\item \strong{\code{scl}} (scalar): vectors, vlists, and arrays of length \code{1}.
\item \strong{\code{mvc}} (multivec): vectors and vlists of length \verb{2+} and \link[=ie1D]{effectively 1D} arrays.
\item \strong{\code{vec}} (vec): scalars and multivecs
}
Functions in this family are:
\itemize{
\item \strong{\code{ccc}}: gets a character vector containing all extended class properties possessed by \code{x}.
\item \strong{\code{ixxx}}: evaluates whether \code{x} possesses the extended class property \code{xxx}** (a placeholder for any given extended class property value), subject to any restrictions in \code{...}.
\item \strong{\code{iccc}}: evaluates whether \code{x} possesses one or more (possibly pipe-delimited) extended class properties in \code{spec}, subject to any restrictions in \code{...}.
\item \strong{\code{ccc_props}}: gets a character vector of all possible extended class property values.
\item \strong{\code{is_ccc_spec}}: evaluates whether \code{spec} is a valid extended class property specification.
}
}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{rl}{
\verb{max,maxr,maxc}   \tab Scalar maximum valid numbers of element, rows, and columns, respectively..
\cr                   \tab  
\cr \verb{min,minr,minc}   \tab Scalar minimum valid numbers of element, rows, and columns, respectively..
\cr                   \tab  
\cr   \verb{lt,le,ge,gt}   \tab Scalar less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively.
\cr                   \tab  
\cr       \verb{n,nr,nc}   \tab A vector of valid numbers of elements, rows, and columns, respectively..
\cr                   \tab  
\cr          \code{vals}   \tab A vector of valid values.
}
}

\seealso{
Other props: 
\code{\link{as_mmm}},
\code{\link{bbb_ccc}()},
\code{\link{bbb_mmm}()},
\code{\link{bbb}()},
\code{\link{cmp_ccc}()},
\code{\link{cmp_mmm_ccc}()},
\code{\link{cmp_mmm}()},
\code{\link{comparable}()},
\code{\link{compatible}()},
\code{\link{ddd}()},
\code{\link{eee}()},
\code{\link{iii}()},
\code{\link{meets}()},
\code{\link{mmm_ccc}()},
\code{\link{mmm}()},
\code{\link{ppp}()},
\code{\link{sss}()}
}
\concept{props}
