% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ccc.R
\name{ccc}
\alias{ccc}
\alias{ccc_vals}
\alias{iarr}
\alias{iagn}
\alias{iatb}
\alias{iavl}
\alias{iavt}
\alias{imat}
\alias{imvc}
\alias{iscl}
\alias{ivec}
\alias{iccc}
\title{Extended Class (ccc) Property Family}
\usage{
ccc_vals()

iarr(x.)

iagn(x.)

iatb(x.)

iavl(x.)

iavt(x.)

imat(x.)

imvc(x.)

iscl(x.)

ivec(x.)

ccc(x.)

iccc(x., xxx., ...)
}
\arguments{
\item{...}{Additional arguments to \code{\link{meets}} containing value and
element/row/column count restrictions.}

\item{x}{An object.}

\item{xxx}{A character scalar containing one or more values from
\code{ccc_vals()} separated by pipes and/or underscores. Combinations of
extended classes can be specified by separating them with underscores.
Separating extended classes or combinations of extended classes with pipes
will result in a value of \code{TRUE} if any of them applies to \code{x.}.}
}
\value{
\code{ccc_vals} returns a character vector containing all valid
extended class property values. \code{ccc} returns a character scalar
or vector containing all extended class properties from
\code{ccc_vals()} applicable to \code{x.}. All others return either
\code{TRUE} or \code{FALSE}.
}
\description{
Gets all valid extended class property values.
}
\details{
Extended classes are not formally defined as a new classes, but
are dynamically evaluated for characteristics through a call to
\code{xccc(x.)} where the function name (e.g., 'ccc') is the extended
class name. \code{TRUE} or \code{FALSE} is always returned, and
\code{FALSE} is always returned for the \code{NULL} object. In this
package, the following types of objects are new and are defined as given in
the following table.\tabular{lll}{
EXTENDED CLASS \tab EXTENDED CLASS \tab CHARACTERISTICS               \cr
PROPERTY VALUE \tab PROPERTY NAME  \tab QUALIFYING                    \cr
\code{'vls'}   \tab vlist          \tab non-data.frame (vector) list  \cr
\code{'gen'}   \tab generic        \tab any vector, vlist, or array   \cr
\code{'scl'}   \tab scalar         \tab length-1 generic              \cr
\code{'mvc'}   \tab multivec       \tab multiple-element vector,
multiple-element vlist, or
multiple-element array with 1
\link[=eee]{effective dimension}   \cr
\code{'tib'}   \tab tib            \tab \code{\link[tibble]{tibble}},
\code{\link[data.table]{data.table}},
or \code{\link[base]{data.frame}}  \cr
\code{'vec'}   \tab vec            \tab scalar or mvec                \cr
\code{'vtp'}   \tab vectype        \tab \code{link[=xemp]{empty}} or
\code{link[=xpop]{populated}} scalar,
vector, or vlist.                    }
The following table defines extended class using existing ℝ concepts and
the types just defined above. None of these newly defined types or extended
classes are formally defined. They are evaluated dynamically for required
properties. In the table, the first column indicates the structure of an
object and column headings indicate restrictions on other properties.
\tabular{lll}{
ATOMIC EXTENDED \tab ATOMIC EXTENDED \tab CHARACTERISTICS OF          \cr
CLASS VALUE     \tab CLASS NAME      \tab QUALIFYING OBJECTS          \cr
\code{'arr'}    \tab atomic array    \tab non-recursive array         \cr
\code{'agn'}    \tab atomic generic  \tab non-recursive generic       \cr
\code{'atb'}    \tab atomic tib      \tab tib containing only atomic
variables                   \cr
\code{'avl'}    \tab atomic vlist    \tab vlist whose elements are all
atomic                      \cr
\code{'avt'}    \tab atomic vtype    \tab non-recursive vtype         \cr
\code{'mat'}    \tab atomic matrix   \tab non-recursive matrix        \cr
\code{'mvc'}    \tab atomic mvec     \tab non-recursive mvec          \cr
\code{'scl'}    \tab atomic scalar   \tab non-recurvive scalar        \cr
\code{'vec'}    \tab atomic vec      \tab non-recursive vec             }
}
\section{Functions}{
\itemize{
\item \code{iarr}: Is \code{x.} an atomic array?

\item \code{iagn}: Is \code{x.} an atomic generic?

\item \code{iatb}: Is \code{x.} an atomic tibble?

\item \code{iavl}: Is \code{x.} an atomic vlist?

\item \code{iavt}: Is \code{x.} an atomic vtype?

\item \code{imat}: Is \code{x.} an atomic matrix?

\item \code{imvc}: Is \code{x.} an atomic mvect?

\item \code{iscl}: Is \code{x.} an atomic scalar?

\item \code{ivec}: Is \code{x.} an atomic vect?

\item \code{ccc}: Gets a vector of properties from \code{ccc_vals()} that are
applicable to \code{x.}.

\item \code{iccc}: Evaluates whether any (combination) property in \code{xxx.} is
an extended class property applicable to \code{x.}.
}}

\section{Submitting additional arguments to \code{ccc} via \code{...}}{

Allows for checking not just the ccc but whether length, number of rows,
number of columns, and element values meet flexible criteria.
}

\seealso{
Other props: 
\code{\link{cmp_mmm_agn}},
\code{\link{cmp_mmm_arr}},
\code{\link{cmp_mmm_atb}},
\code{\link{cmp_mmm_avl}},
\code{\link{cmp_mmm_avt}},
\code{\link{cmp_mmm_gen}},
\code{\link{cmp_mmm_mat}},
\code{\link{cmp_mmm_mvc}},
\code{\link{cmp_mmm_scl}},
\code{\link{cmp_mmm_vec}},
\code{\link{cmp_mmm}},
\code{\link{comparable}()},
\code{\link{compatible}()},
\code{\link{ddd}()},
\code{\link{eee}()},
\code{\link{fff}()},
\code{\link{is_failsafe}},
\code{\link{is_xxx}},
\code{\link{meets}()},
\code{\link{mmm_agn}},
\code{\link{mmm_arr}},
\code{\link{mmm_atb}},
\code{\link{mmm_avl}},
\code{\link{mmm_avt}},
\code{\link{mmm_mat}},
\code{\link{mmm_mvc}},
\code{\link{mmm_scl}},
\code{\link{mmm_vec}},
\code{\link{mmm}()},
\code{\link{sss}()},
\code{\link{ttt}()},
\code{\link{xxx}()}
}
\concept{props}
