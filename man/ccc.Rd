% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ccc.R
\name{ccc}
\alias{ccc}
\alias{ccc_vals}
\alias{xarr}
\alias{xagn}
\alias{xatb}
\alias{xavl}
\alias{xavt}
\alias{xmat}
\alias{xmvc}
\alias{xscl}
\alias{xvec}
\alias{is_ccc}
\title{Extended Class (ccc) Property Family}
\usage{
ccc_vals()

xarr(x)

xagn(x)

xatb(x)

xavl(x)

xavt(x)

xmat(x)

xmvc(x)

xscl(x)

xvec(x)

ccc(x)

is_ccc(x, xxx, ...)
}
\arguments{
\item{x}{An object.}

\item{xxx}{A character scalar containing one or more values from
\code{ccc_vals()} separated by pipes and/or underscores. Combinations of
extended classes can be specified by separating them with underscores.
Separating extended classes or combinations of extended classes with pipes
will result in a value of \code{TRUE} if any of them applies to \code{x}.}

\item{...}{Additional arguments to \code{\link{meets}} containing value and
element/row/column count restrictions.}
}
\value{
\code{ccc_vals} returns a character vector containing all valid
extended class property values. \code{ccc} returns a character scalar
or vector containing all extended class properties from
\code{ccc_vals()} applicable to \code{x}. All others return either
\code{TRUE} or \code{FALSE}.
}
\description{
Extended classes are not formally defined as a new classes, but
are dynamically evaluated for characteristics through a call to
\code{xccc(x)} where the function name (e.g., 'ccc') is the extended
class name. \code{TRUE} or \code{FALSE} is always returned, and
\code{FALSE} is always returned for the \code{NULL} object.
\cr\cr
See details.
}
\details{
In this package, the following types of objects are new and are
defined as given in the following table.
\tabular{lll}{
\emph{Type}\tab\code{is}\emph{ Function}\tab\emph{Definition}
\cr\code{\link[is_vlist]{vlist}}\tab A vector list (i.e., a list that is
not a tibble/tibble.
\cr\code{\link[is_generic]{scalar}}\tab A vector, vlist, or array of any
length.
\cr\code{\link[is_scalar]{scalar}}\tab A vector, vlist, or array of
length 1.
\cr\code{\link[is_mvect]{mvect}}\tab A multiple-element vector, a
multipe-element vlist, or an array with
\link[=eee]{effective dimensionality} of 1.
\cr\code{\link[is_vect]{vect}}\tab A scalar or mvect.
\cr\code{\link[is_vtype]{vtype}}\tab A scalar, vlist, mvect, or an empty
vector/vlist/array.
}
The following table defines extended class in the table below using
existing ‚Ñù concepts and the types just defined above. None of these
newly defined types or extended classes are formally defined. They are
evaluated dynamically for required properties. In the table, the
first column indicates the structure of an object and column headings
indicate restrictions on other properties. Table notes clarify some issues
that may not be obvious.
\tabular{ll}{
\strong{Any}\tab\strong{Empty}
\cr\code{'arr'}\tab atomic array
\cr\code{'agn'}\tab atomic generic
\cr\code{'atb'}\tab atomic tibble
\cr\code{'avl'}\tab atomic vlist
\cr\code{'avt'}\tab atomic vtype
\cr\code{'mat'}\tab atomic matrix
\cr\code{'mvc'}\tab atomic mvect
\cr\code{'scl'}\tab atomic scalar
\cr\code{'vec'}\tab atomic vect
}
Table Notes \itemize{
\item an atomic tibble is a non-empty tibble whose columns are all
atomic.
\item an atomic vlist is a non-empty vlist all of whose elements are
all non-empty and atomic.
}
\strong{\code{ccc_vals}}
\cr Gets all valid extended class property values.
\cr\cr
\strong{\code{ccc}}
\cr Gets a vector of properties from \code{ccc_vals()} that are
applicable to \code{x}.
\cr\cr
\strong{\code{is_ccc}}
\cr Evaluates whether any (combination) property in \code{xxx} is an
extended class property applicable to \code{x}.
\cr\cr
\strong{\code{xccc}}
\cr Evaluates whether \code{x} has the extended class property represented
by \code{xxx}.
\cr\cr
\strong{Additional Arguments in \code{...}}
\cr Submitting additional arguments to \code{is_ccc} via \code{...}
allows for checking not just the ccc but whether length, number of rows,
number of columns, and element values meet flexible criteria.
}
\seealso{
Other props: 
\code{\link{cmp_ccc}},
\code{\link{cmp_mmm_agn}},
\code{\link{cmp_mmm_arr}},
\code{\link{cmp_mmm_atb}},
\code{\link{cmp_mmm_avl}},
\code{\link{cmp_mmm_avt}},
\code{\link{cmp_mmm_gen}},
\code{\link{cmp_mmm_mat}},
\code{\link{cmp_mmm_mvc}},
\code{\link{cmp_mmm_scl}},
\code{\link{cmp_mmm_vec}},
\code{\link{cmp_mmm}},
\code{\link{comparable}()},
\code{\link{compatible}()},
\code{\link{ddd}()},
\code{\link{eee}()},
\code{\link{fff}()},
\code{\link{meets}()},
\code{\link{mmm_agn}},
\code{\link{mmm_arr}},
\code{\link{mmm_atb}},
\code{\link{mmm_avl}},
\code{\link{mmm_avt}},
\code{\link{mmm_mat}},
\code{\link{mmm_mvc}},
\code{\link{mmm_scl}},
\code{\link{mmm_vec}},
\code{\link{mmm}()},
\code{\link{pop_xxx}},
\code{\link{sss}()},
\code{\link{ttt}()},
\code{\link{xxx}()}
}
\concept{props}
