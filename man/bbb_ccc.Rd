% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bbb_ccc.R
\encoding{UTF-8}
\name{bbb_ccc}
\alias{bbb_ccc}
\alias{bbb_ccc_funs}
\alias{atm_arr}
\alias{atm_dtf}
\alias{atm_gen}
\alias{atm_mat}
\alias{atm_mvc}
\alias{atm_scl}
\alias{atm_vec}
\alias{atm_vls}
\alias{nil_arr}
\alias{nil_dtf}
\alias{nil_gen}
\alias{nil_mat}
\alias{nil_vec}
\alias{nil_vls}
\alias{pop_arr}
\alias{pop_dtf}
\alias{pop_gen}
\alias{pop_mat}
\alias{pop_mvc}
\alias{pop_scl}
\alias{pop_vec}
\alias{pop_vls}
\title{basic + xclass combination properties}
\usage{
bbb_ccc(X, BBB, CCC, ...)

bbb_ccc_funs()

atm_arr(X, ...)

atm_dtf(X, ...)

atm_gen(X, ...)

atm_mat(X, ...)

atm_mvc(X, ...)

atm_scl(X, ...)

atm_vec(X, ...)

atm_vls(X, ...)

nil_arr(X, ...)

nil_dtf(X, ...)

nil_gen(X, ...)

nil_mat(X, ...)

nil_vec(X, ...)

nil_vls(X, ...)

pop_arr(X, ...)

pop_dtf(X, ...)

pop_gen(X, ...)

pop_mat(X, ...)

pop_mvc(X, ...)

pop_scl(X, ...)

pop_vec(X, ...)

pop_vls(X, ...)
}
\arguments{
\item{X}{An R object.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}

\item{bbb}{A character scalar single basic property from \code{\link{bbb_props}()}.}

\item{ccc}{A character scalar single xclass property from \code{\link{ccc_props}()}.}
}
\value{
\strong{A character vector} \cr\cr \code{bbb_ccc_funs}
\cr\cr  \strong{A logical scalar}   \cr\cr \verb{\{bbb\}_\{ccc\}, bbb_ccc}
}
\description{
Check for combinations of \link[=bbb]{basic} and \link[=ccc]{xclass} properties.
}
\details{
\tabular{ll}{  \code{bbb_cccfuns}   \tab What \link[=bbb]{basic} + \link[=ccc]{xclass} combination \link[=prop_funs]{property functions} are there?                                                                                                  \cr   \tab   \cr
  \verb{\{bbb\}_\{ccc\}}   \tab Is \code{X} a match to single basic property \code{'{bbb}'} and single xmode property \code{'{mmm}'}, where \code{{bbb}} and \code{{mmm}} are placeholders for any given basic property and any given xclass property, respectively? \cr   \tab   \cr
  \code{bbb_ccc}       \tab Is \code{X} a match to the single basic and xclass properties in \code{bbb} and \code{ccc}, respectively?                                                                                                                                 }
\cr\cr Some combinations of basic + xclass properties are nonsensical. For this reason, the basic properties represented in this family of functions are \code{c('atm', 'nil',  'pop')}, or atomic, nil (non-\code{NULL} and of length 0), and populated (of length \verb{1+}).
\cr\cr In addition, the base property \code{'nil'} is nonsensical in combination with xclasses \code{'mvc'} (multivec) and \code{'scl'} (scalar), which thus do not have combined \code{bbb_ccc} property functions.
}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{ll}{  \verb{.max, .maxr, .maxc}   \tab Scalar maximum valid numbers of elements, rows, and columns, respectively.                                                                  \cr   \tab   \cr
  \verb{.min, .minr, .minc}   \tab Scalar minimum valid numbers of elements, rows, and columns, respectively.                                                                  \cr   \tab   \cr
  \verb{.lt, .le, .ge, .gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively. \cr   \tab   \cr
  \verb{.n, .nr, .nc}         \tab A vector of valid numbers of elements, rows, and columns, respectively.                                                                    \cr   \tab   \cr
  \code{.vals}                \tab A vector of valid values.                                                                                                                                 }
}

\examples{
bbb_ccc_funs()
bbb_ccc(letters, "atm", "mvc")
bbb_ccc(1, "nil", "vec")
atm_gen(letters)
atm_scl(1)
}
\seealso{
Other props: 
\code{\link{ccc}()},
\code{\link{cmp_mmm_ccc}()},
\code{\link{sss_ccc}()},
\code{\link{unq_mmm_ccc}()},
\code{\link{unq_mmm}()}
}
\concept{props}
