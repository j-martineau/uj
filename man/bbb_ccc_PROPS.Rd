% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bbb_ccc.R
\encoding{UTF-8}
\name{bbb_ccc_PROPS}
\alias{bbb_ccc_PROPS}
\alias{bbb_ccc}
\alias{bbb_ccc_funs}
\alias{atm_arr}
\alias{atm_dtf}
\alias{atm_gen}
\alias{atm_mat}
\alias{atm_mvc}
\alias{atm_scl}
\alias{atm_vec}
\alias{atm_vls}
\alias{nil_arr}
\alias{nil_dtf}
\alias{nil_gen}
\alias{nil_mat}
\alias{nil_vec}
\alias{nil_vls}
\alias{pop_arr}
\alias{pop_dtf}
\alias{pop_gen}
\alias{pop_mat}
\alias{pop_mvc}
\alias{pop_scl}
\alias{pop_vec}
\alias{pop_vls}
\title{Combo Basic Plus Extended Class Properties}
\usage{
bbb_ccc_PROPS()

bbb_ccc(x, bbb, ccc, ...)

bbb_ccc_funs()

atm_arr(x, ...)

atm_dtf(x, ...)

atm_gen(x, ...)

atm_mat(x, ...)

atm_mvc(x, ...)

atm_scl(x, ...)

atm_vec(x, ...)

atm_vls(x, ...)

nil_arr(x, ...)

nil_dtf(x, ...)

nil_gen(x, ...)

nil_mat(x, ...)

nil_vec(x, ...)

nil_vls(x, ...)

pop_arr(x, ...)

pop_dtf(x, ...)

pop_gen(x, ...)

pop_mat(x, ...)

pop_mvc(x, ...)

pop_scl(x, ...)

pop_vec(x, ...)

pop_vls(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{bbb}{A character scalar single basic property from \code{\link{bbb_props}()}.}

\item{ccc}{A character scalar single extendec class property from \code{\link{ccc_props}()}.}

\item{...}{
  Arguments passed on to \code{\link[=meets]{meets}}
  \describe{
    \item{\code{}}{}
  }}
}
\description{
Some combinations of basic + extended class properties are nonsensical. For this reason, the basic properties represented in this family of functions are \code{c('atm', 'nil',  'pop')}, or atomic, nil (non-\code{NULL} and of length 0), and populated (of length \verb{1+}).
\cr\cr In addition, the base property \code{'nil'} is nonsensical in combination with extended classes \code{'mvc'} (multivec) and \code{'scl'} (scalar), which thus do not have combined \code{bbb_ccc} property functions.
}
\section{Functions}{
\itemize{
\item \code{bbb_ccc()}: Checks \code{x} for the basic property in \code{bbb} and for the extended class property in \code{ccc} subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{bbb_ccc_funs()}: Lists all combo basic plus extended class property checking functions.

\item \code{atm_arr()}: Checks \code{x} for atomic-ness and array-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_dtf()}: Checks \code{x} for atomic-ness and data.frame-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_gen()}: Checks \code{x} for atomic-ness and generic-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_mat()}: Checks \code{x} for atomic-ness and matrix-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_mvc()}: Checks \code{x} for atomic-ness and multivec-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_scl()}: Checks \code{x} for atomic-ness and scalar-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_vec()}: Checks \code{x} for atomic-ness and vec-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{atm_vls()}: Checks \code{x} for atomic-ness and vector-list-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{nil_arr()}: Checks \code{x} for nil-ness and array-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{nil_dtf()}: Checks \code{x} for nil-ness and data.frame-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{nil_gen()}: Checks \code{x} for nil-ness and generic-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{nil_mat()}: Checks \code{x} for nil-ness and matrix-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{nil_vec()}: Checks \code{x} for nil-ness and vec-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{nil_vls()}: Checks \code{x} for nil-ness and vector-list-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_arr()}: Checks \code{x} for populated-ness and array-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_dtf()}: Checks \code{x} for populated-ness and data.frame-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_gen()}: Checks \code{x} for populated-ness and generic-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_mat()}: Checks \code{x} for populated-ness and matrix-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_mvc()}: Checks \code{x} for populated-ness and multivec-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_scl()}: Checks \code{x} for populated-ness and scalar-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_vec()}: Checks \code{x} for populated-ness and vec-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

\item \code{pop_vls()}: Checks \code{x} for populated-ness and vector-list-ness subject to any count and/or value restrictions in \code{...}. Returns a logical scalar.

}}
\section{Specifying count and value restrictions}{
 Specifying restrictions in \code{...} is optional. The full set of recognized arguments names are defined in the following table along with the properties each specifies:
\tabular{ll}{  \verb{.max, .maxr, .maxc}   \tab Scalar maximum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.min, .minr, .minc}   \tab Scalar minimum valid numbers of elements, rows, and columns, respectively.                                                                 \cr   \tab   \cr
  \verb{.lt, .le, .ge, .gt}   \tab \link[=cmp_srt_scl]{Complete sortable scalar} less-than, less-than-or-equal, greater-than-or-equal, and greater-than bounds, respectively. \cr   \tab   \cr
  \verb{.n, .nr, .nc}         \tab A vector of valid numbers of elements, rows, and columns, respectively.                                                                    \cr   \tab   \cr
  \code{.vals}                \tab A vector of valid values.                                                                                                                                 }
}

\examples{
bbb_ccc_funs()
bbb_ccc(letters, "atm", "mvc")
bbb_ccc(1, "nil", "vec")
atm_gen(letters)
atm_scl(1)
}
