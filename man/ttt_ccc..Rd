% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ttt_ccc.R
\name{ttt_ccc.}
\alias{ttt_ccc.}
\alias{ttt_ccc_vals}
\alias{any_arr}
\alias{any_gen}
\alias{any_mat}
\alias{any_mvc}
\alias{any_scl}
\alias{any_dtf}
\alias{any_vec}
\alias{any_vls}
\alias{any_vtp}
\alias{atm_arr}
\alias{atm_gen}
\alias{atm_mat}
\alias{atm_mvc}
\alias{atm_scl}
\alias{atm_dtf}
\alias{atm_vec}
\alias{atm_vls}
\alias{atm_vtp}
\alias{pop_arr}
\alias{pop_gen}
\alias{pop_mat}
\alias{pop_mvc}
\alias{pop_scl}
\alias{pop_dtf}
\alias{pop_vec}
\alias{pop_vls}
\alias{pop_vtp}
\alias{cmp_arr}
\alias{cmp_gen}
\alias{cmp_mat}
\alias{cmp_mvc}
\alias{cmp_scl}
\alias{cmp_dtf}
\alias{cmp_vec}
\alias{cmp_vls}
\alias{cmp_avt}
\alias{emp_arr}
\alias{emp_gen}
\alias{emp_mat}
\alias{emp_mvc}
\alias{emp_scl}
\alias{emp_dtf}
\alias{emp_vec}
\alias{emp_vls}
\alias{emp_avt}
\alias{rcr_arr}
\alias{rcr_gen}
\alias{rcr_mat}
\alias{rcr_mvc}
\alias{rcr_scl}
\alias{rcr_dtf}
\alias{rcr_vec}
\alias{rcr_vls}
\alias{rcr_vtp}
\title{Extended class + fundamental type properties}
\usage{
ttt_ccc.()

ttt_ccc_vals()

any_arr(x)

any_gen(x)

any_mat(x)

any_mvc(x)

any_scl(x)

any_dtf(x)

any_vec(x)

any_vls(x)

any_vtp(x)

atm_arr(x, xxx = NULL)

atm_gen(x, xxx = NULL)

atm_mat(x, xxx = NULL)

atm_mvc(x, xxx = NULL)

atm_scl(x, xxx = NULL)

atm_dtf(x, xxx = NULL)

atm_vec(x, xxx = NULL)

atm_vls(x, xxx = NULL)

atm_vtp(x, xxx = NULL)

pop_arr(x, xxx = NULL)

pop_gen(x, xxx = NULL)

pop_mat(x, xxx = NULL)

pop_mvc(x, xxx = NULL)

pop_scl(x, xxx = NULL)

pop_dtf(x, xxx = NULL)

pop_vec(x, xxx = NULL)

pop_vls(x, xxx = NULL)

pop_vtp(x, xxx = NULL)

cmp_arr(x)

cmp_gen(x)

cmp_mat(x)

cmp_mvc(x)

cmp_scl(x)

cmp_dtf(x)

cmp_vec(x)

cmp_vls(x)

cmp_avt(x)

emp_arr(x)

emp_gen(x)

emp_mat(x)

emp_mvc(x)

emp_scl(x)

emp_dtf(x)

emp_vec(x)

emp_vls(x)

emp_avt(x)

rcr_arr(x)

rcr_gen(x)

rcr_mat(x)

rcr_mvc(x)

rcr_scl(x)

rcr_dtf(x)

rcr_vec(x)

rcr_vls(x)

rcr_vtp(x)
}
\arguments{
\item{x}{An object.}

\item{xxx}{Optional character scalar naming an extended mode from
\code{\link{mmm_vals}()}.}
}
\value{
Logical scalar.
}
\description{
Extended class + fundamental type properties
}
\section{Functions}{
\itemize{
\item \code{ttt_ccc_vals()}: Get a character vector of all possible fundamental
type plus extended class properties.

\item \code{any_arr()}: Is \code{x} an array of any type (\code{\link{iarr}})?

\item \code{any_gen()}: Is \code{x} any type of generic (\code{\link{igen}})?

\item \code{any_mat()}: Is \code{x} a matrix of any type (\code{\link{imat}})?

\item \code{any_mvc()}: Is \code{x} an mvect of any type (\code{\link{imvc}})?

\item \code{any_scl()}: Is \code{x} is any type of scalar (\code{\link{iscl}})?

\item \code{any_dtf()}: Is \code{x} any type of dtf (\code{\link{idtf}})?

\item \code{any_vec()}: Is \code{x} any type of vec (\code{\link{ivec}})?

\item \code{any_vls()}: Is \code{x} any type of vlist (\code{\link{ivls}})?

\item \code{any_vtp()}: Is \code{x} any type of vtype (\code{\link{ivtp}})?

\item \code{atm_arr()}: Is \code{x} an atomic array?

\item \code{atm_gen()}: Is \code{x} an atomic generic (\code{\link{igen}})?

\item \code{atm_mat()}: Is \code{x} an atomic matrix?

\item \code{atm_mvc()}: Is \code{x} an atomic mvect (\code{\link{imvc}})?

\item \code{atm_scl()}: Is \code{x} is an atomic scalar (\code{\link{iscl}})?

\item \code{atm_dtf()}: Is \code{x} an atomic dtf (\code{\link{idtf}})?

\item \code{atm_vec()}: Is \code{x} an atomic vec (\code{\link{ivec}})?

\item \code{atm_vls()}: Is \code{x} an atomic vlist (\code{\link{ivls}})?

\item \code{atm_vtp()}: Is \code{x} an atomic vtype (\code{\link{ivtp}})?

\item \code{pop_arr()}: Is \code{x} a populated (\code{\link{ipop}}) array?

\item \code{pop_gen()}: Is \code{x} a populated (\code{\link{ipop}}) generic?

\item \code{pop_mat()}: Is \code{x} a populated (\code{\link{ipop}}) matrix?

\item \code{pop_mvc()}: Is \code{x} a populated (\code{\link{ipop}}) multivec?

\item \code{pop_scl()}: Is \code{x} a populated (\code{\link{ipop}}) scalar?

\item \code{pop_dtf()}: Is \code{x} a populated (\code{\link{ipop}}) dtf?

\item \code{pop_vec()}: Is \code{x} a populated (\code{\link{ipop}}) vec?

\item \code{pop_vls()}: Is \code{x} a populated (\code{\link{ipop}}) vlist?

\item \code{pop_vtp()}: Is \code{x} a populated (\code{\link{ipop}}) vtype?

\item \code{cmp_arr()}: Is \code{x} a complete array? (\code{\link{icmp}},
\code{\link{iarr}})

\item \code{cmp_gen()}: Is \code{x} a complete generic? (\code{\link{icmp}},
\code{\link{igen}})

\item \code{cmp_mat()}: Is \code{x} a complete matrix? (\code{\link{icmp}},
\code{\link{imat}})

\item \code{cmp_mvc()}: Is \code{x} a complete multivec? (\code{\link{icmp}},
\code{\link{imvc}})

\item \code{cmp_scl()}: Is \code{x} a complete scalar? (\code{\link{icmp}},
\code{\link{iscl}})

\item \code{cmp_dtf()}: Is \code{x} a complete dtf? (\code{\link{icmp}},
\code{\link{idtf}})

\item \code{cmp_vec()}: Is \code{x} a complete vector? (\code{\link{icmp}},
\code{\link{ivec}})

\item \code{cmp_vls()}: Is \code{x} a complete vlist? (\code{\link{icmp}},
\code{\link{ivls}})

\item \code{cmp_avt()}: Is \code{x} a complete vtype? (\code{\link{icmp}},
\code{\link{ivtp}})

\item \code{emp_arr()}: Is \code{x} an empty array? (\code{\link{iemp}},
\code{\link{iarr}})

\item \code{emp_gen()}: Is \code{x} an empty generic? (\code{\link{iemp}},
\code{\link{igen}})

\item \code{emp_mat()}: Is \code{x} an empty matrix? (\code{\link{iemp}},
\code{\link{imat}})

\item \code{emp_mvc()}: Is \code{x} an empty multivec? (\code{\link{iemp}},
\code{\link{imvc}})

\item \code{emp_scl()}: Is \code{x} an empty scalar? (\code{\link{iemp}},
\code{\link{iscl}})

\item \code{emp_dtf()}: Is \code{x} an empty dtf? (\code{\link{iemp}},
\code{\link{idtf}})

\item \code{emp_vec()}: Is \code{x} an empty vector? (\code{\link{iemp}},
\code{\link{ivec}})

\item \code{emp_vls()}: Is \code{x} an empty vlist? (\code{\link{iemp}},
\code{\link{ivls}})

\item \code{emp_avt()}: Is \code{x} an empty vtype? (\code{\link{iemp}},
\code{\link{ivtp}})

\item \code{rcr_arr()}: Is \code{x} a recursive array? (\code{\link{ircr}},
\code{\link{iarr}})

\item \code{rcr_gen()}: Is \code{x} a recursive generic? (\code{\link{ircr}},
\code{\link{igen}})

\item \code{rcr_mat()}: Is \code{x} a recursive matrix? (\code{\link{ircr}},
\code{\link{imat}})

\item \code{rcr_mvc()}: Is \code{x} a recursive multivec? (\code{\link{ircr}},
\code{\link{imvc}})

\item \code{rcr_scl()}: Is \code{x} a recursive scalar? (\code{\link{ircr}},
\code{\link{iscl}})

\item \code{rcr_dtf()}: Is \code{x} a recursive dtf? (\code{\link{ircr}},
\code{\link{idtf}})

\item \code{rcr_vec()}: Is \code{x} a recursive vector? (\code{\link{ircr}},
\code{\link{ivec}})

\item \code{rcr_vls()}: Is \code{x} a recursive vlist? (\code{\link{ircr}},
\code{\link{ivls}})

\item \code{rcr_vtp()}: Is \code{x} a recursive vtype? (\code{\link{ircr}},
\code{\link{ivtp}})

}}
\seealso{
Other props: 
\code{\link{as_mmm.}()},
\code{\link{ccc.}()},
\code{\link{cmp_ccc.}()},
\code{\link{cmp_mmm.}()},
\code{\link{cmp_mmm_ccc.}()},
\code{\link{comparable.}()},
\code{\link{compatible.}()},
\code{\link{ddd.}()},
\code{\link{eee.}()},
\code{\link{fff.}()},
\code{\link{is_ccc_uj}()},
\code{\link{is_mmm.}()},
\code{\link{meets.}()},
\code{\link{mmm.}()},
\code{\link{mmm_ccc.}()},
\code{\link{sss.}()},
\code{\link{ttt.}()},
\code{\link{ttt_mmm.}()},
\code{\link{xxx.}()}
}
\concept{props}
