% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oxford.R
\name{ox}
\alias{ox}
\alias{ox_n}
\alias{ox_and}
\alias{ox_or}
\alias{ox_nor}
\alias{ox_either}
\alias{ox_neither}
\alias{ox_all}
\alias{ox_any}
\alias{ox_none}
\alias{ox_some}
\alias{ox_exactly}
\alias{ox_less}
\alias{ox_more}
\alias{ox_fewer}
\alias{ox_greater}
\alias{ox_atleast}
\alias{ox_atmost}
\alias{ox_nogreater}
\alias{ox_nofewer}
\alias{ox_nomore}
\alias{ox_noless}
\alias{ox_ormore}
\alias{ox_orgreater}
\alias{ox_orless}
\alias{ox_orfewer}
\title{Oxford-Comma Separated Lists}
\usage{
ox(..., conj = "and", pref = "", quote = 0)

ox_n(..., conj = "and", comp = "", quote = 0, n = 1, first = TRUE)

ox_and(..., pref = NULL)

ox_or(..., pref = NULL)

ox_nor(..., pref = "neither")

ox_either(...)

ox_neither(...)

ox_all(..., conj = "and")

ox_any(..., conj = "and")

ox_none(..., conj = "or")

ox_some(..., conj = "and")

ox_exactly(..., conj = "or", n = 1)

ox_less(..., conj = "and", n = 2)

ox_more(..., conj = "and", n = 1)

ox_fewer(..., conj = "and", n = 2)

ox_greater(..., conj = "and", n = 2)

ox_atleast(..., conj = "and", n = 1)

ox_atmost(..., conj = "and", n = 1)

ox_nogreater(..., conj = "and", n = 1)

ox_nofewer(..., conj = "and", n = 1)

ox_nomore(..., conj = "and", n = 1)

ox_noless(..., conj = "and", n = 1)

ox_ormore(..., conj = "and", n = 1)

ox_orgreater(..., conj = "and", n = 1)

ox_orless(..., conj = "and", n = 1)

ox_orfewer(..., conj = "and", n = 1)
}
\arguments{
\item{...}{Any number of arguments coerceable to mode character.}

\item{conj}{The conjunction to use between the next to last and last elements
of the list. See details.}

\item{pref}{A prefix to prepend to the resulting character scalar.}

\item{comp}{A \link[=cmp_chr_scl]{complete character scalar} used for
comparing to \code{n}, such as \code{'at least'} or \code{'or fewer'}.}

\item{n}{A \link[=cmp_psw_scl]{complete positive whole-number scalar}.}

\item{first}{A \link[=cmp_lgl_scl]{complete logical scalar} used to determine
whether \code{comp} is placed in front of \code{n} rather than after \code{n}.}
}
\value{
A character scalar containing all atomic elements of \code{...} formatted
as an Oxford-comma separated list.
}
\description{
Create an Oxford-comma separated list with \code{conj} as the
conjunction separating the next to last and last elements of the list, with
the list preceded by the prefix \code{pref}.
}
\section{Functions}{
\itemize{
\item \code{ox_n()}: Oxford-comma-separated list including a numeric requirement.

\item \code{ox_and()}: Oxford-comma-separated 'and' list.

\item \code{ox_or()}: Oxford-comma-separated 'or' list.

\item \code{ox_nor()}: Oxford-comma-separated 'nor' list.

\item \code{ox_either()}: Oxford-comma-separated 'either' list.

\item \code{ox_neither()}: Oxford-comma-separated 'neither/nor' list.

\item \code{ox_all()}: Oxford-comma-separated 'all of' list.

\item \code{ox_any()}: Oxford-comma-separated 'any of' list.

\item \code{ox_none()}: Oxford-comma-separated 'all of' list.

\item \code{ox_some()}: Oxford-comma-separated 'some of' list.

\item \code{ox_exactly()}: Oxford-comma-separated 'exactly n of' list.

\item \code{ox_less()}: Oxford-comma-separated 'less than n of' list.

\item \code{ox_more()}: Oxford-comma-separated 'more than n of' list.

\item \code{ox_fewer()}: Oxford-comma-separated 'fewer than n of' list.

\item \code{ox_greater()}: Oxford-comma-separated 'greater than n of' list.

\item \code{ox_atleast()}: Oxford-comma-separated 'at least n of' list.

\item \code{ox_atmost()}: Oxford-comma-separated 'at most n of' list.

\item \code{ox_nogreater()}: Oxford-comma-separated 'no greater than n of' list.

\item \code{ox_nofewer()}: Oxford-comma-separated 'no fewer than n of' list.

\item \code{ox_nomore()}: Oxford-comma-separated 'no more than n of' list.

\item \code{ox_noless()}: Oxford-comma-separated 'no less than n of' list.

\item \code{ox_ormore()}: Oxford-comma-separated 'n or more of' list.

\item \code{ox_orgreater()}: Oxford-comma-separated 'n or greater of' list.

\item \code{ox_orless()}: Oxford-comma-separated 'n or less of' list.

\item \code{ox_orfewer()}: Oxford-comma-separated 'n or fewer of' list.

}}
\examples{
Fruits <- c("apples", "bananas", "oranges")

ox(Fruits)
ox("apples", "bananas", "orange")
ox_or(Fruits)
ox_or(Fruits, pref = "neither")
ox_nor(Fruits, pref = "")
ox_nor(Fruits, pref = NULL)

ox(Fruits)
ox(Fruits, conj = "or")
ox(Fruits, conj = "nor")

ox(Fruits, pref = "", conj = "nor")
ox(Fruits, pref = "either", conj = "or")
ox(Fruits, pref = "all of", conj = "and")

ox_either(Fruits)
ox_either("apples", "bananas", "oranges")

ox_neither(Fruits)
ox_neither("apples", "bananas", "oranges")

ox_all(Fruits)
ox_all("apples", "bananas", "oranges")

ox_none(Fruits)
ox_none("apples", "bananas", "oranges")

ox_n(Fruits, n = 1)
ox_n(Fruits, conj = "and", n = 2, comp = "from among")
ox_n(Fruits, conj = "and", n = 2, comp = "at least", comp.first = TRUE)

ox_exactly(Fruits, n = 2)
ox_less(Fruits, n = 2)
ox_more(Fruits, n = 2)
ox_fewer(Fruits, n = 2)
ox_greater(Fruits, n = 2)
ox_atleast(Fruits, n = 2)
ox_atmost(Fruits, n = 2)
ox_nogreater(Fruits, n = 2)
ox_nofewer(Fruits, n = 2)
ox_nomore(Fruits, n = 2)
ox_noless(Fruits, n = 2)
ox_ormore(Fruits, n = 2)
ox_orgreater(Fruits, n = 2)
ox_orless(Fruits, n = 2)
ox_orfewer(Fruits, n = 2)
}
\seealso{
Other strings: 
\code{\link{blank}()},
\code{\link{charn}()},
\code{\link{delim}},
\code{\link{fsub}()},
\code{\link{ipat}()},
\code{\link{max_nch}()},
\code{\link{mkstr}},
\code{\link{pgrid}()},
\code{\link{revstr}()},
\code{\link{spacing}},
\code{\link{ss}()},
\code{\link{tocase}()},
\code{\link{weave}()}
}
\concept{strings}
