% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/envir_vals.R
\name{envir_vals}
\alias{envir_vals}
\alias{vexists}
\alias{vget}
\alias{vset}
\title{Objects in Environments of Calling Functions}
\usage{
vexists(name, err = T, gens = 1)

vget(name, err = T, gens = 1)

vset(name, val, gens = 1)
}
\arguments{
\item{name}{\link[=cmp_chr_scl]{Complete character scalar} giving the name of
an object.}

\item{err}{\link[=cmp_lgl_scl]{Complete logical scalar} indicating whether to
throw an error if the object specified by \code{name} does not exist (i.e.,
rather than returning \code{FALSE}).}

\item{gens}{\link[=cmp_psw_scl]{Complete positive whole-number scalar} giving
the number of generations back in the function call stack to go.}

\item{val}{A value to place into the object specified by \code{name}.}
}
\value{
\strong{\code{vexists}}
\cr A logical scalar.
\cr\cr
\strong{\code{vget}}
\cr An R object
\cr\cr
\strong{\code{vset}}
\cr \code{NULL} (called for its side effect).
}
\description{
Objects in Environments of Calling Functions
}
\section{Functions in This Family}{

\strong{\code{vexists}}
\cr Checks for the existence of an object in the environment of the calling
function \code{gens} generations back in the call stack.
\cr\cr
\strong{\code{vget}}
\cr Gets the value of an object in the environment of the calling function
\code{gens} generations back in the call stack.
\cr\cr
\strong{\code{vset}}
\cr Sets the value of an object in the environment of the calling function
\code{gens} generations back in the call stack.
}

\examples{
fun.a <- function() {A <- 0; fun.b()}
fun.b <- function() {B <- 1; fun.c()}
fun.c <- function() {
  cat("\n callstack(): " , paste0("'", callstack(), "'"))
  cat("\n caller(1)  : '", caller(1), "'")
  cat("\n caller(2)  : '", caller(2), "'")
  cat("\n exist('A', err = F, gens = 1): ", exist('A', err = F, gens = 1))
  cat("\n exist('A', err = F, gens = 2): ", exist('A', err = F, gens = 2))
  cat("\n exist('B', err = F, gens = 1): ", exist('B', err = F, gens = 1))
  cat("\n exist('B', err = F, gens = 2): ", exist('B', err = F, gens = 2))
  cat("\n vget('A', err = F, gens = 2) : ", vget('A', err = F, gens = 2))
  cat("\n vget('A', err = F, gens = 1) : ", vget('A', err = F, gens = 1))
  cat("\n vget('B', err = F, gens = 2) : ", vget('B', err = F, gens = 2))
  cat("\n vget('B', err = F, gens = 1) : ", vget('B', err = F, gens = 1))
  vSet('A', 'A', gens = 2)
  vSet('B', 'B', gens = 1)
  cat("\n vget('A', gens = 2) : ", vget('A', err = F, gens = 2))
  cat("\n vget('B', gens = 1) : ", vget('B', err = F, gens = 1))
}
fun.a()
}
\seealso{
Other extensions: 
\code{\link{atomize}},
\code{\link{binfuns}},
\code{\link{callers}()},
\code{\link{case}()},
\code{\link{dots_uj}},
\code{\link{ex}()},
\code{\link{failsafe}()},
\code{\link{files_uj}},
\code{\link{fork}()},
\code{\link{fsub}()},
\code{\link{is_failsafe}},
\code{\link{is_unq}()},
\code{\link{make_uj}},
\code{\link{n_is}()},
\code{\link{n_th}()},
\code{\link{naming}},
\code{\link{na}()},
\code{\link{os}()},
\code{\link{pause}()},
\code{\link{ply}()},
\code{\link{put}()},
\code{\link{reclass}()},
\code{\link{recycling}},
\code{\link{removal}},
\code{\link{run}()},
\code{\link{stats0}},
\code{\link{swap}()},
\code{\link{uj_logicals}},
\code{\link{xb}()}

Other environments: 
\code{\link{callers}()},
\code{\link{os}()},
\code{\link{recycling}},
\code{\link{run}()}
}
\concept{environments}
\concept{extensions}
