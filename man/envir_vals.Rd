% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/envir_vals..R
\name{envir_vals}
\alias{envir_vals}
\alias{vexists}
\alias{vget}
\alias{vset}
\title{Objects in environments of calling functions}
\usage{
vexists(name, err = T, gens = 1)

vget(name, err = T, gens = 1)

vset(name, val, gens = 1)
}
\arguments{
\item{name}{A \link[=cmp_chr_scl]{complete character scalar} giving the name of an object.}

\item{err}{A non\code{NA} logical scalar indicating whether to throw an error if the object specified by \code{name} does not exist (i.e., rather than returning \code{FALSE}).}

\item{gens}{A \link[=cmp_psw_scl]{complete positive whole-number scalar} giving the number of generations back in the function call stack to go.}

\item{val}{A value to place into the object specified by \code{name}.}
}
\value{
\tabular{rl}{
  \code{vexists}   \tab A logical scalar.
\cr  \code{vget}   \tab An R object.
\cr  \code{vset}   \tab \code{NULL}
}
}
\description{
All functions in this family operate in the environment of the calling function \code{gens} generations back in the call stack.
\tabular{rl}{
  \code{vexists}   \tab Checks for the existence of an object in the environment of the \code{gens}-specified calling function.
\cr           \tab  
\cr  \code{vget}   \tab Gets the value of an object in the environment of the \code{gens}-specified calling function.
\cr           \tab  
\cr  \code{vset}   \tab Sets the value of an object in the environment of the \code{gens}-specified calling function.
}
}
\examples{
fun.a <- function() {A <- 0; fun.b()}
fun.b <- function() {B <- 1; fun.c()}
fun.c <- function() {
  parent <- callers(1)
  grand  <- callers(2)

  say("\n Parent Function: '", parent, "'")
  say("\n Grandparent Function: '", grand , "'")
  say("\n")
  say("\n Variable 'A' exists in parent function '", parent, "': ", vexists('A', err = FALSE, gens = 1))
  say("\n Variable 'B' exists in parent function '", parent, "': ", vexists('B', err = FALSE, gens = 1))
  say("\n")
  say("\n Variable 'A' exists in grandparent function '", grand, "': ", vexists('A', err = FALSE, gens = 2))
  say("\n Variable 'B' exists in grandparent function '", grand, "': ", vexists('B', err = FALSE, gens = 2))
  say("\n")
  say("\n Value of variable 'B' in parent function '", parent, "': ", vget('B', err = FALSE, gens = 1))
  say("\n Value of variable 'A' in grandparent function '", grand, "': ", vget('A', err = FALSE, gens = 2))

  vset('A', 'A', gens = 1)
  vset('B', 'B', gens = 2)

  say("\n")
  say("\n vset('A', 'A', gens = 1)")
  say("\n vset('B', 'B', gens = 2)")
  say("\n")
  say("\n Variable 'A' exists in parent function '", parent, "': ", vexists('A', err = FALSE, gens = 1))
  say("\n Variable 'B' exists in parent function '", parent, "': ", vexists('B', err = FALSE, gens = 1))
  say("\n")
  say("\n Variable 'A' exists in grandparent function '", grand, "': ", vexists('A', err = FALSE, gens = 2))
  say("\n Variable 'B' exists in grandparent function '", grand, "': ", vexists('B', err = FALSE, gens = 2))
  say("\n")
  say("\n Value of variable 'A' in parent function '", parent, "': ", vget('A', err = FALSE, gens = 1))
  say("\n Value of variable 'B' in parent function '", parent, "': ", vget('B', err = FALSE, gens = 1))
  say("\n")
  say("\n Value of variable 'A' in grandparent function '", grand, "': ", vget('A', err = FALSE, gens = 2))
  say("\n Value of variable 'B' in grandparent function '", grand, "': ", vget('B', err = FALSE, gens = 2))
}
fun.a()
}
\seealso{
Other environments: 
\code{\link{callers}()},
\code{\link{os}()},
\code{\link{recycling}},
\code{\link{run}()}
}
\concept{environments}
