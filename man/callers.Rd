% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/callers.R
\encoding{UTF-8}
\name{callers}
\alias{callers}
\alias{caller}
\alias{caller1}
\alias{caller2}
\alias{callerN}
\alias{callersN}
\alias{ncallers}
\alias{lineage}
\alias{self}
\alias{ancestor}
\title{Function names and counts in the call stack}
\usage{
callers(vec = TRUE)

caller(scl = TRUE)

caller1(scl = TRUE)

caller2(scl = TRUE)

callerN(n, err = TRUE, scl = TRUE)

callersN(..., err = TRUE, vec = TRUE)

ncallers()

lineage(vec = TRUE)

self(scl = TRUE)

ancestor(scl = TRUE)
}
\arguments{
\item{vec}{\code{TRUE} or \code{FALSE} indicating whether to represent both package and function in a character vector rather than as a two element list with one element for packages and another for functions.}

\item{scl}{\code{TRUE} or \code{FALSE} indicating wehther to collapse package and function into a character scalar rather than as a two element list with one element for packages and another for functions.}

\item{n}{A \link[cmp_psw_vec]{complete positive whole-number scalar} giving the number of generations back in the function call stack to go.}

\item{...}{An arbitrary number of \link[=cmp_psw_vec]{complete positive whole-number vecs} giving the number(s) of generations back in the function call stack to go.}
}
\value{
\strong{An integer scalar}                                            \cr\cr \code{ncallers}
\cr\cr  \strong{A \verb{list(pkg = <character vector>, fun = <character vector>)}} \cr\cr All others when \code{vec = FALSE} or \code{scl = FALSE}.
\cr\cr  \strong{A character vector} (when \code{vec = TRUE})                       \cr\cr \verb{callers, lineage, callersN}
\cr\cr  \strong{A character scalar} (when \code{scl = TRUE})                       \cr\cr \verb{ancestor, caller, caller1, caller2, callerN, self}
}
\description{
This family of functions addresses the function call stack \emph{from the perspective of a function that calls one of the functions in this family}. Consistent with that perspective, the basic terminology this family of functions uses is the following:
\tabular{ll}{  \strong{Terminology}   \tab \strong{Function identity}                       \cr
  "command line"    \tab The command line                            \cr
  "self"            \tab Function that called a \code{callers} function   \cr
  "caller"          \tab Parent of self                              \cr
  "caller2"         \tab Grandparent of self                         \cr
  "ancestor"        \tab Function called from the command line       \cr
  "callers"         \tab Complete ancestry (excluding self)          \cr
  "lineage"         \tab Complete lineage (including self)             }
}
\details{
Consistent with this terminology introduced in the \emph{description}, the following function calls are associated with a \emph{single generation} in a lineage, where \code{K} is the number of generations in the lineage:
\tabular{ll}{  \emph{Generations}     \tab \emph{Associated}                                \cr
  \emph{backward}        \tab \emph{function calls}                            \cr
  \code{0}               \tab \code{self()}                                    \cr
  \code{1}               \tab \verb{caller(), caller1(), callerN(1)}           \cr
  \code{2}               \tab \verb{caller2(), callerN(2)}                     \cr
  \code{3}               \tab \code{callerN(3)}                                \cr
  \code{4}               \tab \code{callerN(4)}                                \cr
  \code{...}             \tab \code{...}                                       \cr
  \code{K-1}             \tab \verb{ancestor(), callerN(K-1)}                  \cr
  \code{K}               \tab \code{callerN(K)} (returns \code{'{ command line }'}).  }
\cr\cr Similarly, the following functions return values associated with at least \code{1} generation:
\tabular{ll}{  \code{ncallers}   \tab Number of calling functions (excludes \emph{self}).           \cr   \tab   \cr
  \code{callersN}   \tab Names of the calling function(s) \code{N} generation(s) back. \cr   \tab   \cr
  \code{callers}    \tab Names of all calling functions, (excludes \emph{self}).       \cr   \tab   \cr
  \code{lineage}    \tab Names of all lineage functions (includes \emph{self}).                       }
}
\examples{
egD <- function() {list(self      = self()                   ,
                        caller    = caller()                 ,
                        callers   = callers()                ,
                        caller2   = caller2(err = F)         ,
                        caller3   = callerN(3, err = F)      ,
                        callers23 = callersN(2, 3, err = F)  ,
                        ncallers  = ncallers()               ,
                        ancestor  = ancestor()               ,
                        lineage   = lineage()                )}
egC <- function() {list(self      = self()                   ,
                        caller    = caller()                 ,
                        callers   = callers()                ,
                        caller2   = caller2(err = F)         ,
                        caller3   = callerN(3, err = F)      ,
                        callers23 = callersN(2, 3, err = F)  ,
                        ncallers  = ncallers()               ,
                        ancestor  = ancestor()               ,
                        lineage   = lineage()                ,
                        egD       = egD()                    )}
egB <- function() {list(self      = self()                   ,
                        caller    = caller()                 ,
                        callers   = callers()                ,
                        caller2   = caller2(err = F)         ,
                        caller3   = callerN(3, err = F)      ,
                        callers23 = callersN(2, 3, err = F)  ,
                        ncallers  = ncallers()               ,
                        ancestor  = ancestor()               ,
                        lineage   = lineage()                ,
                        egC       = egC()                    )}
egA <- function() {list(self      = self()                   ,
                        caller    = caller()                 ,
                        callers   = callers()                ,
                        caller2   = caller2(err = F)         ,
                        caller3   = callerN(3, err = F)      ,
                        callers23 = callersN(2, 3, err = F)  ,
                        ncallers  = ncallers()               ,
                        ancestor  = ancestor()               ,
                        lineage   = lineage()                ,
                        egB       = egB()                    )}
egA()
av(egA())
}
\seealso{
Other environments: 
\code{\link{os}()},
\code{\link{recyclable_ns}()},
\code{\link{value_exists}()}

Other meta: 
\code{\link{dot_args}()},
\code{\link{pause}()},
\code{\link{ply}()},
\code{\link{purge}()},
\code{\link{recyclable_ns}()},
\code{\link{run}()},
\code{\link{say}()}
}
\concept{environments}
\concept{meta}
