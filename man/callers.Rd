% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/callers.R
\name{callers}
\alias{callers}
\alias{caller}
\alias{ncallers}
\title{Functions in the Call Stack}
\usage{
callers(gens = NULL)

caller()

ncallers()
}
\arguments{
\item{gens}{\link[cmp_psw_vec]{Complete positive whole-number vec} giving the
number(s) of generations back in the function call stack to go.}
}
\value{
\strong{\code{ncallers}}
\cr An integer scalar.
\cr\cr
\strong{\code{callers}}
\cr A character vector.
\cr\cr
\strong{\code{caller}}
\cr A character scalar.
}
\description{
Functions in the Call Stack
}
\section{Functions in This Family}{

\strong{\code{ncallers}}
\cr Gets the number of functions in the call stack.
\cr\cr
\strong{\code{callers}}
\cr Gets names of all calling functions, with the immediate calling
function in the first position and, if \code{gens.} is not \code{NULL},
selects the \code{gens.}-th element(s) from the call stack.
\cr\cr
\strong{\code{caller}}
\cr Gets the name of the immediate calling function.
}

\examples{
fun.a <- function() {A <- 0; fun.b()}
fun.b <- function() {B <- 1; fun.c()}
fun.c <- function() {
  cat("\n callers(): " , paste0("'", callers(), "'"))
  cat("\n callers(1)  : '", callers(1), "'")
  cat("\n callers(2)  : '", callers(2), "'")
  cat("\n exist('A', err = F, gens = 1): ", exist('A', err = F, gens = 1))
  cat("\n exist('A', err = F, gens = 2): ", exist('A', err = F, gens = 2))
  cat("\n exist('B', err = F, gens = 1): ", exist('B', err = F, gens = 1))
  cat("\n exist('B', err = F, gens = 2): ", exist('B', err = F, gens = 2))
  cat("\n vget('A', err = F, gens = 2) : ", vget('A', err = F, gens = 2))
  cat("\n vget('A', err = F, gens = 1) : ", vget('A', err = F, gens = 1))
  cat("\n vget('B', err = F, gens = 2) : ", vget('B', err = F, gens = 2))
  cat("\n vget('B', err = F, gens = 1) : ", vget('B', err = F, gens = 1))
  vSet('A', 'A', gens = 2)
  vSet('B', 'B', gens = 1)
  cat("\n vget('A', gens = 2) : ", vget('A', err = F, gens = 2))
  cat("\n vget('B', gens = 1) : ", vget('B', err = F, gens = 1))
}
fun.a()
}
\seealso{
Other extensions: 
\code{\link{atomize}},
\code{\link{binfuns}},
\code{\link{case}()},
\code{\link{dots_uj}},
\code{\link{envir_vals}},
\code{\link{ex}()},
\code{\link{failsafe}()},
\code{\link{files_uj}},
\code{\link{fork}()},
\code{\link{fsub}()},
\code{\link{is_failsafe}},
\code{\link{is_unq}()},
\code{\link{make_uj}},
\code{\link{n_is}()},
\code{\link{n_th}()},
\code{\link{naming}},
\code{\link{na}()},
\code{\link{os}()},
\code{\link{pause}()},
\code{\link{ply}()},
\code{\link{put}()},
\code{\link{reclass}()},
\code{\link{recycling}},
\code{\link{removal}},
\code{\link{run}()},
\code{\link{stats0}},
\code{\link{swap}()},
\code{\link{uj_logicals}},
\code{\link{xb}()}

Other environments: 
\code{\link{envir_vals}},
\code{\link{os}()},
\code{\link{recycling}},
\code{\link{run}()}
}
\concept{environments}
\concept{extensions}
